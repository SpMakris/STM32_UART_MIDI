
MIDIlib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f08  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003000  08003000  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003000  08003000  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003000  08003000  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003000  08003000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000000c  0800301c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  0800301c  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f19a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021b9  00000000  00000000  0002f1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  00031388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d80  00000000  00000000  00032210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017046  00000000  00000000  00032f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae86  00000000  00000000  00049fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c682  00000000  00000000  00054e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d14de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000347c  00000000  00000000  000d155c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002fb0 	.word	0x08002fb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002fb0 	.word	0x08002fb0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_ZN9mSettingsC1Ev>:
		return size > SysExMaxSize ? SysExMaxSize : size;
	}
	uint8_t sysexArray[];
};

struct mSettings {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2201      	movs	r2, #1
 8000232:	705a      	strb	r2, [r3, #1]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2201      	movs	r2, #1
 8000238:	709a      	strb	r2, [r3, #2]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}

08000244 <_ZN8mMessageC1Ev>:
struct mMessage {
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2200      	movs	r2, #0
 8000256:	705a      	strb	r2, [r3, #1]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2200      	movs	r2, #0
 800025c:	709a      	strb	r2, [r3, #2]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2200      	movs	r2, #0
 8000262:	70da      	strb	r2, [r3, #3]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	711a      	strb	r2, [r3, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	0018      	movs	r0, r3
 800026e:	46bd      	mov	sp, r7
 8000270:	b002      	add	sp, #8
 8000272:	bd80      	pop	{r7, pc}

08000274 <_ZN13MidiInterfaceC1Ev>:
#include "MIDI.h"
#include "stm32f0xx_hal.h"
MidiInterface::MidiInterface() {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3356      	adds	r3, #86	; 0x56
 8000280:	33ff      	adds	r3, #255	; 0xff
 8000282:	0018      	movs	r0, r3
 8000284:	f7ff ffcc 	bl	8000220 <_ZN9mSettingsC1Ev>
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3359      	adds	r3, #89	; 0x59
 800028c:	33ff      	adds	r3, #255	; 0xff
 800028e:	0018      	movs	r0, r3
 8000290:	f7ff ffd8 	bl	8000244 <_ZN8mMessageC1Ev>
	mRunningStatus_TX = InvalidType;
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	23a5      	movs	r3, #165	; 0xa5
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	2100      	movs	r1, #0
 800029c:	54d1      	strb	r1, [r2, r3]
	mRunningStatus_RX = InvalidType;
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	234a      	movs	r3, #74	; 0x4a
 80002a2:	33ff      	adds	r3, #255	; 0xff
 80002a4:	2100      	movs	r1, #0
 80002a6:	54d1      	strb	r1, [r2, r3]

	mPendingMessageIndex = 0;
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	2350      	movs	r3, #80	; 0x50
 80002ac:	33ff      	adds	r3, #255	; 0xff
 80002ae:	2100      	movs	r1, #0
 80002b0:	54d1      	strb	r1, [r2, r3]
	mPendingMessageExpectedLenght = 0;
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	23a7      	movs	r3, #167	; 0xa7
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	2100      	movs	r1, #0
 80002ba:	54d1      	strb	r1, [r2, r3]

	mCurrentRpnNumber = 0xffff;
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	23a8      	movs	r3, #168	; 0xa8
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	2101      	movs	r1, #1
 80002c4:	4249      	negs	r1, r1
 80002c6:	52d1      	strh	r1, [r2, r3]
	mCurrentNrpnNumber = 0xffff;
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	23a9      	movs	r3, #169	; 0xa9
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	2101      	movs	r1, #1
 80002d0:	4249      	negs	r1, r1
 80002d2:	52d1      	strh	r1, [r2, r3]

	mMessage.valid = false;
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	23ac      	movs	r3, #172	; 0xac
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	2100      	movs	r1, #0
 80002dc:	54d1      	strb	r1, [r2, r3]
	mMessage.type = InvalidType;
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	235a      	movs	r3, #90	; 0x5a
 80002e2:	33ff      	adds	r3, #255	; 0xff
 80002e4:	2100      	movs	r1, #0
 80002e6:	54d1      	strb	r1, [r2, r3]
	mMessage.channel = 0;
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	23ad      	movs	r3, #173	; 0xad
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	2100      	movs	r1, #0
 80002f0:	54d1      	strb	r1, [r2, r3]
	mMessage.data1 = 0;
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	235c      	movs	r3, #92	; 0x5c
 80002f6:	33ff      	adds	r3, #255	; 0xff
 80002f8:	2100      	movs	r1, #0
 80002fa:	54d1      	strb	r1, [r2, r3]
	mMessage.data2 = 0;
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	23ae      	movs	r3, #174	; 0xae
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	2100      	movs	r1, #0
 8000304:	54d1      	strb	r1, [r2, r3]
	mMessage.SysExMaxSize = Settings.SysExMaxSize;
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	235e      	movs	r3, #94	; 0x5e
 800030a:	33ff      	adds	r3, #255	; 0xff
 800030c:	2180      	movs	r1, #128	; 0x80
 800030e:	54d1      	strb	r1, [r2, r3]
	mThruFilterMode = Thru::Full;
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	23aa      	movs	r3, #170	; 0xaa
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	5cd1      	ldrb	r1, [r2, r3]
 8000318:	2001      	movs	r0, #1
 800031a:	4001      	ands	r1, r0
 800031c:	1c08      	adds	r0, r1, #0
 800031e:	2102      	movs	r1, #2
 8000320:	4301      	orrs	r1, r0
 8000322:	54d1      	strb	r1, [r2, r3]
	mThruActivated = true;
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	23aa      	movs	r3, #170	; 0xaa
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	5cd1      	ldrb	r1, [r2, r3]
 800032c:	2001      	movs	r0, #1
 800032e:	4301      	orrs	r1, r0
 8000330:	54d1      	strb	r1, [r2, r3]

	mInputChannel = 0;
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	23a4      	movs	r3, #164	; 0xa4
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	2100      	movs	r1, #0
 800033a:	54d1      	strb	r1, [r2, r3]
	mRunningStatus_RX = InvalidType;
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	234a      	movs	r3, #74	; 0x4a
 8000340:	33ff      	adds	r3, #255	; 0xff
 8000342:	2100      	movs	r1, #0
 8000344:	54d1      	strb	r1, [r2, r3]
	mRunningStatus_TX = InvalidType;
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	23a5      	movs	r3, #165	; 0xa5
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	2100      	movs	r1, #0
 800034e:	54d1      	strb	r1, [r2, r3]
	mPendingMessageExpectedLenght = 0;
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	23a7      	movs	r3, #167	; 0xa7
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	2100      	movs	r1, #0
 8000358:	54d1      	strb	r1, [r2, r3]
	mPendingMessageIndex = 0;
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	2350      	movs	r3, #80	; 0x50
 800035e:	33ff      	adds	r3, #255	; 0xff
 8000360:	2100      	movs	r1, #0
 8000362:	54d1      	strb	r1, [r2, r3]
	mCurrentRpnNumber = 0xffff;
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	23a8      	movs	r3, #168	; 0xa8
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	2101      	movs	r1, #1
 800036c:	4249      	negs	r1, r1
 800036e:	52d1      	strh	r1, [r2, r3]
	mCurrentNrpnNumber = 0xffff;
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	23a9      	movs	r3, #169	; 0xa9
 8000374:	005b      	lsls	r3, r3, #1
 8000376:	2101      	movs	r1, #1
 8000378:	4249      	negs	r1, r1
 800037a:	52d1      	strh	r1, [r2, r3]
	mThruActivated = false;
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	23aa      	movs	r3, #170	; 0xaa
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	5cd1      	ldrb	r1, [r2, r3]
 8000384:	2001      	movs	r0, #1
 8000386:	4381      	bics	r1, r0
 8000388:	54d1      	strb	r1, [r2, r3]
	mThruFilterMode = Thru::Off;
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	23aa      	movs	r3, #170	; 0xaa
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	5cd1      	ldrb	r1, [r2, r3]
 8000392:	2001      	movs	r0, #1
 8000394:	4001      	ands	r1, r0
 8000396:	54d1      	strb	r1, [r2, r3]
	mNoteOffCallback = 0;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
	mNoteOnCallback = 0;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
	mAfterTouchPolyCallback = 0;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
	mControlChangeCallback = 0;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]
	mProgramChangeCallback = 0;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
	mAfterTouchChannelCallback = 0;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
	mPitchBendCallback = 0;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
	mSystemExclusiveCallback = 0;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2200      	movs	r2, #0
 80003c6:	61da      	str	r2, [r3, #28]
	mTimeCodeQuarterFrameCallback = 0;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2200      	movs	r2, #0
 80003cc:	621a      	str	r2, [r3, #32]
	mSongPositionCallback = 0;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2200      	movs	r2, #0
 80003d2:	625a      	str	r2, [r3, #36]	; 0x24
	mSongSelectCallback = 0;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2200      	movs	r2, #0
 80003d8:	629a      	str	r2, [r3, #40]	; 0x28
	mTuneRequestCallback = 0;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2200      	movs	r2, #0
 80003de:	62da      	str	r2, [r3, #44]	; 0x2c
	mClockCallback = 0;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2200      	movs	r2, #0
 80003e4:	631a      	str	r2, [r3, #48]	; 0x30
	mStartCallback = 0;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2200      	movs	r2, #0
 80003ea:	635a      	str	r2, [r3, #52]	; 0x34
	mContinueCallback = 0;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2200      	movs	r2, #0
 80003f0:	639a      	str	r2, [r3, #56]	; 0x38
	mStopCallback = 0;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2200      	movs	r2, #0
 80003f6:	63da      	str	r2, [r3, #60]	; 0x3c
	mActiveSensingCallback = 0;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2200      	movs	r2, #0
 80003fc:	641a      	str	r2, [r3, #64]	; 0x40
	mSystemResetCallback = 0;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2200      	movs	r2, #0
 8000402:	645a      	str	r2, [r3, #68]	; 0x44

}
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	0018      	movs	r0, r3
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}

0800040e <_ZN13MidiInterfaceD1Ev>:
MidiInterface::~MidiInterface() {
 800040e:	b580      	push	{r7, lr}
 8000410:	b082      	sub	sp, #8
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
}
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	0018      	movs	r0, r3
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}

08000420 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000426:	f000 fc5b 	bl	8000ce0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800042a:	f000 f813 	bl	8000454 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800042e:	f000 f971 	bl	8000714 <_ZL12MX_GPIO_Initv>
	MX_I2C2_Init();
 8000432:	f000 f863 	bl	80004fc <_ZL12MX_I2C2_Initv>
	MX_SPI2_Init();
 8000436:	f000 f8ad 	bl	8000594 <_ZL12MX_SPI2_Initv>
	MX_TSC_Init();
 800043a:	f000 f8ed 	bl	8000618 <_ZL11MX_TSC_Initv>
	MX_USART3_UART_Init();
 800043e:	f000 f933 	bl	80006a8 <_ZL19MX_USART3_UART_Initv>
//
//	Port.setHandleStart(Handle_Start);
//
//	Port.setHandleStop(Handle_Stop);
	uint8_t incoming;
	HAL_UART_Receive_IT(&huart3, &incoming, 1);
 8000442:	1df9      	adds	r1, r7, #7
 8000444:	4b02      	ldr	r3, [pc, #8]	; (8000450 <main+0x30>)
 8000446:	2201      	movs	r2, #1
 8000448:	0018      	movs	r0, r3
 800044a:	f001 ff27 	bl	800229c <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800044e:	e7fe      	b.n	800044e <main+0x2e>
 8000450:	2000011c 	.word	0x2000011c

08000454 <_Z18SystemClock_Configv>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b093      	sub	sp, #76	; 0x4c
 8000458:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800045a:	2414      	movs	r4, #20
 800045c:	193b      	adds	r3, r7, r4
 800045e:	0018      	movs	r0, r3
 8000460:	2334      	movs	r3, #52	; 0x34
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f002 fd9b 	bl	8002fa0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	0018      	movs	r0, r3
 800046e:	2310      	movs	r3, #16
 8000470:	001a      	movs	r2, r3
 8000472:	2100      	movs	r1, #0
 8000474:	f002 fd94 	bl	8002fa0 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000478:	0021      	movs	r1, r4
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2202      	movs	r2, #2
 800047e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2201      	movs	r2, #1
 8000484:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2210      	movs	r2, #16
 800048a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2202      	movs	r2, #2
 8000490:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2280      	movs	r2, #128	; 0x80
 8000496:	0212      	lsls	r2, r2, #8
 8000498:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2280      	movs	r2, #128	; 0x80
 800049e:	0352      	lsls	r2, r2, #13
 80004a0:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 f864 	bl	8001578 <HAL_RCC_OscConfig>
 80004b0:	0003      	movs	r3, r0
 80004b2:	1e5a      	subs	r2, r3, #1
 80004b4:	4193      	sbcs	r3, r2
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <_Z18SystemClock_Configv+0x6c>
		Error_Handler();
 80004bc:	f000 f9c3 	bl	8000846 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2207      	movs	r2, #7
 80004c4:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2202      	movs	r2, #2
 80004ca:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2101      	movs	r1, #1
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 fbd1 	bl	8001c84 <HAL_RCC_ClockConfig>
 80004e2:	0003      	movs	r3, r0
 80004e4:	1e5a      	subs	r2, r3, #1
 80004e6:	4193      	sbcs	r3, r2
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <_Z18SystemClock_Configv+0x9e>
		Error_Handler();
 80004ee:	f000 f9aa 	bl	8000846 <Error_Handler>
	}
}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b013      	add	sp, #76	; 0x4c
 80004f8:	bd90      	pop	{r4, r7, pc}
	...

080004fc <_ZL12MX_I2C2_Initv>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <_ZL12MX_I2C2_Initv+0x8c>)
 8000502:	4a22      	ldr	r2, [pc, #136]	; (800058c <_ZL12MX_I2C2_Initv+0x90>)
 8000504:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <_ZL12MX_I2C2_Initv+0x8c>)
 8000508:	4a21      	ldr	r2, [pc, #132]	; (8000590 <_ZL12MX_I2C2_Initv+0x94>)
 800050a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800050c:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <_ZL12MX_I2C2_Initv+0x8c>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <_ZL12MX_I2C2_Initv+0x8c>)
 8000514:	2201      	movs	r2, #1
 8000516:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <_ZL12MX_I2C2_Initv+0x8c>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <_ZL12MX_I2C2_Initv+0x8c>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <_ZL12MX_I2C2_Initv+0x8c>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <_ZL12MX_I2C2_Initv+0x8c>)
 800052c:	2200      	movs	r2, #0
 800052e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <_ZL12MX_I2C2_Initv+0x8c>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <_ZL12MX_I2C2_Initv+0x8c>)
 8000538:	0018      	movs	r0, r3
 800053a:	f000 feef 	bl	800131c <HAL_I2C_Init>
 800053e:	0003      	movs	r3, r0
 8000540:	1e5a      	subs	r2, r3, #1
 8000542:	4193      	sbcs	r3, r2
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <_ZL12MX_I2C2_Initv+0x52>
		Error_Handler();
 800054a:	f000 f97c 	bl	8000846 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <_ZL12MX_I2C2_Initv+0x8c>)
 8000550:	2100      	movs	r1, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f000 ff78 	bl	8001448 <HAL_I2CEx_ConfigAnalogFilter>
 8000558:	0003      	movs	r3, r0
			!= HAL_OK) {
 800055a:	1e5a      	subs	r2, r3, #1
 800055c:	4193      	sbcs	r3, r2
 800055e:	b2db      	uxtb	r3, r3
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <_ZL12MX_I2C2_Initv+0x6c>
		Error_Handler();
 8000564:	f000 f96f 	bl	8000846 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <_ZL12MX_I2C2_Initv+0x8c>)
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f000 ffb7 	bl	80014e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000572:	0003      	movs	r3, r0
 8000574:	1e5a      	subs	r2, r3, #1
 8000576:	4193      	sbcs	r3, r2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <_ZL12MX_I2C2_Initv+0x86>
		Error_Handler();
 800057e:	f000 f962 	bl	8000846 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000028 	.word	0x20000028
 800058c:	40005800 	.word	0x40005800
 8000590:	20303e5d 	.word	0x20303e5d

08000594 <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000598:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 800059a:	4a1e      	ldr	r2, [pc, #120]	; (8000614 <_ZL12MX_SPI2_Initv+0x80>)
 800059c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005a0:	2282      	movs	r2, #130	; 0x82
 80005a2:	0052      	lsls	r2, r2, #1
 80005a4:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005ae:	22c0      	movs	r2, #192	; 0xc0
 80005b0:	0092      	lsls	r2, r2, #2
 80005b2:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	0092      	lsls	r2, r2, #2
 80005c6:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005ca:	2208      	movs	r2, #8
 80005cc:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005e2:	2207      	movs	r2, #7
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005ee:	2208      	movs	r2, #8
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <_ZL12MX_SPI2_Initv+0x7c>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fcbd 	bl	8001f74 <HAL_SPI_Init>
 80005fa:	0003      	movs	r3, r0
 80005fc:	1e5a      	subs	r2, r3, #1
 80005fe:	4193      	sbcs	r3, r2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <_ZL12MX_SPI2_Initv+0x76>
		Error_Handler();
 8000606:	f000 f91e 	bl	8000846 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000074 	.word	0x20000074
 8000614:	40003800 	.word	0x40003800

08000618 <_ZL11MX_TSC_Initv>:
/**
 * @brief TSC Initialization Function
 * @param None
 * @retval None
 */
static void MX_TSC_Init(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TSC_Init 1 */

	/* USER CODE END TSC_Init 1 */
	/** Configure the TSC peripheral
	 */
	htsc.Instance = TSC;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 800061e:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <_ZL11MX_TSC_Initv+0x8c>)
 8000620:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	0552      	lsls	r2, r2, #21
 8000628:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	0452      	lsls	r2, r2, #17
 8000630:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 8000634:	2200      	movs	r2, #0
 8000636:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 800063a:	2201      	movs	r2, #1
 800063c:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	0192      	lsls	r2, r2, #6
 800064a:	619a      	str	r2, [r3, #24]
	htsc.Init.MaxCountValue = TSC_MCV_8191;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 800064e:	22a0      	movs	r2, #160	; 0xa0
 8000650:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 8000660:	2200      	movs	r2, #0
 8000662:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 8000666:	222c      	movs	r2, #44	; 0x2c
 8000668:	2100      	movs	r1, #0
 800066a:	5499      	strb	r1, [r3, r2]
	htsc.Init.ChannelIOs = TSC_GROUP1_IO3 | TSC_GROUP2_IO3 | TSC_GROUP3_IO2;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 800066e:	2291      	movs	r2, #145	; 0x91
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	631a      	str	r2, [r3, #48]	; 0x30
	htsc.Init.ShieldIOs = 0;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 8000676:	2200      	movs	r2, #0
 8000678:	635a      	str	r2, [r3, #52]	; 0x34
	htsc.Init.SamplingIOs = TSC_GROUP1_IO4 | TSC_GROUP2_IO4 | TSC_GROUP3_IO3;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 800067c:	2291      	movs	r2, #145	; 0x91
 800067e:	00d2      	lsls	r2, r2, #3
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_TSC_Init(&htsc) != HAL_OK) {
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <_ZL11MX_TSC_Initv+0x88>)
 8000684:	0018      	movs	r0, r3
 8000686:	f001 fd0f 	bl	80020a8 <HAL_TSC_Init>
 800068a:	0003      	movs	r3, r0
 800068c:	1e5a      	subs	r2, r3, #1
 800068e:	4193      	sbcs	r3, r2
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <_ZL11MX_TSC_Initv+0x82>
		Error_Handler();
 8000696:	f000 f8d6 	bl	8000846 <Error_Handler>
	}
	/* USER CODE BEGIN TSC_Init 2 */

	/* USER CODE END TSC_Init 2 */

}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000d8 	.word	0x200000d8
 80006a4:	40024000 	.word	0x40024000

080006a8 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <_ZL19MX_USART3_UART_Initv+0x60>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <_ZL19MX_USART3_UART_Initv+0x64>)
 80006b0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 31250;
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <_ZL19MX_USART3_UART_Initv+0x60>)
 80006b4:	4a16      	ldr	r2, [pc, #88]	; (8000710 <_ZL19MX_USART3_UART_Initv+0x68>)
 80006b6:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <_ZL19MX_USART3_UART_Initv+0x60>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <_ZL19MX_USART3_UART_Initv+0x60>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <_ZL19MX_USART3_UART_Initv+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_RX;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <_ZL19MX_USART3_UART_Initv+0x60>)
 80006cc:	2204      	movs	r2, #4
 80006ce:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <_ZL19MX_USART3_UART_Initv+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <_ZL19MX_USART3_UART_Initv+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <_ZL19MX_USART3_UART_Initv+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <_ZL19MX_USART3_UART_Initv+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <_ZL19MX_USART3_UART_Initv+0x60>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 fd82 	bl	80021f4 <HAL_UART_Init>
 80006f0:	0003      	movs	r3, r0
 80006f2:	1e5a      	subs	r2, r3, #1
 80006f4:	4193      	sbcs	r3, r2
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <_ZL19MX_USART3_UART_Initv+0x58>
		Error_Handler();
 80006fc:	f000 f8a3 	bl	8000846 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	2000011c 	.word	0x2000011c
 800070c:	40004800 	.word	0x40004800
 8000710:	00007a12 	.word	0x00007a12

08000714 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b089      	sub	sp, #36	; 0x24
 8000718:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800071a:	240c      	movs	r4, #12
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0018      	movs	r0, r3
 8000720:	2314      	movs	r3, #20
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f002 fc3b 	bl	8002fa0 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <_ZL12MX_GPIO_Initv+0x110>)
 800072c:	695a      	ldr	r2, [r3, #20]
 800072e:	4b3d      	ldr	r3, [pc, #244]	; (8000824 <_ZL12MX_GPIO_Initv+0x110>)
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	0309      	lsls	r1, r1, #12
 8000734:	430a      	orrs	r2, r1
 8000736:	615a      	str	r2, [r3, #20]
 8000738:	4b3a      	ldr	r3, [pc, #232]	; (8000824 <_ZL12MX_GPIO_Initv+0x110>)
 800073a:	695a      	ldr	r2, [r3, #20]
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	031b      	lsls	r3, r3, #12
 8000740:	4013      	ands	r3, r2
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <_ZL12MX_GPIO_Initv+0x110>)
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	4b36      	ldr	r3, [pc, #216]	; (8000824 <_ZL12MX_GPIO_Initv+0x110>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	0289      	lsls	r1, r1, #10
 8000750:	430a      	orrs	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	4b33      	ldr	r3, [pc, #204]	; (8000824 <_ZL12MX_GPIO_Initv+0x110>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	029b      	lsls	r3, r3, #10
 800075c:	4013      	ands	r3, r2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b30      	ldr	r3, [pc, #192]	; (8000824 <_ZL12MX_GPIO_Initv+0x110>)
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <_ZL12MX_GPIO_Initv+0x110>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	02c9      	lsls	r1, r1, #11
 800076c:	430a      	orrs	r2, r1
 800076e:	615a      	str	r2, [r3, #20]
 8000770:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <_ZL12MX_GPIO_Initv+0x110>)
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	02db      	lsls	r3, r3, #11
 8000778:	4013      	ands	r3, r2
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 800077e:	492a      	ldr	r1, [pc, #168]	; (8000828 <_ZL12MX_GPIO_Initv+0x114>)
 8000780:	4b2a      	ldr	r3, [pc, #168]	; (800082c <_ZL12MX_GPIO_Initv+0x118>)
 8000782:	2200      	movs	r2, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f000 fdab 	bl	80012e0 <HAL_GPIO_WritePin>
	NCS_MEMS_SPI_Pin | EXT_RESET_Pin | LD3_Pin | LD6_Pin | LD4_Pin | LD5_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
	 LD4_Pin LD5_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | EXT_RESET_Pin | LD3_Pin | LD6_Pin
 800078a:	0021      	movs	r1, r4
 800078c:	187b      	adds	r3, r7, r1
 800078e:	4a26      	ldr	r2, [pc, #152]	; (8000828 <_ZL12MX_GPIO_Initv+0x114>)
 8000790:	601a      	str	r2, [r3, #0]
			| LD4_Pin | LD5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2201      	movs	r2, #1
 8000796:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a4:	000c      	movs	r4, r1
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	4a20      	ldr	r2, [pc, #128]	; (800082c <_ZL12MX_GPIO_Initv+0x118>)
 80007aa:	0019      	movs	r1, r3
 80007ac:	0010      	movs	r0, r2
 80007ae:	f000 fc1f 	bl	8000ff0 <HAL_GPIO_Init>

	/*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT1_Pin | MEMS_INT2_Pin;
 80007b2:	0021      	movs	r1, r4
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2206      	movs	r2, #6
 80007b8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <_ZL12MX_GPIO_Initv+0x11c>)
 80007be:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c6:	000c      	movs	r4, r1
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <_ZL12MX_GPIO_Initv+0x118>)
 80007cc:	0019      	movs	r1, r3
 80007ce:	0010      	movs	r0, r2
 80007d0:	f000 fc0e 	bl	8000ff0 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007d4:	0021      	movs	r1, r4
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2201      	movs	r2, #1
 80007da:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <_ZL12MX_GPIO_Initv+0x11c>)
 80007e0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e8:	000c      	movs	r4, r1
 80007ea:	187a      	adds	r2, r7, r1
 80007ec:	2390      	movs	r3, #144	; 0x90
 80007ee:	05db      	lsls	r3, r3, #23
 80007f0:	0011      	movs	r1, r2
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fbfc 	bl	8000ff0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007f8:	0021      	movs	r1, r4
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	0152      	lsls	r2, r2, #5
 8000800:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	187b      	adds	r3, r7, r1
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <_ZL12MX_GPIO_Initv+0x118>)
 8000812:	0019      	movs	r1, r3
 8000814:	0010      	movs	r0, r2
 8000816:	f000 fbeb 	bl	8000ff0 <HAL_GPIO_Init>

}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b009      	add	sp, #36	; 0x24
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	40021000 	.word	0x40021000
 8000828:	000003e1 	.word	0x000003e1
 800082c:	48000800 	.word	0x48000800
 8000830:	10120000 	.word	0x10120000

08000834 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	__NOP();
 800083c:	46c0      	nop			; (mov r8, r8)
}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b002      	add	sp, #8
 8000844:	bd80      	pop	{r7, pc}

08000846 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <_Z41__static_initialization_and_destruction_0ii>:
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d107      	bne.n	8000870 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d103      	bne.n	8000870 <_Z41__static_initialization_and_destruction_0ii+0x20>
MidiInterface Port;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800086a:	0018      	movs	r0, r3
 800086c:	f7ff fd02 	bl	8000274 <_ZN13MidiInterfaceC1Ev>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d107      	bne.n	8000886 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d103      	bne.n	8000886 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff fdc4 	bl	800040e <_ZN13MidiInterfaceD1Ev>
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	0000ffff 	.word	0x0000ffff
 8000894:	2000019c 	.word	0x2000019c

08000898 <_GLOBAL__sub_I_hi2c2>:
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <_GLOBAL__sub_I_hi2c2+0x14>)
 800089e:	0019      	movs	r1, r3
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff ffd5 	bl	8000850 <_Z41__static_initialization_and_destruction_0ii>
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	0000ffff 	.word	0x0000ffff

080008b0 <_GLOBAL__sub_D_hi2c2>:
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <_GLOBAL__sub_D_hi2c2+0x14>)
 80008b6:	0019      	movs	r1, r3
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff ffc9 	bl	8000850 <_Z41__static_initialization_and_destruction_0ii>
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	0000ffff 	.word	0x0000ffff

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x44>)
 80008d0:	699a      	ldr	r2, [r3, #24]
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_MspInit+0x44>)
 80008d4:	2101      	movs	r1, #1
 80008d6:	430a      	orrs	r2, r1
 80008d8:	619a      	str	r2, [r3, #24]
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_MspInit+0x44>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	2201      	movs	r2, #1
 80008e0:	4013      	ands	r3, r2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x44>)
 80008e8:	69da      	ldr	r2, [r3, #28]
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_MspInit+0x44>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0549      	lsls	r1, r1, #21
 80008f0:	430a      	orrs	r2, r1
 80008f2:	61da      	str	r2, [r3, #28]
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_MspInit+0x44>)
 80008f6:	69da      	ldr	r2, [r3, #28]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	055b      	lsls	r3, r3, #21
 80008fc:	4013      	ands	r3, r2
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b002      	add	sp, #8
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	2314      	movs	r3, #20
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	0018      	movs	r0, r3
 800091e:	2314      	movs	r3, #20
 8000920:	001a      	movs	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	f002 fb3c 	bl	8002fa0 <memset>
  if(hi2c->Instance==I2C2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <HAL_I2C_MspInit+0x90>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d132      	bne.n	8000998 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_I2C_MspInit+0x94>)
 8000934:	695a      	ldr	r2, [r3, #20]
 8000936:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <HAL_I2C_MspInit+0x94>)
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	02c9      	lsls	r1, r1, #11
 800093c:	430a      	orrs	r2, r1
 800093e:	615a      	str	r2, [r3, #20]
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_I2C_MspInit+0x94>)
 8000942:	695a      	ldr	r2, [r3, #20]
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	02db      	lsls	r3, r3, #11
 8000948:	4013      	ands	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 800094e:	2114      	movs	r1, #20
 8000950:	187b      	adds	r3, r7, r1
 8000952:	22c0      	movs	r2, #192	; 0xc0
 8000954:	0112      	lsls	r2, r2, #4
 8000956:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2212      	movs	r2, #18
 800095c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2201      	movs	r2, #1
 8000962:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2203      	movs	r2, #3
 8000968:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2201      	movs	r2, #1
 800096e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	187b      	adds	r3, r7, r1
 8000972:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <HAL_I2C_MspInit+0x98>)
 8000974:	0019      	movs	r1, r3
 8000976:	0010      	movs	r0, r2
 8000978:	f000 fb3a 	bl	8000ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_I2C_MspInit+0x94>)
 800097e:	69da      	ldr	r2, [r3, #28]
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_I2C_MspInit+0x94>)
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	03c9      	lsls	r1, r1, #15
 8000986:	430a      	orrs	r2, r1
 8000988:	61da      	str	r2, [r3, #28]
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_I2C_MspInit+0x94>)
 800098c:	69da      	ldr	r2, [r3, #28]
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	03db      	lsls	r3, r3, #15
 8000992:	4013      	ands	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b00a      	add	sp, #40	; 0x28
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40005800 	.word	0x40005800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	48000400 	.word	0x48000400

080009ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	2314      	movs	r3, #20
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	0018      	movs	r0, r3
 80009ba:	2314      	movs	r3, #20
 80009bc:	001a      	movs	r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	f002 faee 	bl	8002fa0 <memset>
  if(hspi->Instance==SPI2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <HAL_SPI_MspInit+0x90>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d132      	bne.n	8000a34 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <HAL_SPI_MspInit+0x94>)
 80009d0:	69da      	ldr	r2, [r3, #28]
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_SPI_MspInit+0x94>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	01c9      	lsls	r1, r1, #7
 80009d8:	430a      	orrs	r2, r1
 80009da:	61da      	str	r2, [r3, #28]
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_SPI_MspInit+0x94>)
 80009de:	69da      	ldr	r2, [r3, #28]
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	01db      	lsls	r3, r3, #7
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_SPI_MspInit+0x94>)
 80009ec:	695a      	ldr	r2, [r3, #20]
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_SPI_MspInit+0x94>)
 80009f0:	2180      	movs	r1, #128	; 0x80
 80009f2:	02c9      	lsls	r1, r1, #11
 80009f4:	430a      	orrs	r2, r1
 80009f6:	615a      	str	r2, [r3, #20]
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_SPI_MspInit+0x94>)
 80009fa:	695a      	ldr	r2, [r3, #20]
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	02db      	lsls	r3, r3, #11
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000a06:	2114      	movs	r1, #20
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	22e0      	movs	r2, #224	; 0xe0
 8000a0c:	0212      	lsls	r2, r2, #8
 8000a0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2202      	movs	r2, #2
 8000a14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <HAL_SPI_MspInit+0x98>)
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	0010      	movs	r0, r2
 8000a30:	f000 fade 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b00a      	add	sp, #40	; 0x28
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40003800 	.word	0x40003800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	48000400 	.word	0x48000400

08000a48 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b08b      	sub	sp, #44	; 0x2c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	2314      	movs	r3, #20
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	0018      	movs	r0, r3
 8000a56:	2314      	movs	r3, #20
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f002 faa0 	bl	8002fa0 <memset>
  if(htsc->Instance==TSC)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a45      	ldr	r2, [pc, #276]	; (8000b7c <HAL_TSC_MspInit+0x134>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d000      	beq.n	8000a6c <HAL_TSC_MspInit+0x24>
 8000a6a:	e083      	b.n	8000b74 <HAL_TSC_MspInit+0x12c>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000a6c:	4b44      	ldr	r3, [pc, #272]	; (8000b80 <HAL_TSC_MspInit+0x138>)
 8000a6e:	695a      	ldr	r2, [r3, #20]
 8000a70:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <HAL_TSC_MspInit+0x138>)
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	0449      	lsls	r1, r1, #17
 8000a76:	430a      	orrs	r2, r1
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <HAL_TSC_MspInit+0x138>)
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	045b      	lsls	r3, r3, #17
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b3d      	ldr	r3, [pc, #244]	; (8000b80 <HAL_TSC_MspInit+0x138>)
 8000a8a:	695a      	ldr	r2, [r3, #20]
 8000a8c:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <HAL_TSC_MspInit+0x138>)
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	0289      	lsls	r1, r1, #10
 8000a92:	430a      	orrs	r2, r1
 8000a94:	615a      	str	r2, [r3, #20]
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <HAL_TSC_MspInit+0x138>)
 8000a98:	695a      	ldr	r2, [r3, #20]
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	029b      	lsls	r3, r3, #10
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa4:	4b36      	ldr	r3, [pc, #216]	; (8000b80 <HAL_TSC_MspInit+0x138>)
 8000aa6:	695a      	ldr	r2, [r3, #20]
 8000aa8:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <HAL_TSC_MspInit+0x138>)
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	02c9      	lsls	r1, r1, #11
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	615a      	str	r2, [r3, #20]
 8000ab2:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <HAL_TSC_MspInit+0x138>)
 8000ab4:	695a      	ldr	r2, [r3, #20]
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	02db      	lsls	r3, r3, #11
 8000aba:	4013      	ands	r3, r2
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000ac0:	2414      	movs	r4, #20
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2244      	movs	r2, #68	; 0x44
 8000ac6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2202      	movs	r2, #2
 8000acc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2203      	movs	r2, #3
 8000ade:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	193a      	adds	r2, r7, r4
 8000ae2:	2390      	movs	r3, #144	; 0x90
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 fa81 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2288      	movs	r2, #136	; 0x88
 8000af2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2212      	movs	r2, #18
 8000af8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	2203      	movs	r2, #3
 8000b0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	193a      	adds	r2, r7, r4
 8000b0e:	2390      	movs	r3, #144	; 0x90
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 fa6b 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1a:	0021      	movs	r1, r4
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2202      	movs	r2, #2
 8000b26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2203      	movs	r2, #3
 8000b38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	000c      	movs	r4, r1
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <HAL_TSC_MspInit+0x13c>)
 8000b40:	0019      	movs	r1, r3
 8000b42:	0010      	movs	r0, r2
 8000b44:	f000 fa54 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b48:	0021      	movs	r1, r4
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2212      	movs	r2, #18
 8000b54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2203      	movs	r2, #3
 8000b66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_TSC_MspInit+0x13c>)
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	0010      	movs	r0, r2
 8000b70:	f000 fa3e 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b00b      	add	sp, #44	; 0x2c
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	40024000 	.word	0x40024000
 8000b80:	40021000 	.word	0x40021000
 8000b84:	48000400 	.word	0x48000400

08000b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	2314      	movs	r3, #20
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	0018      	movs	r0, r3
 8000b96:	2314      	movs	r3, #20
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f002 fa00 	bl	8002fa0 <memset>
  if(huart->Instance==USART3)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <HAL_UART_MspInit+0xa0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d13a      	bne.n	8000c20 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <HAL_UART_MspInit+0xa4>)
 8000bac:	69da      	ldr	r2, [r3, #28]
 8000bae:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <HAL_UART_MspInit+0xa4>)
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	02c9      	lsls	r1, r1, #11
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	61da      	str	r2, [r3, #28]
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HAL_UART_MspInit+0xa4>)
 8000bba:	69da      	ldr	r2, [r3, #28]
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	02db      	lsls	r3, r3, #11
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_UART_MspInit+0xa4>)
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_UART_MspInit+0xa4>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	0309      	lsls	r1, r1, #12
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	615a      	str	r2, [r3, #20]
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_UART_MspInit+0xa4>)
 8000bd6:	695a      	ldr	r2, [r3, #20]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	031b      	lsls	r3, r3, #12
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC4     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8000be2:	2114      	movs	r1, #20
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2281      	movs	r2, #129	; 0x81
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2202      	movs	r2, #2
 8000bf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2201      	movs	r2, #1
 8000c02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_UART_MspInit+0xa8>)
 8000c08:	0019      	movs	r1, r3
 8000c0a:	0010      	movs	r0, r2
 8000c0c:	f000 f9f0 	bl	8000ff0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	201d      	movs	r0, #29
 8000c16:	f000 f973 	bl	8000f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000c1a:	201d      	movs	r0, #29
 8000c1c:	f000 f985 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b00a      	add	sp, #40	; 0x28
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40004800 	.word	0x40004800
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48000800 	.word	0x48000800

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f888 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <USART3_4_IRQHandler+0x14>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f001 fbcc 	bl	800240c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	2000011c 	.word	0x2000011c

08000c80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <LoopForever+0xe>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca8:	4c0b      	ldr	r4, [pc, #44]	; (8000cd8 <LoopForever+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cb6:	f7ff ffe3 	bl	8000c80 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cba:	f002 f94d 	bl	8002f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cbe:	f7ff fbaf 	bl	8000420 <main>

08000cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc2:	e7fe      	b.n	8000cc2 <LoopForever>
  ldr   r0, =_estack
 8000cc4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cd0:	08003010 	.word	0x08003010
  ldr r2, =_sbss
 8000cd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cd8:	20000300 	.word	0x20000300

08000cdc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_COMP_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <HAL_Init+0x24>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_Init+0x24>)
 8000cea:	2110      	movs	r1, #16
 8000cec:	430a      	orrs	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f000 f809 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf6:	f7ff fde7 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40022000 	.word	0x40022000

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_InitTick+0x5c>)
 8000d12:	681c      	ldr	r4, [r3, #0]
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_InitTick+0x60>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	0019      	movs	r1, r3
 8000d1a:	23fa      	movs	r3, #250	; 0xfa
 8000d1c:	0098      	lsls	r0, r3, #2
 8000d1e:	f7ff f9f3 	bl	8000108 <__udivsi3>
 8000d22:	0003      	movs	r3, r0
 8000d24:	0019      	movs	r1, r3
 8000d26:	0020      	movs	r0, r4
 8000d28:	f7ff f9ee 	bl	8000108 <__udivsi3>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 f90b 	bl	8000f4a <HAL_SYSTICK_Config>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e00f      	b.n	8000d5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d80b      	bhi.n	8000d5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	2301      	movs	r3, #1
 8000d46:	425b      	negs	r3, r3
 8000d48:	2200      	movs	r2, #0
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 f8d8 	bl	8000f00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_InitTick+0x64>)
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b003      	add	sp, #12
 8000d62:	bd90      	pop	{r4, r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	18d2      	adds	r2, r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_IncTick+0x20>)
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	200002fc 	.word	0x200002fc

08000d94 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	200002fc 	.word	0x200002fc

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	0002      	movs	r2, r0
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dba:	d809      	bhi.n	8000dd0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	231f      	movs	r3, #31
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_EnableIRQ+0x30>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4091      	lsls	r1, r2
 8000dcc:	000a      	movs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
  }
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	0002      	movs	r2, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b7f      	cmp	r3, #127	; 0x7f
 8000df0:	d828      	bhi.n	8000e44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df2:	4a2f      	ldr	r2, [pc, #188]	; (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	33c0      	adds	r3, #192	; 0xc0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	589b      	ldr	r3, [r3, r2]
 8000e02:	1dfa      	adds	r2, r7, #7
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	0011      	movs	r1, r2
 8000e08:	2203      	movs	r2, #3
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	21ff      	movs	r1, #255	; 0xff
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	22ff      	movs	r2, #255	; 0xff
 8000e20:	401a      	ands	r2, r3
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	0018      	movs	r0, r3
 8000e28:	2303      	movs	r3, #3
 8000e2a:	4003      	ands	r3, r0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	33c0      	adds	r3, #192	; 0xc0
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e42:	e031      	b.n	8000ea8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e44:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	400b      	ands	r3, r1
 8000e50:	3b08      	subs	r3, #8
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3306      	adds	r3, #6
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	18d3      	adds	r3, r2, r3
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1dfa      	adds	r2, r7, #7
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	0011      	movs	r1, r2
 8000e64:	2203      	movs	r2, #3
 8000e66:	400a      	ands	r2, r1
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	21ff      	movs	r1, #255	; 0xff
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	43d2      	mvns	r2, r2
 8000e72:	401a      	ands	r2, r3
 8000e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	019b      	lsls	r3, r3, #6
 8000e7a:	22ff      	movs	r2, #255	; 0xff
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	0018      	movs	r0, r3
 8000e84:	2303      	movs	r3, #3
 8000e86:	4003      	ands	r3, r0
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001c      	movs	r4, r3
 8000e94:	230f      	movs	r3, #15
 8000e96:	4023      	ands	r3, r4
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	3306      	adds	r3, #6
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	18c3      	adds	r3, r0, r3
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b003      	add	sp, #12
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <SysTick_Config+0x40>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d901      	bls.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e010      	b.n	8000ef0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <SysTick_Config+0x44>)
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	3a01      	subs	r2, #1
 8000ed4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	425b      	negs	r3, r3
 8000eda:	2103      	movs	r1, #3
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ff7d 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SysTick_Config+0x44>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x44>)
 8000eea:	2207      	movs	r2, #7
 8000eec:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	00ffffff 	.word	0x00ffffff
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	1c02      	adds	r2, r0, #0
 8000f10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	0002      	movs	r2, r0
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff ff33 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ffaf 	bl	8000eb8 <SysTick_Config>
 8000f5a:	0003      	movs	r3, r0
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2221      	movs	r2, #33	; 0x21
 8000f78:	5c9b      	ldrb	r3, [r3, r2]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d007      	beq.n	8000f90 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2204      	movs	r2, #4
 8000f84:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f86:	230f      	movs	r3, #15
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	e028      	b.n	8000fe2 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	210e      	movs	r1, #14
 8000f9c:	438a      	bics	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2101      	movs	r1, #1
 8000fac:	438a      	bics	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4091      	lsls	r1, r2
 8000fbc:	000a      	movs	r2, r1
 8000fbe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2221      	movs	r2, #33	; 0x21
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2220      	movs	r2, #32
 8000fcc:	2100      	movs	r1, #0
 8000fce:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d004      	beq.n	8000fe2 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	0010      	movs	r0, r2
 8000fe0:	4798      	blx	r3
    } 
  }
  return status;
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	781b      	ldrb	r3, [r3, #0]
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b004      	add	sp, #16
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffe:	e155      	b.n	80012ac <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4091      	lsls	r1, r2
 800100a:	000a      	movs	r2, r1
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d100      	bne.n	8001018 <HAL_GPIO_Init+0x28>
 8001016:	e146      	b.n	80012a6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x38>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b12      	cmp	r3, #18
 8001026:	d123      	bne.n	8001070 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	58d3      	ldr	r3, [r2, r3]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2207      	movs	r2, #7
 800103a:	4013      	ands	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2107      	movs	r1, #7
 8001054:	400b      	ands	r3, r1
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	409a      	lsls	r2, r3
 800105a:	0013      	movs	r3, r2
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	6939      	ldr	r1, [r7, #16]
 800106e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	409a      	lsls	r2, r3
 800107e:	0013      	movs	r3, r2
 8001080:	43da      	mvns	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2203      	movs	r2, #3
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	409a      	lsls	r2, r3
 8001096:	0013      	movs	r3, r2
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d00b      	beq.n	80010c4 <HAL_GPIO_Init+0xd4>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d007      	beq.n	80010c4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b8:	2b11      	cmp	r3, #17
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b12      	cmp	r3, #18
 80010c2:	d130      	bne.n	8001126 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	409a      	lsls	r2, r3
 80010d2:	0013      	movs	r3, r2
 80010d4:	43da      	mvns	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	409a      	lsls	r2, r3
 80010e6:	0013      	movs	r3, r2
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fa:	2201      	movs	r2, #1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	2201      	movs	r2, #1
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	055b      	lsls	r3, r3, #21
 800115e:	4013      	ands	r3, r2
 8001160:	d100      	bne.n	8001164 <HAL_GPIO_Init+0x174>
 8001162:	e0a0      	b.n	80012a6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001164:	4b57      	ldr	r3, [pc, #348]	; (80012c4 <HAL_GPIO_Init+0x2d4>)
 8001166:	699a      	ldr	r2, [r3, #24]
 8001168:	4b56      	ldr	r3, [pc, #344]	; (80012c4 <HAL_GPIO_Init+0x2d4>)
 800116a:	2101      	movs	r1, #1
 800116c:	430a      	orrs	r2, r1
 800116e:	619a      	str	r2, [r3, #24]
 8001170:	4b54      	ldr	r3, [pc, #336]	; (80012c4 <HAL_GPIO_Init+0x2d4>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	2201      	movs	r2, #1
 8001176:	4013      	ands	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800117c:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <HAL_GPIO_Init+0x2d8>)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	589b      	ldr	r3, [r3, r2]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2203      	movs	r2, #3
 800118e:	4013      	ands	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	409a      	lsls	r2, r3
 8001196:	0013      	movs	r3, r2
 8001198:	43da      	mvns	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	2390      	movs	r3, #144	; 0x90
 80011a4:	05db      	lsls	r3, r3, #23
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d019      	beq.n	80011de <HAL_GPIO_Init+0x1ee>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a47      	ldr	r2, [pc, #284]	; (80012cc <HAL_GPIO_Init+0x2dc>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0x1ea>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a46      	ldr	r2, [pc, #280]	; (80012d0 <HAL_GPIO_Init+0x2e0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00d      	beq.n	80011d6 <HAL_GPIO_Init+0x1e6>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a45      	ldr	r2, [pc, #276]	; (80012d4 <HAL_GPIO_Init+0x2e4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d007      	beq.n	80011d2 <HAL_GPIO_Init+0x1e2>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a44      	ldr	r2, [pc, #272]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_GPIO_Init+0x1de>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x1f0>
 80011ce:	2305      	movs	r3, #5
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x1f0>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x1f0>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x1f0>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x1f0>
 80011de:	2300      	movs	r3, #0
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	2103      	movs	r1, #3
 80011e4:	400a      	ands	r2, r1
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f0:	4935      	ldr	r1, [pc, #212]	; (80012c8 <HAL_GPIO_Init+0x2d8>)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fe:	4b37      	ldr	r3, [pc, #220]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43da      	mvns	r2, r3
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	025b      	lsls	r3, r3, #9
 8001216:	4013      	ands	r3, r2
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001222:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43da      	mvns	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	029b      	lsls	r3, r3, #10
 8001240:	4013      	ands	r3, r2
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43da      	mvns	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	035b      	lsls	r3, r3, #13
 800126a:	4013      	ands	r3, r2
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43da      	mvns	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	039b      	lsls	r3, r3, #14
 8001294:	4013      	ands	r3, r2
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	40da      	lsrs	r2, r3
 80012b4:	1e13      	subs	r3, r2, #0
 80012b6:	d000      	beq.n	80012ba <HAL_GPIO_Init+0x2ca>
 80012b8:	e6a2      	b.n	8001000 <HAL_GPIO_Init+0x10>
  } 
}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b006      	add	sp, #24
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000
 80012cc:	48000400 	.word	0x48000400
 80012d0:	48000800 	.word	0x48000800
 80012d4:	48000c00 	.word	0x48000c00
 80012d8:	48001000 	.word	0x48001000
 80012dc:	40010400 	.word	0x40010400

080012e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	0008      	movs	r0, r1
 80012ea:	0011      	movs	r1, r2
 80012ec:	1cbb      	adds	r3, r7, #2
 80012ee:	1c02      	adds	r2, r0, #0
 80012f0:	801a      	strh	r2, [r3, #0]
 80012f2:	1c7b      	adds	r3, r7, #1
 80012f4:	1c0a      	adds	r2, r1, #0
 80012f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012f8:	1c7b      	adds	r3, r7, #1
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001300:	1cbb      	adds	r3, r7, #2
 8001302:	881a      	ldrh	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800130a:	1cbb      	adds	r3, r7, #2
 800130c:	881a      	ldrh	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e082      	b.n	8001434 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2241      	movs	r2, #65	; 0x41
 8001332:	5c9b      	ldrb	r3, [r3, r2]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d107      	bne.n	800134a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2240      	movs	r2, #64	; 0x40
 800133e:	2100      	movs	r1, #0
 8001340:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0018      	movs	r0, r3
 8001346:	f7ff fae3 	bl	8000910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2241      	movs	r2, #65	; 0x41
 800134e:	2124      	movs	r1, #36	; 0x24
 8001350:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	438a      	bics	r2, r1
 8001360:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4934      	ldr	r1, [pc, #208]	; (800143c <HAL_I2C_Init+0x120>)
 800136c:	400a      	ands	r2, r1
 800136e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4931      	ldr	r1, [pc, #196]	; (8001440 <HAL_I2C_Init+0x124>)
 800137c:	400a      	ands	r2, r1
 800137e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d108      	bne.n	800139a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2180      	movs	r1, #128	; 0x80
 8001392:	0209      	lsls	r1, r1, #8
 8001394:	430a      	orrs	r2, r1
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	e007      	b.n	80013aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2184      	movs	r1, #132	; 0x84
 80013a4:	0209      	lsls	r1, r1, #8
 80013a6:	430a      	orrs	r2, r1
 80013a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d104      	bne.n	80013bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	491f      	ldr	r1, [pc, #124]	; (8001444 <HAL_I2C_Init+0x128>)
 80013c8:	430a      	orrs	r2, r1
 80013ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	491a      	ldr	r1, [pc, #104]	; (8001440 <HAL_I2C_Init+0x124>)
 80013d8:	400a      	ands	r2, r1
 80013da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	0011      	movs	r1, r2
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	021a      	lsls	r2, r3, #8
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69d9      	ldr	r1, [r3, #28]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2101      	movs	r1, #1
 8001412:	430a      	orrs	r2, r1
 8001414:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2241      	movs	r2, #65	; 0x41
 8001420:	2120      	movs	r1, #32
 8001422:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2242      	movs	r2, #66	; 0x42
 800142e:	2100      	movs	r1, #0
 8001430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b002      	add	sp, #8
 800143a:	bd80      	pop	{r7, pc}
 800143c:	f0ffffff 	.word	0xf0ffffff
 8001440:	ffff7fff 	.word	0xffff7fff
 8001444:	02008000 	.word	0x02008000

08001448 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2241      	movs	r2, #65	; 0x41
 8001456:	5c9b      	ldrb	r3, [r3, r2]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b20      	cmp	r3, #32
 800145c:	d138      	bne.n	80014d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	5c9b      	ldrb	r3, [r3, r2]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001468:	2302      	movs	r3, #2
 800146a:	e032      	b.n	80014d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2240      	movs	r2, #64	; 0x40
 8001470:	2101      	movs	r1, #1
 8001472:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2241      	movs	r2, #65	; 0x41
 8001478:	2124      	movs	r1, #36	; 0x24
 800147a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2101      	movs	r1, #1
 8001488:	438a      	bics	r2, r1
 800148a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4911      	ldr	r1, [pc, #68]	; (80014dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001498:	400a      	ands	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6819      	ldr	r1, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2101      	movs	r1, #1
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2241      	movs	r2, #65	; 0x41
 80014c0:	2120      	movs	r1, #32
 80014c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2240      	movs	r2, #64	; 0x40
 80014c8:	2100      	movs	r1, #0
 80014ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e000      	b.n	80014d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014d0:	2302      	movs	r3, #2
  }
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	ffffefff 	.word	0xffffefff

080014e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2241      	movs	r2, #65	; 0x41
 80014ee:	5c9b      	ldrb	r3, [r3, r2]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d139      	bne.n	800156a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2240      	movs	r2, #64	; 0x40
 80014fa:	5c9b      	ldrb	r3, [r3, r2]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001500:	2302      	movs	r3, #2
 8001502:	e033      	b.n	800156c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2240      	movs	r2, #64	; 0x40
 8001508:	2101      	movs	r1, #1
 800150a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2241      	movs	r2, #65	; 0x41
 8001510:	2124      	movs	r1, #36	; 0x24
 8001512:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2101      	movs	r1, #1
 8001520:	438a      	bics	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4a11      	ldr	r2, [pc, #68]	; (8001574 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001530:	4013      	ands	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2101      	movs	r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2241      	movs	r2, #65	; 0x41
 800155a:	2120      	movs	r1, #32
 800155c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2240      	movs	r2, #64	; 0x40
 8001562:	2100      	movs	r1, #0
 8001564:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e000      	b.n	800156c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800156a:	2302      	movs	r3, #2
  }
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b004      	add	sp, #16
 8001572:	bd80      	pop	{r7, pc}
 8001574:	fffff0ff 	.word	0xfffff0ff

08001578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	f000 fb76 	bl	8001c78 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2201      	movs	r2, #1
 8001592:	4013      	ands	r3, r2
 8001594:	d100      	bne.n	8001598 <HAL_RCC_OscConfig+0x20>
 8001596:	e08e      	b.n	80016b6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001598:	4bc5      	ldr	r3, [pc, #788]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	220c      	movs	r2, #12
 800159e:	4013      	ands	r3, r2
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d00e      	beq.n	80015c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015a4:	4bc2      	ldr	r3, [pc, #776]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	220c      	movs	r2, #12
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d117      	bne.n	80015e0 <HAL_RCC_OscConfig+0x68>
 80015b0:	4bbf      	ldr	r3, [pc, #764]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	23c0      	movs	r3, #192	; 0xc0
 80015b6:	025b      	lsls	r3, r3, #9
 80015b8:	401a      	ands	r2, r3
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	025b      	lsls	r3, r3, #9
 80015be:	429a      	cmp	r2, r3
 80015c0:	d10e      	bne.n	80015e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c2:	4bbb      	ldr	r3, [pc, #748]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	029b      	lsls	r3, r3, #10
 80015ca:	4013      	ands	r3, r2
 80015cc:	d100      	bne.n	80015d0 <HAL_RCC_OscConfig+0x58>
 80015ce:	e071      	b.n	80016b4 <HAL_RCC_OscConfig+0x13c>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d000      	beq.n	80015da <HAL_RCC_OscConfig+0x62>
 80015d8:	e06c      	b.n	80016b4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	f000 fb4c 	bl	8001c78 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d107      	bne.n	80015f8 <HAL_RCC_OscConfig+0x80>
 80015e8:	4bb1      	ldr	r3, [pc, #708]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4bb0      	ldr	r3, [pc, #704]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	0249      	lsls	r1, r1, #9
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e02f      	b.n	8001658 <HAL_RCC_OscConfig+0xe0>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10c      	bne.n	800161a <HAL_RCC_OscConfig+0xa2>
 8001600:	4bab      	ldr	r3, [pc, #684]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4baa      	ldr	r3, [pc, #680]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001606:	49ab      	ldr	r1, [pc, #684]	; (80018b4 <HAL_RCC_OscConfig+0x33c>)
 8001608:	400a      	ands	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	4ba8      	ldr	r3, [pc, #672]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4ba7      	ldr	r3, [pc, #668]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001612:	49a9      	ldr	r1, [pc, #676]	; (80018b8 <HAL_RCC_OscConfig+0x340>)
 8001614:	400a      	ands	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e01e      	b.n	8001658 <HAL_RCC_OscConfig+0xe0>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b05      	cmp	r3, #5
 8001620:	d10e      	bne.n	8001640 <HAL_RCC_OscConfig+0xc8>
 8001622:	4ba3      	ldr	r3, [pc, #652]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4ba2      	ldr	r3, [pc, #648]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	02c9      	lsls	r1, r1, #11
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	4b9f      	ldr	r3, [pc, #636]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b9e      	ldr	r3, [pc, #632]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	0249      	lsls	r1, r1, #9
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0xe0>
 8001640:	4b9b      	ldr	r3, [pc, #620]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b9a      	ldr	r3, [pc, #616]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001646:	499b      	ldr	r1, [pc, #620]	; (80018b4 <HAL_RCC_OscConfig+0x33c>)
 8001648:	400a      	ands	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	4b98      	ldr	r3, [pc, #608]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b97      	ldr	r3, [pc, #604]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001652:	4999      	ldr	r1, [pc, #612]	; (80018b8 <HAL_RCC_OscConfig+0x340>)
 8001654:	400a      	ands	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fb98 	bl	8000d94 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166a:	f7ff fb93 	bl	8000d94 <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b64      	cmp	r3, #100	; 0x64
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e2fd      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167c:	4b8c      	ldr	r3, [pc, #560]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	029b      	lsls	r3, r3, #10
 8001684:	4013      	ands	r3, r2
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0xf2>
 8001688:	e015      	b.n	80016b6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fb83 	bl	8000d94 <HAL_GetTick>
 800168e:	0003      	movs	r3, r0
 8001690:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fb7e 	bl	8000d94 <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e2e8      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	4b82      	ldr	r3, [pc, #520]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	029b      	lsls	r3, r3, #10
 80016ae:	4013      	ands	r3, r2
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x11c>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2202      	movs	r2, #2
 80016bc:	4013      	ands	r3, r2
 80016be:	d100      	bne.n	80016c2 <HAL_RCC_OscConfig+0x14a>
 80016c0:	e06c      	b.n	800179c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016c2:	4b7b      	ldr	r3, [pc, #492]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	220c      	movs	r2, #12
 80016c8:	4013      	ands	r3, r2
 80016ca:	d00e      	beq.n	80016ea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016cc:	4b78      	ldr	r3, [pc, #480]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	220c      	movs	r2, #12
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d11f      	bne.n	8001718 <HAL_RCC_OscConfig+0x1a0>
 80016d8:	4b75      	ldr	r3, [pc, #468]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	23c0      	movs	r3, #192	; 0xc0
 80016de:	025b      	lsls	r3, r3, #9
 80016e0:	401a      	ands	r2, r3
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d116      	bne.n	8001718 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	4b71      	ldr	r3, [pc, #452]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2202      	movs	r2, #2
 80016f0:	4013      	ands	r3, r2
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_OscConfig+0x188>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e2bb      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b6b      	ldr	r3, [pc, #428]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	22f8      	movs	r2, #248	; 0xf8
 8001706:	4393      	bics	r3, r2
 8001708:	0019      	movs	r1, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00da      	lsls	r2, r3, #3
 8001710:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	e041      	b.n	800179c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d024      	beq.n	800176a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b62      	ldr	r3, [pc, #392]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001726:	2101      	movs	r1, #1
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fb32 	bl	8000d94 <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fb2d 	bl	8000d94 <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e297      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2202      	movs	r2, #2
 800174e:	4013      	ands	r3, r2
 8001750:	d0f1      	beq.n	8001736 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001752:	4b57      	ldr	r3, [pc, #348]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	22f8      	movs	r2, #248	; 0xf8
 8001758:	4393      	bics	r3, r2
 800175a:	0019      	movs	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	00da      	lsls	r2, r3, #3
 8001762:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e018      	b.n	800179c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176a:	4b51      	ldr	r3, [pc, #324]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001770:	2101      	movs	r1, #1
 8001772:	438a      	bics	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fb0d 	bl	8000d94 <HAL_GetTick>
 800177a:	0003      	movs	r3, r0
 800177c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff fb08 	bl	8000d94 <HAL_GetTick>
 8001784:	0002      	movs	r2, r0
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e272      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2202      	movs	r2, #2
 8001798:	4013      	ands	r3, r2
 800179a:	d1f1      	bne.n	8001780 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2208      	movs	r2, #8
 80017a2:	4013      	ands	r3, r2
 80017a4:	d036      	beq.n	8001814 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d019      	beq.n	80017e2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ae:	4b40      	ldr	r3, [pc, #256]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80017b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	430a      	orrs	r2, r1
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff faeb 	bl	8000d94 <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c4:	f7ff fae6 	bl	8000d94 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e250      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	2202      	movs	r2, #2
 80017dc:	4013      	ands	r3, r2
 80017de:	d0f1      	beq.n	80017c4 <HAL_RCC_OscConfig+0x24c>
 80017e0:	e018      	b.n	8001814 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e2:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80017e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e6:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	438a      	bics	r2, r1
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fad1 	bl	8000d94 <HAL_GetTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff facc 	bl	8000d94 <HAL_GetTick>
 80017fc:	0002      	movs	r2, r0
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e236      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d1f1      	bne.n	80017f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2204      	movs	r2, #4
 800181a:	4013      	ands	r3, r2
 800181c:	d100      	bne.n	8001820 <HAL_RCC_OscConfig+0x2a8>
 800181e:	e0b5      	b.n	800198c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001820:	231f      	movs	r3, #31
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 800182a:	69da      	ldr	r2, [r3, #28]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	055b      	lsls	r3, r3, #21
 8001830:	4013      	ands	r3, r2
 8001832:	d111      	bne.n	8001858 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001836:	69da      	ldr	r2, [r3, #28]
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	0549      	lsls	r1, r1, #21
 800183e:	430a      	orrs	r2, r1
 8001840:	61da      	str	r2, [r3, #28]
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	055b      	lsls	r3, r3, #21
 800184a:	4013      	ands	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001850:	231f      	movs	r3, #31
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_RCC_OscConfig+0x344>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4013      	ands	r3, r2
 8001862:	d11a      	bne.n	800189a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_RCC_OscConfig+0x344>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_RCC_OscConfig+0x344>)
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	0049      	lsls	r1, r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001872:	f7ff fa8f 	bl	8000d94 <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187c:	f7ff fa8a 	bl	8000d94 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1f4      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_OscConfig+0x344>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4013      	ands	r3, r2
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10e      	bne.n	80018c0 <HAL_RCC_OscConfig+0x348>
 80018a2:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80018a4:	6a1a      	ldr	r2, [r3, #32]
 80018a6:	4b02      	ldr	r3, [pc, #8]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	430a      	orrs	r2, r1
 80018ac:	621a      	str	r2, [r3, #32]
 80018ae:	e035      	b.n	800191c <HAL_RCC_OscConfig+0x3a4>
 80018b0:	40021000 	.word	0x40021000
 80018b4:	fffeffff 	.word	0xfffeffff
 80018b8:	fffbffff 	.word	0xfffbffff
 80018bc:	40007000 	.word	0x40007000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x36a>
 80018c8:	4bca      	ldr	r3, [pc, #808]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	6a1a      	ldr	r2, [r3, #32]
 80018cc:	4bc9      	ldr	r3, [pc, #804]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	438a      	bics	r2, r1
 80018d2:	621a      	str	r2, [r3, #32]
 80018d4:	4bc7      	ldr	r3, [pc, #796]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80018d6:	6a1a      	ldr	r2, [r3, #32]
 80018d8:	4bc6      	ldr	r3, [pc, #792]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80018da:	2104      	movs	r1, #4
 80018dc:	438a      	bics	r2, r1
 80018de:	621a      	str	r2, [r3, #32]
 80018e0:	e01c      	b.n	800191c <HAL_RCC_OscConfig+0x3a4>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x38c>
 80018ea:	4bc2      	ldr	r3, [pc, #776]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80018ec:	6a1a      	ldr	r2, [r3, #32]
 80018ee:	4bc1      	ldr	r3, [pc, #772]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80018f0:	2104      	movs	r1, #4
 80018f2:	430a      	orrs	r2, r1
 80018f4:	621a      	str	r2, [r3, #32]
 80018f6:	4bbf      	ldr	r3, [pc, #764]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80018f8:	6a1a      	ldr	r2, [r3, #32]
 80018fa:	4bbe      	ldr	r3, [pc, #760]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	621a      	str	r2, [r3, #32]
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0x3a4>
 8001904:	4bbb      	ldr	r3, [pc, #748]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001906:	6a1a      	ldr	r2, [r3, #32]
 8001908:	4bba      	ldr	r3, [pc, #744]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 800190a:	2101      	movs	r1, #1
 800190c:	438a      	bics	r2, r1
 800190e:	621a      	str	r2, [r3, #32]
 8001910:	4bb8      	ldr	r3, [pc, #736]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	4bb7      	ldr	r3, [pc, #732]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001916:	2104      	movs	r1, #4
 8001918:	438a      	bics	r2, r1
 800191a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d014      	beq.n	800194e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7ff fa36 	bl	8000d94 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	e009      	b.n	8001942 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff fa31 	bl	8000d94 <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	4aaf      	ldr	r2, [pc, #700]	; (8001bf8 <HAL_RCC_OscConfig+0x680>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e19a      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001942:	4bac      	ldr	r3, [pc, #688]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	2202      	movs	r2, #2
 8001948:	4013      	ands	r3, r2
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x3b6>
 800194c:	e013      	b.n	8001976 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff fa21 	bl	8000d94 <HAL_GetTick>
 8001952:	0003      	movs	r3, r0
 8001954:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001956:	e009      	b.n	800196c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff fa1c 	bl	8000d94 <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	4aa5      	ldr	r2, [pc, #660]	; (8001bf8 <HAL_RCC_OscConfig+0x680>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e185      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196c:	4ba1      	ldr	r3, [pc, #644]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001976:	231f      	movs	r3, #31
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4b9c      	ldr	r3, [pc, #624]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001982:	69da      	ldr	r2, [r3, #28]
 8001984:	4b9b      	ldr	r3, [pc, #620]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001986:	499d      	ldr	r1, [pc, #628]	; (8001bfc <HAL_RCC_OscConfig+0x684>)
 8001988:	400a      	ands	r2, r1
 800198a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2210      	movs	r2, #16
 8001992:	4013      	ands	r3, r2
 8001994:	d063      	beq.n	8001a5e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d12a      	bne.n	80019f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800199e:	4b95      	ldr	r3, [pc, #596]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80019a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a2:	4b94      	ldr	r3, [pc, #592]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80019a4:	2104      	movs	r1, #4
 80019a6:	430a      	orrs	r2, r1
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019aa:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80019ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ae:	4b91      	ldr	r3, [pc, #580]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80019b0:	2101      	movs	r1, #1
 80019b2:	430a      	orrs	r2, r1
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b6:	f7ff f9ed 	bl	8000d94 <HAL_GetTick>
 80019ba:	0003      	movs	r3, r0
 80019bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019c0:	f7ff f9e8 	bl	8000d94 <HAL_GetTick>
 80019c4:	0002      	movs	r2, r0
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e152      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019d2:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	2202      	movs	r2, #2
 80019d8:	4013      	ands	r3, r2
 80019da:	d0f1      	beq.n	80019c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019dc:	4b85      	ldr	r3, [pc, #532]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80019de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e0:	22f8      	movs	r2, #248	; 0xf8
 80019e2:	4393      	bics	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	00da      	lsls	r2, r3, #3
 80019ec:	4b81      	ldr	r3, [pc, #516]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	635a      	str	r2, [r3, #52]	; 0x34
 80019f2:	e034      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	3305      	adds	r3, #5
 80019fa:	d111      	bne.n	8001a20 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019fc:	4b7d      	ldr	r3, [pc, #500]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 80019fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a00:	4b7c      	ldr	r3, [pc, #496]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001a02:	2104      	movs	r1, #4
 8001a04:	438a      	bics	r2, r1
 8001a06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a08:	4b7a      	ldr	r3, [pc, #488]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	22f8      	movs	r2, #248	; 0xf8
 8001a0e:	4393      	bics	r3, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	00da      	lsls	r2, r3, #3
 8001a18:	4b76      	ldr	r3, [pc, #472]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1e:	e01e      	b.n	8001a5e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a20:	4b74      	ldr	r3, [pc, #464]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a24:	4b73      	ldr	r3, [pc, #460]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001a26:	2104      	movs	r1, #4
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a2c:	4b71      	ldr	r3, [pc, #452]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a30:	4b70      	ldr	r3, [pc, #448]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	438a      	bics	r2, r1
 8001a36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a38:	f7ff f9ac 	bl	8000d94 <HAL_GetTick>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a42:	f7ff f9a7 	bl	8000d94 <HAL_GetTick>
 8001a46:	0002      	movs	r2, r0
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e111      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a54:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	2202      	movs	r2, #2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d1f1      	bne.n	8001a42 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2220      	movs	r2, #32
 8001a64:	4013      	ands	r3, r2
 8001a66:	d05c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a68:	4b62      	ldr	r3, [pc, #392]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	220c      	movs	r2, #12
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	d00e      	beq.n	8001a92 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a74:	4b5f      	ldr	r3, [pc, #380]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	220c      	movs	r2, #12
 8001a7a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d114      	bne.n	8001aaa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a80:	4b5c      	ldr	r3, [pc, #368]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	23c0      	movs	r3, #192	; 0xc0
 8001a86:	025b      	lsls	r3, r3, #9
 8001a88:	401a      	ands	r2, r3
 8001a8a:	23c0      	movs	r3, #192	; 0xc0
 8001a8c:	025b      	lsls	r3, r3, #9
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d10b      	bne.n	8001aaa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a92:	4b58      	ldr	r3, [pc, #352]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	025b      	lsls	r3, r3, #9
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d040      	beq.n	8001b20 <HAL_RCC_OscConfig+0x5a8>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d03c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0e6      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d01b      	beq.n	8001aea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ab2:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab6:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	0249      	lsls	r1, r1, #9
 8001abc:	430a      	orrs	r2, r1
 8001abe:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f968 	bl	8000d94 <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aca:	f7ff f963 	bl	8000d94 <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e0cd      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001adc:	4b45      	ldr	r3, [pc, #276]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	025b      	lsls	r3, r3, #9
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x552>
 8001ae8:	e01b      	b.n	8001b22 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001aea:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aee:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001af0:	4943      	ldr	r1, [pc, #268]	; (8001c00 <HAL_RCC_OscConfig+0x688>)
 8001af2:	400a      	ands	r2, r1
 8001af4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff f94d 	bl	8000d94 <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b00:	f7ff f948 	bl	8000d94 <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e0b2      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	025b      	lsls	r3, r3, #9
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x588>
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b20:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d100      	bne.n	8001b2c <HAL_RCC_OscConfig+0x5b4>
 8001b2a:	e0a4      	b.n	8001c76 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	220c      	movs	r2, #12
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d100      	bne.n	8001b3a <HAL_RCC_OscConfig+0x5c2>
 8001b38:	e078      	b.n	8001c2c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d14c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001b48:	492e      	ldr	r1, [pc, #184]	; (8001c04 <HAL_RCC_OscConfig+0x68c>)
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f921 	bl	8000d94 <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f91c 	bl	8000d94 <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e086      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	049b      	lsls	r3, r3, #18
 8001b72:	4013      	ands	r3, r2
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	4393      	bics	r3, r2
 8001b7e:	0019      	movs	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001b86:	430a      	orrs	r2, r1
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_RCC_OscConfig+0x690>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001baa:	2180      	movs	r1, #128	; 0x80
 8001bac:	0449      	lsls	r1, r1, #17
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f8ef 	bl	8000d94 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f8ea 	bl	8000d94 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e054      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	049b      	lsls	r3, r3, #18
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x644>
 8001bda:	e04c      	b.n	8001c76 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HAL_RCC_OscConfig+0x67c>)
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <HAL_RCC_OscConfig+0x68c>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff f8d4 	bl	8000d94 <HAL_GetTick>
 8001bec:	0003      	movs	r3, r0
 8001bee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf0:	e015      	b.n	8001c1e <HAL_RCC_OscConfig+0x6a6>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	00001388 	.word	0x00001388
 8001bfc:	efffffff 	.word	0xefffffff
 8001c00:	fffeffff 	.word	0xfffeffff
 8001c04:	feffffff 	.word	0xfeffffff
 8001c08:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff f8c2 	bl	8000d94 <HAL_GetTick>
 8001c10:	0002      	movs	r2, r0
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e02c      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_RCC_OscConfig+0x708>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	049b      	lsls	r3, r3, #18
 8001c26:	4013      	ands	r3, r2
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x694>
 8001c2a:	e024      	b.n	8001c76 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e01f      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_RCC_OscConfig+0x708>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_RCC_OscConfig+0x708>)
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	23c0      	movs	r3, #192	; 0xc0
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d10e      	bne.n	8001c72 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	220f      	movs	r2, #15
 8001c58:	401a      	ands	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	23f0      	movs	r3, #240	; 0xf0
 8001c66:	039b      	lsls	r3, r3, #14
 8001c68:	401a      	ands	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b008      	add	sp, #32
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000

08001c84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0bf      	b.n	8001e18 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <HAL_RCC_ClockConfig+0x19c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d911      	bls.n	8001cca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <HAL_RCC_ClockConfig+0x19c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2201      	movs	r2, #1
 8001cac:	4393      	bics	r3, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <HAL_RCC_ClockConfig+0x19c>)
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb8:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <HAL_RCC_ClockConfig+0x19c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0a6      	b.n	8001e18 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d015      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2204      	movs	r2, #4
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d006      	beq.n	8001cec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cde:	4b51      	ldr	r3, [pc, #324]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001ce4:	21e0      	movs	r1, #224	; 0xe0
 8001ce6:	00c9      	lsls	r1, r1, #3
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	22f0      	movs	r2, #240	; 0xf0
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	4b4a      	ldr	r3, [pc, #296]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4013      	ands	r3, r2
 8001d08:	d04c      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	029b      	lsls	r3, r3, #10
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d120      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e07a      	b.n	8001e18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	049b      	lsls	r3, r3, #18
 8001d32:	4013      	ands	r3, r2
 8001d34:	d114      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e06e      	b.n	8001e18 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d42:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	025b      	lsls	r3, r3, #9
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d108      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e062      	b.n	8001e18 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d52:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2202      	movs	r2, #2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e05b      	b.n	8001e18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2203      	movs	r2, #3
 8001d66:	4393      	bics	r3, r2
 8001d68:	0019      	movs	r1, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001d70:	430a      	orrs	r2, r1
 8001d72:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d74:	f7ff f80e 	bl	8000d94 <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7c:	e009      	b.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7e:	f7ff f809 	bl	8000d94 <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	4a27      	ldr	r2, [pc, #156]	; (8001e28 <HAL_RCC_ClockConfig+0x1a4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e042      	b.n	8001e18 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	220c      	movs	r2, #12
 8001d98:	401a      	ands	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d1ec      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_RCC_ClockConfig+0x19c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2201      	movs	r2, #1
 8001daa:	4013      	ands	r3, r2
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d211      	bcs.n	8001dd6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_RCC_ClockConfig+0x19c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2201      	movs	r2, #1
 8001db8:	4393      	bics	r3, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_RCC_ClockConfig+0x19c>)
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_RCC_ClockConfig+0x19c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e020      	b.n	8001e18 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2204      	movs	r2, #4
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <HAL_RCC_ClockConfig+0x1a8>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001df4:	f000 f820 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001df8:	0001      	movs	r1, r0
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_RCC_ClockConfig+0x1a0>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	220f      	movs	r2, #15
 8001e02:	4013      	ands	r3, r2
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_RCC_ClockConfig+0x1ac>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	000a      	movs	r2, r1
 8001e0a:	40da      	lsrs	r2, r3
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_ClockConfig+0x1b0>)
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7fe ff79 	bl	8000d08 <HAL_InitTick>
  
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b004      	add	sp, #16
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40022000 	.word	0x40022000
 8001e24:	40021000 	.word	0x40021000
 8001e28:	00001388 	.word	0x00001388
 8001e2c:	fffff8ff 	.word	0xfffff8ff
 8001e30:	08002fe8 	.word	0x08002fe8
 8001e34:	20000000 	.word	0x20000000

08001e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b08f      	sub	sp, #60	; 0x3c
 8001e3c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e3e:	2314      	movs	r3, #20
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	4a37      	ldr	r2, [pc, #220]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001e44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e46:	c313      	stmia	r3!, {r0, r1, r4}
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4a35      	ldr	r2, [pc, #212]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xec>)
 8001e50:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e52:	c313      	stmia	r3!, {r0, r1, r4}
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e60:	2300      	movs	r3, #0
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	220c      	movs	r2, #12
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d006      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x52>
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d043      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0xd0>
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d144      	bne.n	8001f0e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e88:	e044      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8c:	0c9b      	lsrs	r3, r3, #18
 8001e8e:	220f      	movs	r2, #15
 8001e90:	4013      	ands	r3, r2
 8001e92:	2214      	movs	r2, #20
 8001e94:	18ba      	adds	r2, r7, r2
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e9a:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	1d3a      	adds	r2, r7, #4
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eaa:	23c0      	movs	r3, #192	; 0xc0
 8001eac:	025b      	lsls	r3, r3, #9
 8001eae:	401a      	ands	r2, r3
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	025b      	lsls	r3, r3, #9
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d109      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eba:	481c      	ldr	r0, [pc, #112]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ebc:	f7fe f924 	bl	8000108 <__udivsi3>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	001a      	movs	r2, r3
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	4353      	muls	r3, r2
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8001eca:	e01a      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ece:	23c0      	movs	r3, #192	; 0xc0
 8001ed0:	025b      	lsls	r3, r3, #9
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	23c0      	movs	r3, #192	; 0xc0
 8001ed6:	025b      	lsls	r3, r3, #9
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d109      	bne.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ede:	4814      	ldr	r0, [pc, #80]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee0:	f7fe f912 	bl	8000108 <__udivsi3>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	4353      	muls	r3, r2
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ef2:	480e      	ldr	r0, [pc, #56]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ef4:	f7fe f908 	bl	8000108 <__udivsi3>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	001a      	movs	r2, r3
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	4353      	muls	r3, r2
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f06:	e005      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f0c:	e002      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f12:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b00f      	add	sp, #60	; 0x3c
 8001f1c:	bd90      	pop	{r4, r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	08002fc8 	.word	0x08002fc8
 8001f24:	08002fd8 	.word	0x08002fd8
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	007a1200 	.word	0x007a1200
 8001f30:	02dc6c00 	.word	0x02dc6c00

08001f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f38:	4b02      	ldr	r3, [pc, #8]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	20000000 	.word	0x20000000

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f4c:	f7ff fff2 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f50:	0001      	movs	r1, r0
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	2207      	movs	r2, #7
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	40d9      	lsrs	r1, r3
 8001f62:	000b      	movs	r3, r1
}    
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	08002ff8 	.word	0x08002ff8

08001f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e08a      	b.n	800209c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	225d      	movs	r2, #93	; 0x5d
 8001f90:	5c9b      	ldrb	r3, [r3, r2]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	225c      	movs	r2, #92	; 0x5c
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7fe fd02 	bl	80009ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	225d      	movs	r2, #93	; 0x5d
 8001fac:	2102      	movs	r1, #2
 8001fae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2140      	movs	r1, #64	; 0x40
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	23e0      	movs	r3, #224	; 0xe0
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d902      	bls.n	8001fd2 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	e002      	b.n	8001fd8 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	015b      	lsls	r3, r3, #5
 8001fd6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	23f0      	movs	r3, #240	; 0xf0
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d008      	beq.n	8001ff6 <HAL_SPI_Init+0x82>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	23e0      	movs	r3, #224	; 0xe0
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d002      	beq.n	8001ff6 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	23e0      	movs	r3, #224	; 0xe0
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	429a      	cmp	r2, r3
 8002008:	d903      	bls.n	8002012 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2202      	movs	r2, #2
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
 8002010:	e002      	b.n	8002018 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6999      	ldr	r1, [r3, #24]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	400b      	ands	r3, r1
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	431a      	orrs	r2, r3
 8002046:	0011      	movs	r1, r2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	2204      	movs	r2, #4
 800205c:	401a      	ands	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	431a      	orrs	r2, r3
 8002070:	0011      	movs	r1, r2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	430a      	orrs	r2, r1
 800207a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4907      	ldr	r1, [pc, #28]	; (80020a4 <HAL_SPI_Init+0x130>)
 8002088:	400a      	ands	r2, r1
 800208a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	225d      	movs	r2, #93	; 0x5d
 8002096:	2101      	movs	r1, #1
 8002098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b004      	add	sp, #16
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	fffff7ff 	.word	0xfffff7ff

080020a8 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e074      	b.n	80021a4 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	223c      	movs	r2, #60	; 0x3c
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	223d      	movs	r2, #61	; 0x3d
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7fe fcb9 	bl	8000a48 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	223c      	movs	r2, #60	; 0x3c
 80020da:	2102      	movs	r1, #2
 80020dc:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6819      	ldr	r1, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80020f4:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 80020fc:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002102:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002108:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800210e:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8002114:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 800211a:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7b1b      	ldrb	r3, [r3, #12]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d108      	bne.n	800213e <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	0249      	lsls	r1, r1, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	43d2      	mvns	r2, r2
 8002154:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800216e:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681c      	ldr	r4, [r3, #0]
 8002178:	0010      	movs	r0, r2
 800217a:	f000 f817 	bl	80021ac <TSC_extract_groups>
 800217e:	0003      	movs	r3, r0
 8002180:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2103      	movs	r1, #3
 800218e:	438a      	bics	r2, r1
 8002190:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2203      	movs	r2, #3
 8002198:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	223c      	movs	r2, #60	; 0x3c
 800219e:	2101      	movs	r1, #1
 80021a0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b003      	add	sp, #12
 80021aa:	bd90      	pop	{r4, r7, pc}

080021ac <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	e011      	b.n	80021e2 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	409a      	lsls	r2, r3
 80021c6:	0013      	movs	r3, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4013      	ands	r3, r2
 80021cc:	d006      	beq.n	80021dc <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 80021ce:	2201      	movs	r2, #1
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	3301      	adds	r3, #1
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b07      	cmp	r3, #7
 80021e6:	d9ea      	bls.n	80021be <TSC_extract_groups+0x12>
    }
  }

  return groups;
 80021e8:	68fb      	ldr	r3, [r7, #12]
}
 80021ea:	0018      	movs	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b004      	add	sp, #16
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e044      	b.n	8002290 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2270      	movs	r2, #112	; 0x70
 8002212:	2100      	movs	r1, #0
 8002214:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f7fe fcb5 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2224      	movs	r2, #36	; 0x24
 8002222:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	438a      	bics	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	0018      	movs	r0, r3
 8002238:	f000 fa34 	bl	80026a4 <UART_SetConfig>
 800223c:	0003      	movs	r3, r0
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e024      	b.n	8002290 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	0018      	movs	r0, r3
 8002252:	f000 fbf3 	bl	8002a3c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	490d      	ldr	r1, [pc, #52]	; (8002298 <HAL_UART_Init+0xa4>)
 8002262:	400a      	ands	r2, r1
 8002264:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	212a      	movs	r1, #42	; 0x2a
 8002272:	438a      	bics	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 fc8b 	bl	8002ba4 <UART_CheckIdleState>
 800228e:	0003      	movs	r3, r0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b002      	add	sp, #8
 8002296:	bd80      	pop	{r7, pc}
 8002298:	ffffb7ff 	.word	0xffffb7ff

0800229c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	1dbb      	adds	r3, r7, #6
 80022a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	d000      	beq.n	80022b4 <HAL_UART_Receive_IT+0x18>
 80022b2:	e09f      	b.n	80023f4 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_UART_Receive_IT+0x26>
 80022ba:	1dbb      	adds	r3, r7, #6
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e097      	b.n	80023f6 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	015b      	lsls	r3, r3, #5
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d109      	bne.n	80022e6 <HAL_UART_Receive_IT+0x4a>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2201      	movs	r2, #1
 80022de:	4013      	ands	r3, r2
 80022e0:	d001      	beq.n	80022e6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e087      	b.n	80023f6 <HAL_UART_Receive_IT+0x15a>
      }
    }

    __HAL_LOCK(huart);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2270      	movs	r2, #112	; 0x70
 80022ea:	5c9b      	ldrb	r3, [r3, r2]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_UART_Receive_IT+0x58>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e080      	b.n	80023f6 <HAL_UART_Receive_IT+0x15a>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2270      	movs	r2, #112	; 0x70
 80022f8:	2101      	movs	r1, #1
 80022fa:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1dba      	adds	r2, r7, #6
 8002306:	2158      	movs	r1, #88	; 0x58
 8002308:	8812      	ldrh	r2, [r2, #0]
 800230a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1dba      	adds	r2, r7, #6
 8002310:	215a      	movs	r1, #90	; 0x5a
 8002312:	8812      	ldrh	r2, [r2, #0]
 8002314:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	015b      	lsls	r3, r3, #5
 8002324:	429a      	cmp	r2, r3
 8002326:	d10d      	bne.n	8002344 <HAL_UART_Receive_IT+0xa8>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d104      	bne.n	800233a <HAL_UART_Receive_IT+0x9e>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	225c      	movs	r2, #92	; 0x5c
 8002334:	4932      	ldr	r1, [pc, #200]	; (8002400 <HAL_UART_Receive_IT+0x164>)
 8002336:	5299      	strh	r1, [r3, r2]
 8002338:	e02e      	b.n	8002398 <HAL_UART_Receive_IT+0xfc>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	225c      	movs	r2, #92	; 0x5c
 800233e:	21ff      	movs	r1, #255	; 0xff
 8002340:	5299      	strh	r1, [r3, r2]
 8002342:	e029      	b.n	8002398 <HAL_UART_Receive_IT+0xfc>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10d      	bne.n	8002368 <HAL_UART_Receive_IT+0xcc>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d104      	bne.n	800235e <HAL_UART_Receive_IT+0xc2>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	225c      	movs	r2, #92	; 0x5c
 8002358:	21ff      	movs	r1, #255	; 0xff
 800235a:	5299      	strh	r1, [r3, r2]
 800235c:	e01c      	b.n	8002398 <HAL_UART_Receive_IT+0xfc>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	225c      	movs	r2, #92	; 0x5c
 8002362:	217f      	movs	r1, #127	; 0x7f
 8002364:	5299      	strh	r1, [r3, r2]
 8002366:	e017      	b.n	8002398 <HAL_UART_Receive_IT+0xfc>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	055b      	lsls	r3, r3, #21
 8002370:	429a      	cmp	r2, r3
 8002372:	d10d      	bne.n	8002390 <HAL_UART_Receive_IT+0xf4>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d104      	bne.n	8002386 <HAL_UART_Receive_IT+0xea>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	225c      	movs	r2, #92	; 0x5c
 8002380:	217f      	movs	r1, #127	; 0x7f
 8002382:	5299      	strh	r1, [r3, r2]
 8002384:	e008      	b.n	8002398 <HAL_UART_Receive_IT+0xfc>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	225c      	movs	r2, #92	; 0x5c
 800238a:	213f      	movs	r1, #63	; 0x3f
 800238c:	5299      	strh	r1, [r3, r2]
 800238e:	e003      	b.n	8002398 <HAL_UART_Receive_IT+0xfc>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	225c      	movs	r2, #92	; 0x5c
 8002394:	2100      	movs	r1, #0
 8002396:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2222      	movs	r2, #34	; 0x22
 80023a2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2101      	movs	r1, #1
 80023b0:	430a      	orrs	r2, r1
 80023b2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	015b      	lsls	r3, r3, #5
 80023bc:	429a      	cmp	r2, r3
 80023be:	d107      	bne.n	80023d0 <HAL_UART_Receive_IT+0x134>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d103      	bne.n	80023d0 <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <HAL_UART_Receive_IT+0x168>)
 80023cc:	661a      	str	r2, [r3, #96]	; 0x60
 80023ce:	e002      	b.n	80023d6 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <HAL_UART_Receive_IT+0x16c>)
 80023d4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2270      	movs	r2, #112	; 0x70
 80023da:	2100      	movs	r1, #0
 80023dc:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2190      	movs	r1, #144	; 0x90
 80023ea:	0049      	lsls	r1, r1, #1
 80023ec:	430a      	orrs	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e000      	b.n	80023f6 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
  }
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	000001ff 	.word	0x000001ff
 8002404:	08002e8d 	.word	0x08002e8d
 8002408:	08002dd1 	.word	0x08002dd1

0800240c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4a93      	ldr	r2, [pc, #588]	; (800267c <HAL_UART_IRQHandler+0x270>)
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d112      	bne.n	8002460 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	2220      	movs	r2, #32
 800243e:	4013      	ands	r3, r2
 8002440:	d00e      	beq.n	8002460 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2220      	movs	r2, #32
 8002446:	4013      	ands	r3, r2
 8002448:	d00a      	beq.n	8002460 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244e:	2b00      	cmp	r3, #0
 8002450:	d100      	bne.n	8002454 <HAL_UART_IRQHandler+0x48>
 8002452:	e10b      	b.n	800266c <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	0010      	movs	r0, r2
 800245c:	4798      	blx	r3
      }
      return;
 800245e:	e105      	b.n	800266c <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d100      	bne.n	8002468 <HAL_UART_IRQHandler+0x5c>
 8002466:	e0cd      	b.n	8002604 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2201      	movs	r2, #1
 800246c:	4013      	ands	r3, r2
 800246e:	d105      	bne.n	800247c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	2390      	movs	r3, #144	; 0x90
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4013      	ands	r3, r2
 8002478:	d100      	bne.n	800247c <HAL_UART_IRQHandler+0x70>
 800247a:	e0c3      	b.n	8002604 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2201      	movs	r2, #1
 8002480:	4013      	ands	r3, r2
 8002482:	d00e      	beq.n	80024a2 <HAL_UART_IRQHandler+0x96>
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4013      	ands	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2201      	movs	r2, #1
 8002494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800249a:	2201      	movs	r2, #1
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	2202      	movs	r2, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	d00d      	beq.n	80024c6 <HAL_UART_IRQHandler+0xba>
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2201      	movs	r2, #1
 80024ae:	4013      	ands	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2202      	movs	r2, #2
 80024b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024be:	2204      	movs	r2, #4
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2204      	movs	r2, #4
 80024ca:	4013      	ands	r3, r2
 80024cc:	d00d      	beq.n	80024ea <HAL_UART_IRQHandler+0xde>
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2201      	movs	r2, #1
 80024d2:	4013      	ands	r3, r2
 80024d4:	d009      	beq.n	80024ea <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2204      	movs	r2, #4
 80024dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e2:	2202      	movs	r2, #2
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	2208      	movs	r2, #8
 80024ee:	4013      	ands	r3, r2
 80024f0:	d011      	beq.n	8002516 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2220      	movs	r2, #32
 80024f6:	4013      	ands	r3, r2
 80024f8:	d103      	bne.n	8002502 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002500:	d009      	beq.n	8002516 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2208      	movs	r2, #8
 8002508:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800250e:	2208      	movs	r2, #8
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	4013      	ands	r3, r2
 800251e:	d00f      	beq.n	8002540 <HAL_UART_IRQHandler+0x134>
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	04db      	lsls	r3, r3, #19
 8002526:	4013      	ands	r3, r2
 8002528:	d00a      	beq.n	8002540 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002538:	2220      	movs	r2, #32
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d100      	bne.n	800254a <HAL_UART_IRQHandler+0x13e>
 8002548:	e092      	b.n	8002670 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	2220      	movs	r2, #32
 800254e:	4013      	ands	r3, r2
 8002550:	d00c      	beq.n	800256c <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2220      	movs	r2, #32
 8002556:	4013      	ands	r3, r2
 8002558:	d008      	beq.n	800256c <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	0010      	movs	r0, r2
 800256a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002570:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2240      	movs	r2, #64	; 0x40
 800257a:	4013      	ands	r3, r2
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	d003      	beq.n	8002588 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2228      	movs	r2, #40	; 0x28
 8002584:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002586:	d033      	beq.n	80025f0 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	0018      	movs	r0, r3
 800258c:	f000 fbce 	bl	8002d2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	4013      	ands	r3, r2
 800259a:	2b40      	cmp	r3, #64	; 0x40
 800259c:	d123      	bne.n	80025e6 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2140      	movs	r1, #64	; 0x40
 80025aa:	438a      	bics	r2, r1
 80025ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d012      	beq.n	80025dc <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ba:	4a31      	ldr	r2, [pc, #196]	; (8002680 <HAL_UART_IRQHandler+0x274>)
 80025bc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c2:	0018      	movs	r0, r3
 80025c4:	f7fe fcce 	bl	8000f64 <HAL_DMA_Abort_IT>
 80025c8:	1e03      	subs	r3, r0, #0
 80025ca:	d019      	beq.n	8002600 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d6:	0018      	movs	r0, r3
 80025d8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025da:	e011      	b.n	8002600 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 f858 	bl	8002694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e4:	e00c      	b.n	8002600 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 f853 	bl	8002694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ee:	e007      	b.n	8002600 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 f84e 	bl	8002694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80025fe:	e037      	b.n	8002670 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002600:	46c0      	nop			; (mov r8, r8)
    return;
 8002602:	e035      	b.n	8002670 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	035b      	lsls	r3, r3, #13
 800260a:	4013      	ands	r3, r2
 800260c:	d00e      	beq.n	800262c <HAL_UART_IRQHandler+0x220>
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	03db      	lsls	r3, r3, #15
 8002614:	4013      	ands	r3, r2
 8002616:	d009      	beq.n	800262c <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2280      	movs	r2, #128	; 0x80
 800261e:	0352      	lsls	r2, r2, #13
 8002620:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	0018      	movs	r0, r3
 8002626:	f000 fc8f 	bl	8002f48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800262a:	e024      	b.n	8002676 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	4013      	ands	r3, r2
 8002632:	d00d      	beq.n	8002650 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2280      	movs	r2, #128	; 0x80
 8002638:	4013      	ands	r3, r2
 800263a:	d009      	beq.n	8002650 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002640:	2b00      	cmp	r3, #0
 8002642:	d017      	beq.n	8002674 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	0010      	movs	r0, r2
 800264c:	4798      	blx	r3
    }
    return;
 800264e:	e011      	b.n	8002674 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2240      	movs	r2, #64	; 0x40
 8002654:	4013      	ands	r3, r2
 8002656:	d00e      	beq.n	8002676 <HAL_UART_IRQHandler+0x26a>
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2240      	movs	r2, #64	; 0x40
 800265c:	4013      	ands	r3, r2
 800265e:	d00a      	beq.n	8002676 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	0018      	movs	r0, r3
 8002664:	f000 fb99 	bl	8002d9a <UART_EndTransmit_IT>
    return;
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	e004      	b.n	8002676 <HAL_UART_IRQHandler+0x26a>
      return;
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	e002      	b.n	8002676 <HAL_UART_IRQHandler+0x26a>
    return;
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	e000      	b.n	8002676 <HAL_UART_IRQHandler+0x26a>
    return;
 8002674:	46c0      	nop			; (mov r8, r8)
  }

}
 8002676:	46bd      	mov	sp, r7
 8002678:	b008      	add	sp, #32
 800267a:	bd80      	pop	{r7, pc}
 800267c:	0000080f 	.word	0x0000080f
 8002680:	08002d6d 	.word	0x08002d6d

08002684 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b002      	add	sp, #8
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80026b0:	2317      	movs	r3, #23
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4ac5      	ldr	r2, [pc, #788]	; (80029ec <UART_SetConfig+0x348>)
 80026d8:	4013      	ands	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4ac0      	ldr	r2, [pc, #768]	; (80029f0 <UART_SetConfig+0x34c>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4ab7      	ldr	r2, [pc, #732]	; (80029f4 <UART_SetConfig+0x350>)
 8002716:	4013      	ands	r3, r2
 8002718:	0019      	movs	r1, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	430a      	orrs	r2, r1
 8002722:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4ab3      	ldr	r2, [pc, #716]	; (80029f8 <UART_SetConfig+0x354>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d125      	bne.n	800277a <UART_SetConfig+0xd6>
 800272e:	4bb3      	ldr	r3, [pc, #716]	; (80029fc <UART_SetConfig+0x358>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	2203      	movs	r2, #3
 8002734:	4013      	ands	r3, r2
 8002736:	2b01      	cmp	r3, #1
 8002738:	d00f      	beq.n	800275a <UART_SetConfig+0xb6>
 800273a:	d304      	bcc.n	8002746 <UART_SetConfig+0xa2>
 800273c:	2b02      	cmp	r3, #2
 800273e:	d011      	beq.n	8002764 <UART_SetConfig+0xc0>
 8002740:	2b03      	cmp	r3, #3
 8002742:	d005      	beq.n	8002750 <UART_SetConfig+0xac>
 8002744:	e013      	b.n	800276e <UART_SetConfig+0xca>
 8002746:	231f      	movs	r3, #31
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e064      	b.n	800281a <UART_SetConfig+0x176>
 8002750:	231f      	movs	r3, #31
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e05f      	b.n	800281a <UART_SetConfig+0x176>
 800275a:	231f      	movs	r3, #31
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	2204      	movs	r2, #4
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	e05a      	b.n	800281a <UART_SetConfig+0x176>
 8002764:	231f      	movs	r3, #31
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	2208      	movs	r2, #8
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	e055      	b.n	800281a <UART_SetConfig+0x176>
 800276e:	231f      	movs	r3, #31
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	2210      	movs	r2, #16
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	e04f      	b.n	800281a <UART_SetConfig+0x176>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4aa0      	ldr	r2, [pc, #640]	; (8002a00 <UART_SetConfig+0x35c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d132      	bne.n	80027ea <UART_SetConfig+0x146>
 8002784:	4b9d      	ldr	r3, [pc, #628]	; (80029fc <UART_SetConfig+0x358>)
 8002786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002788:	23c0      	movs	r3, #192	; 0xc0
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	4013      	ands	r3, r2
 800278e:	2280      	movs	r2, #128	; 0x80
 8002790:	0252      	lsls	r2, r2, #9
 8002792:	4293      	cmp	r3, r2
 8002794:	d019      	beq.n	80027ca <UART_SetConfig+0x126>
 8002796:	2280      	movs	r2, #128	; 0x80
 8002798:	0252      	lsls	r2, r2, #9
 800279a:	4293      	cmp	r3, r2
 800279c:	d802      	bhi.n	80027a4 <UART_SetConfig+0x100>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <UART_SetConfig+0x112>
 80027a2:	e01c      	b.n	80027de <UART_SetConfig+0x13a>
 80027a4:	2280      	movs	r2, #128	; 0x80
 80027a6:	0292      	lsls	r2, r2, #10
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d013      	beq.n	80027d4 <UART_SetConfig+0x130>
 80027ac:	22c0      	movs	r2, #192	; 0xc0
 80027ae:	0292      	lsls	r2, r2, #10
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d005      	beq.n	80027c0 <UART_SetConfig+0x11c>
 80027b4:	e013      	b.n	80027de <UART_SetConfig+0x13a>
 80027b6:	231f      	movs	r3, #31
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	e02c      	b.n	800281a <UART_SetConfig+0x176>
 80027c0:	231f      	movs	r3, #31
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	2202      	movs	r2, #2
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	e027      	b.n	800281a <UART_SetConfig+0x176>
 80027ca:	231f      	movs	r3, #31
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	2204      	movs	r2, #4
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	e022      	b.n	800281a <UART_SetConfig+0x176>
 80027d4:	231f      	movs	r3, #31
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2208      	movs	r2, #8
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	e01d      	b.n	800281a <UART_SetConfig+0x176>
 80027de:	231f      	movs	r3, #31
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	2210      	movs	r2, #16
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	e017      	b.n	800281a <UART_SetConfig+0x176>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a85      	ldr	r2, [pc, #532]	; (8002a04 <UART_SetConfig+0x360>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d104      	bne.n	80027fe <UART_SetConfig+0x15a>
 80027f4:	231f      	movs	r3, #31
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e00d      	b.n	800281a <UART_SetConfig+0x176>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a81      	ldr	r2, [pc, #516]	; (8002a08 <UART_SetConfig+0x364>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d104      	bne.n	8002812 <UART_SetConfig+0x16e>
 8002808:	231f      	movs	r3, #31
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	e003      	b.n	800281a <UART_SetConfig+0x176>
 8002812:	231f      	movs	r3, #31
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	2210      	movs	r2, #16
 8002818:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	429a      	cmp	r2, r3
 8002824:	d000      	beq.n	8002828 <UART_SetConfig+0x184>
 8002826:	e07d      	b.n	8002924 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8002828:	231f      	movs	r3, #31
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d01c      	beq.n	800286c <UART_SetConfig+0x1c8>
 8002832:	dc02      	bgt.n	800283a <UART_SetConfig+0x196>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <UART_SetConfig+0x1a0>
 8002838:	e04b      	b.n	80028d2 <UART_SetConfig+0x22e>
 800283a:	2b04      	cmp	r3, #4
 800283c:	d025      	beq.n	800288a <UART_SetConfig+0x1e6>
 800283e:	2b08      	cmp	r3, #8
 8002840:	d037      	beq.n	80028b2 <UART_SetConfig+0x20e>
 8002842:	e046      	b.n	80028d2 <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002844:	f7ff fb80 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8002848:	0003      	movs	r3, r0
 800284a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	005a      	lsls	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	18d2      	adds	r2, r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	0019      	movs	r1, r3
 800285e:	0010      	movs	r0, r2
 8002860:	f7fd fc52 	bl	8000108 <__udivsi3>
 8002864:	0003      	movs	r3, r0
 8002866:	b29b      	uxth	r3, r3
 8002868:	61bb      	str	r3, [r7, #24]
        break;
 800286a:	e037      	b.n	80028dc <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	085b      	lsrs	r3, r3, #1
 8002872:	4a66      	ldr	r2, [pc, #408]	; (8002a0c <UART_SetConfig+0x368>)
 8002874:	189a      	adds	r2, r3, r2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	0019      	movs	r1, r3
 800287c:	0010      	movs	r0, r2
 800287e:	f7fd fc43 	bl	8000108 <__udivsi3>
 8002882:	0003      	movs	r3, r0
 8002884:	b29b      	uxth	r3, r3
 8002886:	61bb      	str	r3, [r7, #24]
        break;
 8002888:	e028      	b.n	80028dc <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800288a:	f7ff fad5 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 800288e:	0003      	movs	r3, r0
 8002890:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	005a      	lsls	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	18d2      	adds	r2, r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0019      	movs	r1, r3
 80028a4:	0010      	movs	r0, r2
 80028a6:	f7fd fc2f 	bl	8000108 <__udivsi3>
 80028aa:	0003      	movs	r3, r0
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	61bb      	str	r3, [r7, #24]
        break;
 80028b0:	e014      	b.n	80028dc <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	085b      	lsrs	r3, r3, #1
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	0252      	lsls	r2, r2, #9
 80028bc:	189a      	adds	r2, r3, r2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0019      	movs	r1, r3
 80028c4:	0010      	movs	r0, r2
 80028c6:	f7fd fc1f 	bl	8000108 <__udivsi3>
 80028ca:	0003      	movs	r3, r0
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	61bb      	str	r3, [r7, #24]
        break;
 80028d0:	e004      	b.n	80028dc <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 80028d2:	2317      	movs	r3, #23
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
        break;
 80028da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2b0f      	cmp	r3, #15
 80028e0:	d91b      	bls.n	800291a <UART_SetConfig+0x276>
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4a4a      	ldr	r2, [pc, #296]	; (8002a10 <UART_SetConfig+0x36c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d817      	bhi.n	800291a <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	200a      	movs	r0, #10
 80028f0:	183b      	adds	r3, r7, r0
 80028f2:	210f      	movs	r1, #15
 80028f4:	438a      	bics	r2, r1
 80028f6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2207      	movs	r2, #7
 8002900:	4013      	ands	r3, r2
 8002902:	b299      	uxth	r1, r3
 8002904:	183b      	adds	r3, r7, r0
 8002906:	183a      	adds	r2, r7, r0
 8002908:	8812      	ldrh	r2, [r2, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	183a      	adds	r2, r7, r0
 8002914:	8812      	ldrh	r2, [r2, #0]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	e082      	b.n	8002a20 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 800291a:	2317      	movs	r3, #23
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e07d      	b.n	8002a20 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8002924:	231f      	movs	r3, #31
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d01b      	beq.n	8002966 <UART_SetConfig+0x2c2>
 800292e:	dc02      	bgt.n	8002936 <UART_SetConfig+0x292>
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <UART_SetConfig+0x29c>
 8002934:	e049      	b.n	80029ca <UART_SetConfig+0x326>
 8002936:	2b04      	cmp	r3, #4
 8002938:	d024      	beq.n	8002984 <UART_SetConfig+0x2e0>
 800293a:	2b08      	cmp	r3, #8
 800293c:	d035      	beq.n	80029aa <UART_SetConfig+0x306>
 800293e:	e044      	b.n	80029ca <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002940:	f7ff fb02 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8002944:	0003      	movs	r3, r0
 8002946:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	085a      	lsrs	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	18d2      	adds	r2, r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0019      	movs	r1, r3
 8002958:	0010      	movs	r0, r2
 800295a:	f7fd fbd5 	bl	8000108 <__udivsi3>
 800295e:	0003      	movs	r3, r0
 8002960:	b29b      	uxth	r3, r3
 8002962:	61bb      	str	r3, [r7, #24]
        break;
 8002964:	e036      	b.n	80029d4 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	4a29      	ldr	r2, [pc, #164]	; (8002a14 <UART_SetConfig+0x370>)
 800296e:	189a      	adds	r2, r3, r2
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	0019      	movs	r1, r3
 8002976:	0010      	movs	r0, r2
 8002978:	f7fd fbc6 	bl	8000108 <__udivsi3>
 800297c:	0003      	movs	r3, r0
 800297e:	b29b      	uxth	r3, r3
 8002980:	61bb      	str	r3, [r7, #24]
        break;
 8002982:	e027      	b.n	80029d4 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002984:	f7ff fa58 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8002988:	0003      	movs	r3, r0
 800298a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	085a      	lsrs	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	18d2      	adds	r2, r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	0019      	movs	r1, r3
 800299c:	0010      	movs	r0, r2
 800299e:	f7fd fbb3 	bl	8000108 <__udivsi3>
 80029a2:	0003      	movs	r3, r0
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	61bb      	str	r3, [r7, #24]
        break;
 80029a8:	e014      	b.n	80029d4 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	0212      	lsls	r2, r2, #8
 80029b4:	189a      	adds	r2, r3, r2
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	0019      	movs	r1, r3
 80029bc:	0010      	movs	r0, r2
 80029be:	f7fd fba3 	bl	8000108 <__udivsi3>
 80029c2:	0003      	movs	r3, r0
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	61bb      	str	r3, [r7, #24]
        break;
 80029c8:	e004      	b.n	80029d4 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 80029ca:	2317      	movs	r3, #23
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
        break;
 80029d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	d91e      	bls.n	8002a18 <UART_SetConfig+0x374>
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <UART_SetConfig+0x36c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d81a      	bhi.n	8002a18 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	e019      	b.n	8002a20 <UART_SetConfig+0x37c>
 80029ec:	efff69f3 	.word	0xefff69f3
 80029f0:	ffffcfff 	.word	0xffffcfff
 80029f4:	fffff4ff 	.word	0xfffff4ff
 80029f8:	40013800 	.word	0x40013800
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40004400 	.word	0x40004400
 8002a04:	40004800 	.word	0x40004800
 8002a08:	40004c00 	.word	0x40004c00
 8002a0c:	00f42400 	.word	0x00f42400
 8002a10:	0000ffff 	.word	0x0000ffff
 8002a14:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8002a18:	2317      	movs	r3, #23
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002a2c:	2317      	movs	r3, #23
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	781b      	ldrb	r3, [r3, #0]
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b008      	add	sp, #32
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)

08002a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <UART_AdvFeatureConfig+0x144>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4a43      	ldr	r2, [pc, #268]	; (8002b84 <UART_AdvFeatureConfig+0x148>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d00b      	beq.n	8002aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a3b      	ldr	r2, [pc, #236]	; (8002b88 <UART_AdvFeatureConfig+0x14c>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	2208      	movs	r2, #8
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4a34      	ldr	r2, [pc, #208]	; (8002b8c <UART_AdvFeatureConfig+0x150>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	0019      	movs	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a2c      	ldr	r2, [pc, #176]	; (8002b90 <UART_AdvFeatureConfig+0x154>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2220      	movs	r2, #32
 8002af4:	4013      	ands	r3, r2
 8002af6:	d00b      	beq.n	8002b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <UART_AdvFeatureConfig+0x158>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	0019      	movs	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	2240      	movs	r2, #64	; 0x40
 8002b16:	4013      	ands	r3, r2
 8002b18:	d01d      	beq.n	8002b56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <UART_AdvFeatureConfig+0x15c>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	035b      	lsls	r3, r3, #13
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d10b      	bne.n	8002b56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <UART_AdvFeatureConfig+0x160>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d00b      	beq.n	8002b78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <UART_AdvFeatureConfig+0x164>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
  }
}
 8002b78:	46c0      	nop			; (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b002      	add	sp, #8
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	fffdffff 	.word	0xfffdffff
 8002b84:	fffeffff 	.word	0xfffeffff
 8002b88:	fffbffff 	.word	0xfffbffff
 8002b8c:	ffff7fff 	.word	0xffff7fff
 8002b90:	ffffefff 	.word	0xffffefff
 8002b94:	ffffdfff 	.word	0xffffdfff
 8002b98:	ffefffff 	.word	0xffefffff
 8002b9c:	ff9fffff 	.word	0xff9fffff
 8002ba0:	fff7ffff 	.word	0xfff7ffff

08002ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002bb2:	f7fe f8ef 	bl	8000d94 <HAL_GetTick>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d10d      	bne.n	8002be4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	0399      	lsls	r1, r3, #14
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <UART_CheckIdleState+0x88>)
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f000 f82a 	bl	8002c30 <UART_WaitOnFlagUntilTimeout>
 8002bdc:	1e03      	subs	r3, r0, #0
 8002bde:	d001      	beq.n	8002be4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e01f      	b.n	8002c24 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2204      	movs	r2, #4
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d10d      	bne.n	8002c0e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	03d9      	lsls	r1, r3, #15
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <UART_CheckIdleState+0x88>)
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	0013      	movs	r3, r2
 8002c00:	2200      	movs	r2, #0
 8002c02:	f000 f815 	bl	8002c30 <UART_WaitOnFlagUntilTimeout>
 8002c06:	1e03      	subs	r3, r0, #0
 8002c08:	d001      	beq.n	8002c0e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e00a      	b.n	8002c24 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2270      	movs	r2, #112	; 0x70
 8002c1e:	2100      	movs	r1, #0
 8002c20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	01ffffff 	.word	0x01ffffff

08002c30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	1dfb      	adds	r3, r7, #7
 8002c3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c40:	e05d      	b.n	8002cfe <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	3301      	adds	r3, #1
 8002c46:	d05a      	beq.n	8002cfe <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c48:	f7fe f8a4 	bl	8000d94 <HAL_GetTick>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d302      	bcc.n	8002c5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11b      	bne.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	492f      	ldr	r1, [pc, #188]	; (8002d28 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2101      	movs	r1, #1
 8002c7a:	438a      	bics	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2270      	movs	r2, #112	; 0x70
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e043      	b.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d02d      	beq.n	8002cfe <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	401a      	ands	r2, r3
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d123      	bne.n	8002cfe <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4917      	ldr	r1, [pc, #92]	; (8002d28 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002ccc:	400a      	ands	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2101      	movs	r1, #1
 8002cdc:	438a      	bics	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2270      	movs	r2, #112	; 0x70
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e00f      	b.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	4013      	ands	r3, r2
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	425a      	negs	r2, r3
 8002d0e:	4153      	adcs	r3, r2
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	001a      	movs	r2, r3
 8002d14:	1dfb      	adds	r3, r7, #7
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d092      	beq.n	8002c42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b004      	add	sp, #16
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	fffffe5f 	.word	0xfffffe5f

08002d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	490a      	ldr	r1, [pc, #40]	; (8002d68 <UART_EndRxTransfer+0x3c>)
 8002d40:	400a      	ands	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2101      	movs	r1, #1
 8002d50:	438a      	bics	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	fffffedf 	.word	0xfffffedf

08002d6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	225a      	movs	r2, #90	; 0x5a
 8002d7e:	2100      	movs	r1, #0
 8002d80:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2252      	movs	r2, #82	; 0x52
 8002d86:	2100      	movs	r1, #0
 8002d88:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f7ff fc81 	bl	8002694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b004      	add	sp, #16
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	438a      	bics	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f7ff fc5f 	bl	8002684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b002      	add	sp, #8
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002dd8:	230e      	movs	r3, #14
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	215c      	movs	r1, #92	; 0x5c
 8002de0:	5a52      	ldrh	r2, [r2, r1]
 8002de2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de8:	2b22      	cmp	r3, #34	; 0x22
 8002dea:	d140      	bne.n	8002e6e <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	210c      	movs	r1, #12
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002df6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	230e      	movs	r3, #14
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b2d9      	uxtb	r1, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	225a      	movs	r2, #90	; 0x5a
 8002e1e:	5a9b      	ldrh	r3, [r3, r2]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b299      	uxth	r1, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	225a      	movs	r2, #90	; 0x5a
 8002e2a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	225a      	movs	r2, #90	; 0x5a
 8002e30:	5a9b      	ldrh	r3, [r3, r2]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d122      	bne.n	8002e7e <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4911      	ldr	r1, [pc, #68]	; (8002e88 <UART_RxISR_8BIT+0xb8>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2101      	movs	r1, #1
 8002e54:	438a      	bics	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	0018      	movs	r0, r3
 8002e68:	f7fd fce4 	bl	8000834 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002e6c:	e007      	b.n	8002e7e <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2108      	movs	r1, #8
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	619a      	str	r2, [r3, #24]
}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b004      	add	sp, #16
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	fffffedf 	.word	0xfffffedf

08002e8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002e94:	230e      	movs	r3, #14
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	215c      	movs	r1, #92	; 0x5c
 8002e9c:	5a52      	ldrh	r2, [r2, r1]
 8002e9e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea4:	2b22      	cmp	r3, #34	; 0x22
 8002ea6:	d140      	bne.n	8002f2a <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	210c      	movs	r1, #12
 8002eae:	187b      	adds	r3, r7, r1
 8002eb0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002eb2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8002eba:	187b      	adds	r3, r7, r1
 8002ebc:	220e      	movs	r2, #14
 8002ebe:	18ba      	adds	r2, r7, r2
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	8812      	ldrh	r2, [r2, #0]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	1c9a      	adds	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	225a      	movs	r2, #90	; 0x5a
 8002eda:	5a9b      	ldrh	r3, [r3, r2]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b299      	uxth	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	225a      	movs	r2, #90	; 0x5a
 8002ee6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	225a      	movs	r2, #90	; 0x5a
 8002eec:	5a9b      	ldrh	r3, [r3, r2]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d122      	bne.n	8002f3a <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4911      	ldr	r1, [pc, #68]	; (8002f44 <UART_RxISR_16BIT+0xb8>)
 8002f00:	400a      	ands	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2101      	movs	r1, #1
 8002f10:	438a      	bics	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7fd fc86 	bl	8000834 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002f28:	e007      	b.n	8002f3a <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2108      	movs	r1, #8
 8002f36:	430a      	orrs	r2, r1
 8002f38:	619a      	str	r2, [r3, #24]
}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b004      	add	sp, #16
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	fffffedf 	.word	0xfffffedf

08002f48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <__libc_init_array>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	2600      	movs	r6, #0
 8002f5c:	4d0c      	ldr	r5, [pc, #48]	; (8002f90 <__libc_init_array+0x38>)
 8002f5e:	4c0d      	ldr	r4, [pc, #52]	; (8002f94 <__libc_init_array+0x3c>)
 8002f60:	1b64      	subs	r4, r4, r5
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	42a6      	cmp	r6, r4
 8002f66:	d109      	bne.n	8002f7c <__libc_init_array+0x24>
 8002f68:	2600      	movs	r6, #0
 8002f6a:	f000 f821 	bl	8002fb0 <_init>
 8002f6e:	4d0a      	ldr	r5, [pc, #40]	; (8002f98 <__libc_init_array+0x40>)
 8002f70:	4c0a      	ldr	r4, [pc, #40]	; (8002f9c <__libc_init_array+0x44>)
 8002f72:	1b64      	subs	r4, r4, r5
 8002f74:	10a4      	asrs	r4, r4, #2
 8002f76:	42a6      	cmp	r6, r4
 8002f78:	d105      	bne.n	8002f86 <__libc_init_array+0x2e>
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	00b3      	lsls	r3, r6, #2
 8002f7e:	58eb      	ldr	r3, [r5, r3]
 8002f80:	4798      	blx	r3
 8002f82:	3601      	adds	r6, #1
 8002f84:	e7ee      	b.n	8002f64 <__libc_init_array+0xc>
 8002f86:	00b3      	lsls	r3, r6, #2
 8002f88:	58eb      	ldr	r3, [r5, r3]
 8002f8a:	4798      	blx	r3
 8002f8c:	3601      	adds	r6, #1
 8002f8e:	e7f2      	b.n	8002f76 <__libc_init_array+0x1e>
 8002f90:	08003000 	.word	0x08003000
 8002f94:	08003000 	.word	0x08003000
 8002f98:	08003000 	.word	0x08003000
 8002f9c:	08003008 	.word	0x08003008

08002fa0 <memset>:
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	1812      	adds	r2, r2, r0
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d100      	bne.n	8002faa <memset+0xa>
 8002fa8:	4770      	bx	lr
 8002faa:	7019      	strb	r1, [r3, #0]
 8002fac:	3301      	adds	r3, #1
 8002fae:	e7f9      	b.n	8002fa4 <memset+0x4>

08002fb0 <_init>:
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb6:	bc08      	pop	{r3}
 8002fb8:	469e      	mov	lr, r3
 8002fba:	4770      	bx	lr

08002fbc <_fini>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc2:	bc08      	pop	{r3}
 8002fc4:	469e      	mov	lr, r3
 8002fc6:	4770      	bx	lr
