
MIDIlib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004668  08004668  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004668  08004668  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004668  08004668  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000000c  08004684  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08004684  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f462  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022e4  00000000  00000000  0002f496  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  00031780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  00032638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017323  00000000  00000000  000333d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b57e  00000000  00000000  0004a6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c6bc  00000000  00000000  00055c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2335  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003504  00000000  00000000  000d23b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004194 	.word	0x08004194

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004194 	.word	0x08004194

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_ZN8mMessage12getSysExSizeEv>:
	Channel channel = 0;
	uint8_t data1 = 0;
	uint8_t data2 = 0;

	uint8_t SysExMaxSize;
	 unsigned getSysExSize()  {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
		 unsigned size = unsigned(data2) << 8 | data1;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	791b      	ldrb	r3, [r3, #4]
 800022c:	021b      	lsls	r3, r3, #8
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	78d2      	ldrb	r2, [r2, #3]
 8000232:	4313      	orrs	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
		return size > SysExMaxSize ? SysExMaxSize : size;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	795b      	ldrb	r3, [r3, #5]
 800023a:	001a      	movs	r2, r3
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	4293      	cmp	r3, r2
 8000240:	d900      	bls.n	8000244 <_ZN8mMessage12getSysExSizeEv+0x24>
 8000242:	0013      	movs	r3, r2
	}
 8000244:	0018      	movs	r0, r3
 8000246:	46bd      	mov	sp, r7
 8000248:	b004      	add	sp, #16
 800024a:	bd80      	pop	{r7, pc}

0800024c <_ZN9mSettingsC1Ev>:
	uint8_t sysexArray[];
};

struct mSettings {
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2201      	movs	r2, #1
 800025e:	705a      	strb	r2, [r3, #1]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2201      	movs	r2, #1
 8000264:	709a      	strb	r2, [r3, #2]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	0018      	movs	r0, r3
 800026a:	46bd      	mov	sp, r7
 800026c:	b002      	add	sp, #8
 800026e:	bd80      	pop	{r7, pc}

08000270 <_ZN8mMessageC1Ev>:
struct mMessage {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2200      	movs	r2, #0
 8000282:	705a      	strb	r2, [r3, #1]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2200      	movs	r2, #0
 8000288:	709a      	strb	r2, [r3, #2]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	70da      	strb	r2, [r3, #3]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2200      	movs	r2, #0
 8000294:	711a      	strb	r2, [r3, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	0018      	movs	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	b002      	add	sp, #8
 800029e:	bd80      	pop	{r7, pc}

080002a0 <_ZN13MidiInterfaceC1Ev>:
 *
 */

#include "MIDI.h"
#include "stm32f0xx_hal.h"
MidiInterface::MidiInterface() {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3356      	adds	r3, #86	; 0x56
 80002ac:	33ff      	adds	r3, #255	; 0xff
 80002ae:	0018      	movs	r0, r3
 80002b0:	f7ff ffcc 	bl	800024c <_ZN9mSettingsC1Ev>
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3359      	adds	r3, #89	; 0x59
 80002b8:	33ff      	adds	r3, #255	; 0xff
 80002ba:	0018      	movs	r0, r3
 80002bc:	f7ff ffd8 	bl	8000270 <_ZN8mMessageC1Ev>
	mRunningStatus_TX = InvalidType;
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	23a5      	movs	r3, #165	; 0xa5
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	2100      	movs	r1, #0
 80002c8:	54d1      	strb	r1, [r2, r3]
	mRunningStatus_RX = InvalidType;
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	234a      	movs	r3, #74	; 0x4a
 80002ce:	33ff      	adds	r3, #255	; 0xff
 80002d0:	2100      	movs	r1, #0
 80002d2:	54d1      	strb	r1, [r2, r3]

	mPendingMessageIndex = 0;
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	2350      	movs	r3, #80	; 0x50
 80002d8:	33ff      	adds	r3, #255	; 0xff
 80002da:	2100      	movs	r1, #0
 80002dc:	54d1      	strb	r1, [r2, r3]
	mPendingMessageExpectedLenght = 0;
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	23a7      	movs	r3, #167	; 0xa7
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	2100      	movs	r1, #0
 80002e6:	54d1      	strb	r1, [r2, r3]

	mCurrentRpnNumber = 0xffff;
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	23a8      	movs	r3, #168	; 0xa8
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	2101      	movs	r1, #1
 80002f0:	4249      	negs	r1, r1
 80002f2:	52d1      	strh	r1, [r2, r3]
	mCurrentNrpnNumber = 0xffff;
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	23a9      	movs	r3, #169	; 0xa9
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	2101      	movs	r1, #1
 80002fc:	4249      	negs	r1, r1
 80002fe:	52d1      	strh	r1, [r2, r3]

	mMessage.valid = false;
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	23ac      	movs	r3, #172	; 0xac
 8000304:	005b      	lsls	r3, r3, #1
 8000306:	2100      	movs	r1, #0
 8000308:	54d1      	strb	r1, [r2, r3]
	mMessage.type = InvalidType;
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	235a      	movs	r3, #90	; 0x5a
 800030e:	33ff      	adds	r3, #255	; 0xff
 8000310:	2100      	movs	r1, #0
 8000312:	54d1      	strb	r1, [r2, r3]
	mMessage.channel = 0;
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	23ad      	movs	r3, #173	; 0xad
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	2100      	movs	r1, #0
 800031c:	54d1      	strb	r1, [r2, r3]
	mMessage.data1 = 0;
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	235c      	movs	r3, #92	; 0x5c
 8000322:	33ff      	adds	r3, #255	; 0xff
 8000324:	2100      	movs	r1, #0
 8000326:	54d1      	strb	r1, [r2, r3]
	mMessage.data2 = 0;
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	23ae      	movs	r3, #174	; 0xae
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	2100      	movs	r1, #0
 8000330:	54d1      	strb	r1, [r2, r3]
	mMessage.SysExMaxSize = Settings.SysExMaxSize;
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	235e      	movs	r3, #94	; 0x5e
 8000336:	33ff      	adds	r3, #255	; 0xff
 8000338:	2180      	movs	r1, #128	; 0x80
 800033a:	54d1      	strb	r1, [r2, r3]
	mThruFilterMode = Thru::Full;
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	23aa      	movs	r3, #170	; 0xaa
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	5cd1      	ldrb	r1, [r2, r3]
 8000344:	2001      	movs	r0, #1
 8000346:	4001      	ands	r1, r0
 8000348:	1c08      	adds	r0, r1, #0
 800034a:	2102      	movs	r1, #2
 800034c:	4301      	orrs	r1, r0
 800034e:	54d1      	strb	r1, [r2, r3]
	mThruActivated = true;
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	23aa      	movs	r3, #170	; 0xaa
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	5cd1      	ldrb	r1, [r2, r3]
 8000358:	2001      	movs	r0, #1
 800035a:	4301      	orrs	r1, r0
 800035c:	54d1      	strb	r1, [r2, r3]

	mInputChannel = 0;
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	23a4      	movs	r3, #164	; 0xa4
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	2100      	movs	r1, #0
 8000366:	54d1      	strb	r1, [r2, r3]
	mRunningStatus_RX = InvalidType;
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	234a      	movs	r3, #74	; 0x4a
 800036c:	33ff      	adds	r3, #255	; 0xff
 800036e:	2100      	movs	r1, #0
 8000370:	54d1      	strb	r1, [r2, r3]
	mRunningStatus_TX = InvalidType;
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	23a5      	movs	r3, #165	; 0xa5
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	2100      	movs	r1, #0
 800037a:	54d1      	strb	r1, [r2, r3]
	mPendingMessageExpectedLenght = 0;
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	23a7      	movs	r3, #167	; 0xa7
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	2100      	movs	r1, #0
 8000384:	54d1      	strb	r1, [r2, r3]
	mPendingMessageIndex = 0;
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	2350      	movs	r3, #80	; 0x50
 800038a:	33ff      	adds	r3, #255	; 0xff
 800038c:	2100      	movs	r1, #0
 800038e:	54d1      	strb	r1, [r2, r3]
	mCurrentRpnNumber = 0xffff;
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	23a8      	movs	r3, #168	; 0xa8
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	2101      	movs	r1, #1
 8000398:	4249      	negs	r1, r1
 800039a:	52d1      	strh	r1, [r2, r3]
	mCurrentNrpnNumber = 0xffff;
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	23a9      	movs	r3, #169	; 0xa9
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	2101      	movs	r1, #1
 80003a4:	4249      	negs	r1, r1
 80003a6:	52d1      	strh	r1, [r2, r3]
	mThruActivated = false;
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	23aa      	movs	r3, #170	; 0xaa
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	5cd1      	ldrb	r1, [r2, r3]
 80003b0:	2001      	movs	r0, #1
 80003b2:	4381      	bics	r1, r0
 80003b4:	54d1      	strb	r1, [r2, r3]
	mThruFilterMode = Thru::Off;
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	23aa      	movs	r3, #170	; 0xaa
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	5cd1      	ldrb	r1, [r2, r3]
 80003be:	2001      	movs	r0, #1
 80003c0:	4001      	ands	r1, r0
 80003c2:	54d1      	strb	r1, [r2, r3]
	mNoteOffCallback = 0;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
	mNoteOnCallback = 0;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
	mAfterTouchPolyCallback = 0;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
	mControlChangeCallback = 0;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
	mProgramChangeCallback = 0;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
	mAfterTouchChannelCallback = 0;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2200      	movs	r2, #0
 80003e6:	615a      	str	r2, [r3, #20]
	mPitchBendCallback = 0;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2200      	movs	r2, #0
 80003ec:	619a      	str	r2, [r3, #24]
	mSystemExclusiveCallback = 0;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2200      	movs	r2, #0
 80003f2:	61da      	str	r2, [r3, #28]
	mTimeCodeQuarterFrameCallback = 0;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	621a      	str	r2, [r3, #32]
	mSongPositionCallback = 0;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	625a      	str	r2, [r3, #36]	; 0x24
	mSongSelectCallback = 0;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2200      	movs	r2, #0
 8000404:	629a      	str	r2, [r3, #40]	; 0x28
	mTuneRequestCallback = 0;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2200      	movs	r2, #0
 800040a:	62da      	str	r2, [r3, #44]	; 0x2c
	mClockCallback = 0;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2200      	movs	r2, #0
 8000410:	631a      	str	r2, [r3, #48]	; 0x30
	mStartCallback = 0;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2200      	movs	r2, #0
 8000416:	635a      	str	r2, [r3, #52]	; 0x34
	mContinueCallback = 0;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2200      	movs	r2, #0
 800041c:	639a      	str	r2, [r3, #56]	; 0x38
	mStopCallback = 0;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2200      	movs	r2, #0
 8000422:	63da      	str	r2, [r3, #60]	; 0x3c
	mActiveSensingCallback = 0;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2200      	movs	r2, #0
 8000428:	641a      	str	r2, [r3, #64]	; 0x40
	mSystemResetCallback = 0;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2200      	movs	r2, #0
 800042e:	645a      	str	r2, [r3, #68]	; 0x44

}
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	0018      	movs	r0, r3
 8000434:	46bd      	mov	sp, r7
 8000436:	b002      	add	sp, #8
 8000438:	bd80      	pop	{r7, pc}

0800043a <_ZN13MidiInterfaceD1Ev>:
MidiInterface::~MidiInterface() {
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
}
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	0018      	movs	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	b002      	add	sp, #8
 800044a:	bd80      	pop	{r7, pc}

0800044c <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>:
 - Input channel set to 1 if no value is specified

 */

void MidiInterface::begin(Channel inChannel, UART_HandleTypeDef *huart_in,
		UART_HandleTypeDef *huart_out) {
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	607a      	str	r2, [r7, #4]
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	240b      	movs	r4, #11
 800045a:	193b      	adds	r3, r7, r4
 800045c:	1c0a      	adds	r2, r1, #0
 800045e:	701a      	strb	r2, [r3, #0]
	serial_in = *huart_in;
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	22c8      	movs	r2, #200	; 0xc8
 8000464:	6879      	ldr	r1, [r7, #4]
 8000466:	189b      	adds	r3, r3, r2
 8000468:	2280      	movs	r2, #128	; 0x80
 800046a:	0018      	movs	r0, r3
 800046c:	f003 fe80 	bl	8004170 <memcpy>
	serial_out = *huart_out;
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	683a      	ldr	r2, [r7, #0]
 8000474:	3348      	adds	r3, #72	; 0x48
 8000476:	0011      	movs	r1, r2
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	0018      	movs	r0, r3
 800047c:	f003 fe78 	bl	8004170 <memcpy>
	mInputChannel = inChannel;
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	1939      	adds	r1, r7, r4
 8000484:	23a4      	movs	r3, #164	; 0xa4
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	7809      	ldrb	r1, [r1, #0]
 800048a:	54d1      	strb	r1, [r2, r3]

}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b005      	add	sp, #20
 8000492:	bd90      	pop	{r4, r7, pc}

08000494 <_ZN13MidiInterface4sendE8MidiTypehhh>:
 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */

void MidiInterface::send(MidiType inType, DataByte inData1, DataByte inData2,
		Channel inChannel) {
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	000c      	movs	r4, r1
 800049e:	0010      	movs	r0, r2
 80004a0:	0019      	movs	r1, r3
 80004a2:	1cfb      	adds	r3, r7, #3
 80004a4:	1c22      	adds	r2, r4, #0
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	1cbb      	adds	r3, r7, #2
 80004aa:	1c02      	adds	r2, r0, #0
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	1c7b      	adds	r3, r7, #1
 80004b0:	1c0a      	adds	r2, r1, #0
 80004b2:	701a      	strb	r2, [r3, #0]
	// Then test if channel is valid
	if (inChannel >= MIDI_CHANNEL_OFF || inChannel == MIDI_CHANNEL_OMNI
 80004b4:	2320      	movs	r3, #32
 80004b6:	18fb      	adds	r3, r7, r3
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b10      	cmp	r3, #16
 80004bc:	d900      	bls.n	80004c0 <_ZN13MidiInterface4sendE8MidiTypehhh+0x2c>
 80004be:	e07a      	b.n	80005b6 <_ZN13MidiInterface4sendE8MidiTypehhh+0x122>
 80004c0:	2320      	movs	r3, #32
 80004c2:	18fb      	adds	r3, r7, r3
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d100      	bne.n	80004cc <_ZN13MidiInterface4sendE8MidiTypehhh+0x38>
 80004ca:	e074      	b.n	80005b6 <_ZN13MidiInterface4sendE8MidiTypehhh+0x122>
			|| inType < 0x80) {
 80004cc:	1cfb      	adds	r3, r7, #3
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	b25b      	sxtb	r3, r3
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	da6f      	bge.n	80005b6 <_ZN13MidiInterface4sendE8MidiTypehhh+0x122>
		return; // Don't send anything
	}

	if (inType <= PitchBend)  // Channel messages
 80004d6:	1cfb      	adds	r3, r7, #3
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2be0      	cmp	r3, #224	; 0xe0
 80004dc:	d85f      	bhi.n	800059e <_ZN13MidiInterface4sendE8MidiTypehhh+0x10a>
			{
// Protection: remove MSBs on data
		inData1 &= 0x7f;
 80004de:	1cbb      	adds	r3, r7, #2
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	227f      	movs	r2, #127	; 0x7f
 80004e4:	4013      	ands	r3, r2
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	1cbb      	adds	r3, r7, #2
 80004ea:	701a      	strb	r2, [r3, #0]
		inData2 &= 0x7f;
 80004ec:	1c7b      	adds	r3, r7, #1
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	227f      	movs	r2, #127	; 0x7f
 80004f2:	4013      	ands	r3, r2
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	1c7b      	adds	r3, r7, #1
 80004f8:	701a      	strb	r2, [r3, #0]

		StatusByte status = getStatus(inType, inChannel);
 80004fa:	2320      	movs	r3, #32
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	1cfb      	adds	r3, r7, #3
 8000502:	7819      	ldrb	r1, [r3, #0]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	0018      	movs	r0, r3
 8000508:	f000 f982 	bl	8000810 <_ZN13MidiInterface9getStatusE8MidiTypeh>
 800050c:	0003      	movs	r3, r0
 800050e:	001a      	movs	r2, r3
 8000510:	230f      	movs	r3, #15
 8000512:	18fb      	adds	r3, r7, r3
 8000514:	701a      	strb	r2, [r3, #0]

		if (Settings.UseRunningStatus) {
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	2356      	movs	r3, #86	; 0x56
 800051a:	33ff      	adds	r3, #255	; 0xff
 800051c:	5cd3      	ldrb	r3, [r2, r3]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d01b      	beq.n	800055a <_ZN13MidiInterface4sendE8MidiTypehhh+0xc6>
			if (mRunningStatus_TX != status) {
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	23a5      	movs	r3, #165	; 0xa5
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	5cd2      	ldrb	r2, [r2, r3]
 800052a:	230f      	movs	r3, #15
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	429a      	cmp	r2, r3
 8000532:	d01b      	beq.n	800056c <_ZN13MidiInterface4sendE8MidiTypehhh+0xd8>
// New message, memorise and send header
				mRunningStatus_TX = status;
 8000534:	230f      	movs	r3, #15
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	7819      	ldrb	r1, [r3, #0]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	23a5      	movs	r3, #165	; 0xa5
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&serial_out, &mRunningStatus_TX, 1,
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3348      	adds	r3, #72	; 0x48
 8000546:	0018      	movs	r0, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	334b      	adds	r3, #75	; 0x4b
 800054c:	33ff      	adds	r3, #255	; 0xff
 800054e:	0019      	movs	r1, r3
 8000550:	230a      	movs	r3, #10
 8000552:	2201      	movs	r2, #1
 8000554:	f002 ff6a 	bl	800342c <HAL_UART_Transmit>
 8000558:	e008      	b.n	800056c <_ZN13MidiInterface4sendE8MidiTypehhh+0xd8>
				MidiTimeout);
			}
		} else {
			// Don't care about running status, send the status byte.
			HAL_UART_Transmit(&serial_out, &status, 1, MidiTimeout);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3348      	adds	r3, #72	; 0x48
 800055e:	0018      	movs	r0, r3
 8000560:	230f      	movs	r3, #15
 8000562:	18f9      	adds	r1, r7, r3
 8000564:	230a      	movs	r3, #10
 8000566:	2201      	movs	r2, #1
 8000568:	f002 ff60 	bl	800342c <HAL_UART_Transmit>
		}

// Then send data
		HAL_UART_Transmit(&serial_out, &inData1, 1, MidiTimeout);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3348      	adds	r3, #72	; 0x48
 8000570:	0018      	movs	r0, r3
 8000572:	1cb9      	adds	r1, r7, #2
 8000574:	230a      	movs	r3, #10
 8000576:	2201      	movs	r2, #1
 8000578:	f002 ff58 	bl	800342c <HAL_UART_Transmit>
		if (inType != ProgramChange && inType != AfterTouchChannel) {
 800057c:	1cfb      	adds	r3, r7, #3
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2bc0      	cmp	r3, #192	; 0xc0
 8000582:	d019      	beq.n	80005b8 <_ZN13MidiInterface4sendE8MidiTypehhh+0x124>
 8000584:	1cfb      	adds	r3, r7, #3
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2bd0      	cmp	r3, #208	; 0xd0
 800058a:	d015      	beq.n	80005b8 <_ZN13MidiInterface4sendE8MidiTypehhh+0x124>
			HAL_UART_Transmit(&serial_out, &inData2, 1, MidiTimeout);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3348      	adds	r3, #72	; 0x48
 8000590:	0018      	movs	r0, r3
 8000592:	1c79      	adds	r1, r7, #1
 8000594:	230a      	movs	r3, #10
 8000596:	2201      	movs	r2, #1
 8000598:	f002 ff48 	bl	800342c <HAL_UART_Transmit>
 800059c:	e00c      	b.n	80005b8 <_ZN13MidiInterface4sendE8MidiTypehhh+0x124>
		}
	} else if (inType >= Clock && inType <= SystemReset) {
 800059e:	1cfb      	adds	r3, r7, #3
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2bf7      	cmp	r3, #247	; 0xf7
 80005a4:	d908      	bls.n	80005b8 <_ZN13MidiInterface4sendE8MidiTypehhh+0x124>
		sendRealTime(inType); // System Real-time and 1 byte.
 80005a6:	1cfb      	adds	r3, r7, #3
 80005a8:	781a      	ldrb	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 f90c 	bl	80007cc <_ZN13MidiInterface12sendRealTimeE8MidiType>
 80005b4:	e000      	b.n	80005b8 <_ZN13MidiInterface4sendE8MidiTypehhh+0x124>
		return; // Don't send anything
 80005b6:	46c0      	nop			; (mov r8, r8)
	}
}
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b005      	add	sp, #20
 80005bc:	bd90      	pop	{r4, r7, pc}

080005be <_ZN13MidiInterface9sendSysExEhPhb>:
 default value for ArrayContainsBoundaries is set to 'false' for compatibility
 with previous versions of the library.
 */

void MidiInterface::sendSysEx(uint8_t inLength, byte *inArray,
		bool inArrayContainsBoundaries) {
 80005be:	b590      	push	{r4, r7, lr}
 80005c0:	b087      	sub	sp, #28
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	60f8      	str	r0, [r7, #12]
 80005c6:	0008      	movs	r0, r1
 80005c8:	607a      	str	r2, [r7, #4]
 80005ca:	0019      	movs	r1, r3
 80005cc:	230b      	movs	r3, #11
 80005ce:	18fb      	adds	r3, r7, r3
 80005d0:	1c02      	adds	r2, r0, #0
 80005d2:	701a      	strb	r2, [r3, #0]
 80005d4:	200a      	movs	r0, #10
 80005d6:	183b      	adds	r3, r7, r0
 80005d8:	1c0a      	adds	r2, r1, #0
 80005da:	701a      	strb	r2, [r3, #0]
	bool writeBeginEndBytes = !inArrayContainsBoundaries;
 80005dc:	2417      	movs	r4, #23
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	183a      	adds	r2, r7, r0
 80005e2:	7812      	ldrb	r2, [r2, #0]
 80005e4:	2101      	movs	r1, #1
 80005e6:	404a      	eors	r2, r1
 80005e8:	701a      	strb	r2, [r3, #0]
	uint8_t StartByte = 0xf0;
 80005ea:	2316      	movs	r3, #22
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	22f0      	movs	r2, #240	; 0xf0
 80005f0:	701a      	strb	r2, [r3, #0]
	uint8_t EndByte = 0xf7;
 80005f2:	2315      	movs	r3, #21
 80005f4:	18fb      	adds	r3, r7, r3
 80005f6:	22f7      	movs	r2, #247	; 0xf7
 80005f8:	701a      	strb	r2, [r3, #0]
	if (writeBeginEndBytes) {
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d008      	beq.n	8000614 <_ZN13MidiInterface9sendSysExEhPhb+0x56>
		HAL_UART_Transmit(&serial_out, &StartByte, 1, MidiTimeout);
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	3348      	adds	r3, #72	; 0x48
 8000606:	0018      	movs	r0, r3
 8000608:	2316      	movs	r3, #22
 800060a:	18f9      	adds	r1, r7, r3
 800060c:	230a      	movs	r3, #10
 800060e:	2201      	movs	r2, #1
 8000610:	f002 ff0c 	bl	800342c <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&serial_out, inArray, sizeof(inLength), MidiTimeout);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3348      	adds	r3, #72	; 0x48
 8000618:	0018      	movs	r0, r3
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	230a      	movs	r3, #10
 800061e:	2201      	movs	r2, #1
 8000620:	f002 ff04 	bl	800342c <HAL_UART_Transmit>

	if (writeBeginEndBytes) {
 8000624:	2317      	movs	r3, #23
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d008      	beq.n	8000640 <_ZN13MidiInterface9sendSysExEhPhb+0x82>
		HAL_UART_Transmit(&serial_out, &EndByte, 1, MidiTimeout);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3348      	adds	r3, #72	; 0x48
 8000632:	0018      	movs	r0, r3
 8000634:	2315      	movs	r3, #21
 8000636:	18f9      	adds	r1, r7, r3
 8000638:	230a      	movs	r3, #10
 800063a:	2201      	movs	r2, #1
 800063c:	f002 fef6 	bl	800342c <HAL_UART_Transmit>
	}

	if (Settings.UseRunningStatus) {
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	2356      	movs	r3, #86	; 0x56
 8000644:	33ff      	adds	r3, #255	; 0xff
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d004      	beq.n	8000656 <_ZN13MidiInterface9sendSysExEhPhb+0x98>
		mRunningStatus_TX = InvalidType;
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	23a5      	movs	r3, #165	; 0xa5
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	2100      	movs	r1, #0
 8000654:	54d1      	strb	r1, [r2, r3]
	}
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b007      	add	sp, #28
 800065c:	bd90      	pop	{r4, r7, pc}

0800065e <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>:
 \param inValuesNibble    MTC data
 See MIDI Specification for more information.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inTypeNibble,
		DataByte inValuesNibble) {
 800065e:	b580      	push	{r7, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	0008      	movs	r0, r1
 8000668:	0011      	movs	r1, r2
 800066a:	1cfb      	adds	r3, r7, #3
 800066c:	1c02      	adds	r2, r0, #0
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	1cbb      	adds	r3, r7, #2
 8000672:	1c0a      	adds	r2, r1, #0
 8000674:	701a      	strb	r2, [r3, #0]
	byte data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
 8000676:	1cfb      	adds	r3, r7, #3
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	011b      	lsls	r3, r3, #4
 800067c:	b25b      	sxtb	r3, r3
 800067e:	2270      	movs	r2, #112	; 0x70
 8000680:	4013      	ands	r3, r2
 8000682:	b25a      	sxtb	r2, r3
 8000684:	1cbb      	adds	r3, r7, #2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b25b      	sxtb	r3, r3
 800068a:	210f      	movs	r1, #15
 800068c:	400b      	ands	r3, r1
 800068e:	b25b      	sxtb	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b25a      	sxtb	r2, r3
 8000694:	210f      	movs	r1, #15
 8000696:	187b      	adds	r3, r7, r1
 8000698:	701a      	strb	r2, [r3, #0]
	sendTimeCodeQuarterFrame(data);
 800069a:	187b      	adds	r3, r7, r1
 800069c:	781a      	ldrb	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 f804 	bl	80006b0 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b004      	add	sp, #16
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh>:
 See MIDI Specification for more information.
 \param inData  if you want to encode directly the nibbles in your program,
 you can send the byte here.
 */

void MidiInterface::sendTimeCodeQuarterFrame(DataByte inData) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	000a      	movs	r2, r1
 80006ba:	1cfb      	adds	r3, r7, #3
 80006bc:	701a      	strb	r2, [r3, #0]
	uint8_t TimeCodeMessage[] = { TimeCodeQuarterFrame, inData };
 80006be:	210c      	movs	r1, #12
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	801a      	strh	r2, [r3, #0]
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	22f1      	movs	r2, #241	; 0xf1
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	1cfa      	adds	r2, r7, #3
 80006d0:	7812      	ldrb	r2, [r2, #0]
 80006d2:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(&serial_out, TimeCodeMessage, 2, MidiTimeout);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3348      	adds	r3, #72	; 0x48
 80006d8:	0018      	movs	r0, r3
 80006da:	1879      	adds	r1, r7, r1
 80006dc:	230a      	movs	r3, #10
 80006de:	2202      	movs	r2, #2
 80006e0:	f002 fea4 	bl	800342c <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	2356      	movs	r3, #86	; 0x56
 80006e8:	33ff      	adds	r3, #255	; 0xff
 80006ea:	5cd3      	ldrb	r3, [r2, r3]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d004      	beq.n	80006fa <_ZN13MidiInterface24sendTimeCodeQuarterFrameEh+0x4a>
		mRunningStatus_TX = InvalidType;
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	23a5      	movs	r3, #165	; 0xa5
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	2100      	movs	r1, #0
 80006f8:	54d1      	strb	r1, [r2, r3]
	}
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b004      	add	sp, #16
 8000700:	bd80      	pop	{r7, pc}

08000702 <_ZN13MidiInterface16sendSongPositionEj>:

/*! \brief Send a Song Position Pointer message.
 \param inBeats    The number of beats since the start of the song.
 */

void MidiInterface::sendSongPosition(unsigned inBeats) {
 8000702:	b590      	push	{r4, r7, lr}
 8000704:	b085      	sub	sp, #20
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	6039      	str	r1, [r7, #0]
	uint8_t SongPositionMessage[] = { SongPosition, (uint8_t) (inBeats & 0x7f),
 800070c:	210c      	movs	r1, #12
 800070e:	000c      	movs	r4, r1
 8000710:	187b      	adds	r3, r7, r1
 8000712:	0018      	movs	r0, r3
 8000714:	2303      	movs	r3, #3
 8000716:	001a      	movs	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f003 fd32 	bl	8004182 <memset>
 800071e:	0021      	movs	r1, r4
 8000720:	187b      	adds	r3, r7, r1
 8000722:	22f2      	movs	r2, #242	; 0xf2
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	227f      	movs	r2, #127	; 0x7f
 800072c:	4013      	ands	r3, r2
 800072e:	b2da      	uxtb	r2, r3
			(uint8_t) ((inBeats >> 7) & 0x7f) };
 8000730:	187b      	adds	r3, r7, r1
 8000732:	705a      	strb	r2, [r3, #1]
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	09db      	lsrs	r3, r3, #7
 8000738:	b2db      	uxtb	r3, r3
 800073a:	227f      	movs	r2, #127	; 0x7f
 800073c:	4013      	ands	r3, r2
 800073e:	b2da      	uxtb	r2, r3
 8000740:	187b      	adds	r3, r7, r1
 8000742:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&serial_out, SongPositionMessage, 3, MidiTimeout);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3348      	adds	r3, #72	; 0x48
 8000748:	0018      	movs	r0, r3
 800074a:	1879      	adds	r1, r7, r1
 800074c:	230a      	movs	r3, #10
 800074e:	2203      	movs	r2, #3
 8000750:	f002 fe6c 	bl	800342c <HAL_UART_Transmit>

	if (Settings.UseRunningStatus) {
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	2356      	movs	r3, #86	; 0x56
 8000758:	33ff      	adds	r3, #255	; 0xff
 800075a:	5cd3      	ldrb	r3, [r2, r3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d004      	beq.n	800076a <_ZN13MidiInterface16sendSongPositionEj+0x68>
		mRunningStatus_TX = InvalidType;
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	23a5      	movs	r3, #165	; 0xa5
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	2100      	movs	r1, #0
 8000768:	54d1      	strb	r1, [r2, r3]
	}
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b005      	add	sp, #20
 8000770:	bd90      	pop	{r4, r7, pc}

08000772 <_ZN13MidiInterface14sendSongSelectEh>:

/*! \brief Send a Song Select message */

void MidiInterface::sendSongSelect(DataByte inSongNumber) {
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	000a      	movs	r2, r1
 800077c:	1cfb      	adds	r3, r7, #3
 800077e:	701a      	strb	r2, [r3, #0]
	uint8_t SongSelectMessage[] =
 8000780:	210c      	movs	r1, #12
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	801a      	strh	r2, [r3, #0]
 8000788:	187b      	adds	r3, r7, r1
 800078a:	22f3      	movs	r2, #243	; 0xf3
 800078c:	701a      	strb	r2, [r3, #0]
			{ SongSelect, (uint8_t) (inSongNumber & 0x7f) };
 800078e:	1cfb      	adds	r3, r7, #3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	227f      	movs	r2, #127	; 0x7f
 8000794:	4013      	ands	r3, r2
 8000796:	b2da      	uxtb	r2, r3
 8000798:	187b      	adds	r3, r7, r1
 800079a:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(&serial_out, SongSelectMessage, 2, MidiTimeout);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3348      	adds	r3, #72	; 0x48
 80007a0:	0018      	movs	r0, r3
 80007a2:	1879      	adds	r1, r7, r1
 80007a4:	230a      	movs	r3, #10
 80007a6:	2202      	movs	r2, #2
 80007a8:	f002 fe40 	bl	800342c <HAL_UART_Transmit>
	if (Settings.UseRunningStatus) {
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	2356      	movs	r3, #86	; 0x56
 80007b0:	33ff      	adds	r3, #255	; 0xff
 80007b2:	5cd3      	ldrb	r3, [r2, r3]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d004      	beq.n	80007c2 <_ZN13MidiInterface14sendSongSelectEh+0x50>
		mRunningStatus_TX = InvalidType;
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	23a5      	movs	r3, #165	; 0xa5
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	2100      	movs	r1, #0
 80007c0:	54d1      	strb	r1, [r2, r3]
	}
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b004      	add	sp, #16
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <_ZN13MidiInterface12sendRealTimeE8MidiType>:
 \param inType    The available Real Time types are:
 Start, Stop, Continue, Clock, ActiveSensing and SystemReset.
 @see MidiType
 */

void MidiInterface::sendRealTime(MidiType inType) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	000a      	movs	r2, r1
 80007d6:	1cfb      	adds	r3, r7, #3
 80007d8:	701a      	strb	r2, [r3, #0]
	// Do not invalidate Running Status for real-time messages
	// as they can be interleaved within any message.
	uint8_t RealTimeMessage;
	switch (inType) {
 80007da:	1cfb      	adds	r3, r7, #3
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	3bf8      	subs	r3, #248	; 0xf8
 80007e0:	2b07      	cmp	r3, #7
 80007e2:	d80e      	bhi.n	8000802 <_ZN13MidiInterface12sendRealTimeE8MidiType+0x36>
 80007e4:	009a      	lsls	r2, r3, #2
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <_ZN13MidiInterface12sendRealTimeE8MidiType+0x40>)
 80007e8:	18d3      	adds	r3, r2, r3
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	469f      	mov	pc, r3
	case Start:
	case Stop:
	case Continue:
	case ActiveSensing:
	case SystemReset:
		HAL_UART_Transmit(&serial_out, &RealTimeMessage, 1, MidiTimeout);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3348      	adds	r3, #72	; 0x48
 80007f2:	0018      	movs	r0, r3
 80007f4:	230f      	movs	r3, #15
 80007f6:	18f9      	adds	r1, r7, r3
 80007f8:	230a      	movs	r3, #10
 80007fa:	2201      	movs	r2, #1
 80007fc:	f002 fe16 	bl	800342c <HAL_UART_Transmit>
		break;
 8000800:	e000      	b.n	8000804 <_ZN13MidiInterface12sendRealTimeE8MidiType+0x38>
	default:
// Invalid Real Time marker
		break;
 8000802:	46c0      	nop			; (mov r8, r8)
	}
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b004      	add	sp, #16
 800080a:	bd80      	pop	{r7, pc}
 800080c:	080041cc 	.word	0x080041cc

08000810 <_ZN13MidiInterface9getStatusE8MidiTypeh>:
	mCurrentNrpnNumber = 0xffff;
}

/*! @} */ // End of doc group MIDI Output
// -----------------------------------------------------------------------------
StatusByte MidiInterface::getStatus(MidiType inType, Channel inChannel) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	0008      	movs	r0, r1
 800081a:	0011      	movs	r1, r2
 800081c:	1cfb      	adds	r3, r7, #3
 800081e:	1c02      	adds	r2, r0, #0
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	1cbb      	adds	r3, r7, #2
 8000824:	1c0a      	adds	r2, r1, #0
 8000826:	701a      	strb	r2, [r3, #0]
	return ((byte) inType | ((inChannel - 1) & 0x0f));
 8000828:	1cbb      	adds	r3, r7, #2
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	3b01      	subs	r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	b25b      	sxtb	r3, r3
 8000832:	220f      	movs	r2, #15
 8000834:	4013      	ands	r3, r2
 8000836:	b25a      	sxtb	r2, r3
 8000838:	1cfb      	adds	r3, r7, #3
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b25b      	sxtb	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b25b      	sxtb	r3, r3
 8000842:	b2db      	uxtb	r3, r3
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b002      	add	sp, #8
 800084a:	bd80      	pop	{r7, pc}

0800084c <_ZN13MidiInterface4readEv>:
 If the Thru is enabled and the message matches the filter,
 it is sent back on the MIDI output.
 @see see setInputChannel()
 */

bool MidiInterface::read() {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	return read(mInputChannel);
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	23a4      	movs	r3, #164	; 0xa4
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	5cd2      	ldrb	r2, [r2, r3]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f000 f805 	bl	8000870 <_ZN13MidiInterface4readEh>
 8000866:	0003      	movs	r3, r0
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}

08000870 <_ZN13MidiInterface4readEh>:

/*! \brief Read messages on a specified channel.
 */

bool MidiInterface::read(Channel inChannel) {
 8000870:	b5b0      	push	{r4, r5, r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	000a      	movs	r2, r1
 800087a:	1cfb      	adds	r3, r7, #3
 800087c:	701a      	strb	r2, [r3, #0]
	if (inChannel >= MIDI_CHANNEL_OFF)
 800087e:	1cfb      	adds	r3, r7, #3
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b10      	cmp	r3, #16
 8000884:	d901      	bls.n	800088a <_ZN13MidiInterface4readEh+0x1a>
		return false; // MIDI Input disabled.
 8000886:	2300      	movs	r3, #0
 8000888:	e02d      	b.n	80008e6 <_ZN13MidiInterface4readEh+0x76>

	if (!parse())
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	0018      	movs	r0, r3
 800088e:	f000 f82f 	bl	80008f0 <_ZN13MidiInterface5parseEv>
 8000892:	0003      	movs	r3, r0
 8000894:	001a      	movs	r2, r3
 8000896:	2301      	movs	r3, #1
 8000898:	4053      	eors	r3, r2
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <_ZN13MidiInterface4readEh+0x34>
		return false;
 80008a0:	2300      	movs	r3, #0
 80008a2:	e020      	b.n	80008e6 <_ZN13MidiInterface4readEh+0x76>

	handleNullVelocityNoteOnAsNoteOff();
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fa86 	bl	8000db8 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>
	bool channelMatch = inputFilter(inChannel);
 80008ac:	250f      	movs	r5, #15
 80008ae:	197c      	adds	r4, r7, r5
 80008b0:	1cfb      	adds	r3, r7, #3
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 faa2 	bl	8000e02 <_ZN13MidiInterface11inputFilterEh>
 80008be:	0003      	movs	r3, r0
 80008c0:	7023      	strb	r3, [r4, #0]

	if (channelMatch) {
 80008c2:	197b      	adds	r3, r7, r5
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <_ZN13MidiInterface4readEh+0x62>
		launchCallback();
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 fb95 	bl	8000ffc <_ZN13MidiInterface14launchCallbackEv>
	}

	thruFilter(inChannel);
 80008d2:	1cfb      	adds	r3, r7, #3
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	0011      	movs	r1, r2
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 fcf0 	bl	80012c0 <_ZN13MidiInterface10thruFilterEh>

	return channelMatch;
 80008e0:	230f      	movs	r3, #15
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	781b      	ldrb	r3, [r3, #0]
}
 80008e6:	0018      	movs	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b004      	add	sp, #16
 80008ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080008f0 <_ZN13MidiInterface5parseEv>:
		break;
	}
}
// Private method: MIDI parser

bool MidiInterface::parse() {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	byte extracted;
	if (HAL_UART_Receive(&serial_in, &extracted, 1, MidiTimeout) != HAL_OK) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	33c8      	adds	r3, #200	; 0xc8
 80008fc:	0018      	movs	r0, r3
 80008fe:	230f      	movs	r3, #15
 8000900:	18f9      	adds	r1, r7, r3
 8000902:	230a      	movs	r3, #10
 8000904:	2201      	movs	r2, #1
 8000906:	f002 fe39 	bl	800357c <HAL_UART_Receive>
 800090a:	0003      	movs	r3, r0
 800090c:	1e5a      	subs	r2, r3, #1
 800090e:	4193      	sbcs	r3, r2
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <_ZN13MidiInterface5parseEv+0x2a>
		return false;
 8000916:	2300      	movs	r3, #0
 8000918:	e24a      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
	//    until the message is assembled or the buffer is empty.
	// Else, add the extracted byte to the pending message, and check validity.
	// When the message is done, store it.

	// Ignore Undefined
	if (extracted == 0xf9 || extracted == 0xfd) {
 800091a:	230f      	movs	r3, #15
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2bf9      	cmp	r3, #249	; 0xf9
 8000922:	d004      	beq.n	800092e <_ZN13MidiInterface5parseEv+0x3e>
 8000924:	230f      	movs	r3, #15
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2bfd      	cmp	r3, #253	; 0xfd
 800092c:	d10d      	bne.n	800094a <_ZN13MidiInterface5parseEv+0x5a>
		if (Settings.Use1ByteParsing) {
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	2358      	movs	r3, #88	; 0x58
 8000932:	33ff      	adds	r3, #255	; 0xff
 8000934:	5cd3      	ldrb	r3, [r2, r3]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <_ZN13MidiInterface5parseEv+0x4e>
			return false;
 800093a:	2300      	movs	r3, #0
 800093c:	e238      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
		} else {
			return parse();
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff ffd5 	bl	80008f0 <_ZN13MidiInterface5parseEv>
 8000946:	0003      	movs	r3, r0
 8000948:	e232      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
		}
	}

	if (mPendingMessageIndex == 0) {
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	2350      	movs	r3, #80	; 0x50
 800094e:	33ff      	adds	r3, #255	; 0xff
 8000950:	5cd3      	ldrb	r3, [r2, r3]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d000      	beq.n	8000958 <_ZN13MidiInterface5parseEv+0x68>
 8000956:	e0e8      	b.n	8000b2a <_ZN13MidiInterface5parseEv+0x23a>
// Start a new pending message
		mPendingMessage[0] = extracted;
 8000958:	230f      	movs	r3, #15
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	7819      	ldrb	r1, [r3, #0]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	234c      	movs	r3, #76	; 0x4c
 8000962:	33ff      	adds	r3, #255	; 0xff
 8000964:	54d1      	strb	r1, [r2, r3]

// Check for running status first
		if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX))) {
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	234a      	movs	r3, #74	; 0x4a
 800096a:	33ff      	adds	r3, #255	; 0xff
 800096c:	5cd3      	ldrb	r3, [r2, r3]
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fab9 	bl	8000ee6 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8000974:	0003      	movs	r3, r0
 8000976:	0018      	movs	r0, r3
 8000978:	f000 faf3 	bl	8000f62 <_ZN13MidiInterface16isChannelMessageE8MidiType>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d019      	beq.n	80009b4 <_ZN13MidiInterface5parseEv+0xc4>
			// Only these types allow Running Status

			// If the status byte is not received, prepend it
			// to the pending message
			if (extracted < 0x80) {
 8000980:	230f      	movs	r3, #15
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b25b      	sxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	db13      	blt.n	80009b4 <_ZN13MidiInterface5parseEv+0xc4>
				mPendingMessage[0] = mRunningStatus_RX;
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	234a      	movs	r3, #74	; 0x4a
 8000990:	33ff      	adds	r3, #255	; 0xff
 8000992:	5cd1      	ldrb	r1, [r2, r3]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	234c      	movs	r3, #76	; 0x4c
 8000998:	33ff      	adds	r3, #255	; 0xff
 800099a:	54d1      	strb	r1, [r2, r3]
				mPendingMessage[1] = extracted;
 800099c:	230f      	movs	r3, #15
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	7819      	ldrb	r1, [r3, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	23a6      	movs	r3, #166	; 0xa6
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	54d1      	strb	r1, [r2, r3]
				mPendingMessageIndex = 1;
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	2350      	movs	r3, #80	; 0x50
 80009ae:	33ff      	adds	r3, #255	; 0xff
 80009b0:	2101      	movs	r1, #1
 80009b2:	54d1      	strb	r1, [r2, r3]
			// Else: well, we received another status byte,
			// so the running status does not apply here.
			// It will be updated upon completion of this message.
		}

		switch (getTypeFromStatusByte(mPendingMessage[0])) {
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	234c      	movs	r3, #76	; 0x4c
 80009b8:	33ff      	adds	r3, #255	; 0xff
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 fa92 	bl	8000ee6 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 80009c2:	0003      	movs	r3, r0
 80009c4:	3b80      	subs	r3, #128	; 0x80
 80009c6:	2b7f      	cmp	r3, #127	; 0x7f
 80009c8:	d84d      	bhi.n	8000a66 <_ZN13MidiInterface5parseEv+0x176>
 80009ca:	009a      	lsls	r2, r3, #2
 80009cc:	4bdf      	ldr	r3, [pc, #892]	; (8000d4c <_ZN13MidiInterface5parseEv+0x45c>)
 80009ce:	18d3      	adds	r3, r2, r3
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	469f      	mov	pc, r3
		case Clock:
		case ActiveSensing:
		case SystemReset:
		case TuneRequest:
			// Handle the message type directly here.
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	234c      	movs	r3, #76	; 0x4c
 80009d8:	33ff      	adds	r3, #255	; 0xff
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fa82 	bl	8000ee6 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 80009e2:	0003      	movs	r3, r0
 80009e4:	0019      	movs	r1, r3
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	235a      	movs	r3, #90	; 0x5a
 80009ea:	33ff      	adds	r3, #255	; 0xff
 80009ec:	54d1      	strb	r1, [r2, r3]
			mMessage.channel = 0;
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	23ad      	movs	r3, #173	; 0xad
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2100      	movs	r1, #0
 80009f6:	54d1      	strb	r1, [r2, r3]
			mMessage.data1 = 0;
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	235c      	movs	r3, #92	; 0x5c
 80009fc:	33ff      	adds	r3, #255	; 0xff
 80009fe:	2100      	movs	r1, #0
 8000a00:	54d1      	strb	r1, [r2, r3]
			mMessage.data2 = 0;
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	23ae      	movs	r3, #174	; 0xae
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	2100      	movs	r1, #0
 8000a0a:	54d1      	strb	r1, [r2, r3]
			mMessage.valid = true;
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	23ac      	movs	r3, #172	; 0xac
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	2101      	movs	r1, #1
 8000a14:	54d1      	strb	r1, [r2, r3]

			// Do not reset all input attributes, Running Status must remain unchanged.
			// We still need to reset these
			mPendingMessageIndex = 0;
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	2350      	movs	r3, #80	; 0x50
 8000a1a:	33ff      	adds	r3, #255	; 0xff
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	54d1      	strb	r1, [r2, r3]
			mPendingMessageExpectedLenght = 0;
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	23a7      	movs	r3, #167	; 0xa7
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	2100      	movs	r1, #0
 8000a28:	54d1      	strb	r1, [r2, r3]

			return true;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e1c0      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
			// 2 bytes messages
		case ProgramChange:
		case AfterTouchChannel:
		case TimeCodeQuarterFrame:
		case SongSelect:
			mPendingMessageExpectedLenght = 2;
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	23a7      	movs	r3, #167	; 0xa7
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	2102      	movs	r1, #2
 8000a36:	54d1      	strb	r1, [r2, r3]
			break;
 8000a38:	e01b      	b.n	8000a72 <_ZN13MidiInterface5parseEv+0x182>
		case NoteOff:
		case ControlChange:
		case PitchBend:
		case AfterTouchPoly:
		case SongPosition:
			mPendingMessageExpectedLenght = 3;
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	23a7      	movs	r3, #167	; 0xa7
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2103      	movs	r1, #3
 8000a42:	54d1      	strb	r1, [r2, r3]
			break;
 8000a44:	e015      	b.n	8000a72 <_ZN13MidiInterface5parseEv+0x182>

		case SystemExclusive:
			// The message can be any lenght
			// between 3 and Settings.SysExMaxSize bytes
			mPendingMessageExpectedLenght = Settings.SysExMaxSize;
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	23a7      	movs	r3, #167	; 0xa7
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	54d1      	strb	r1, [r2, r3]
			mRunningStatus_RX = InvalidType;
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	234a      	movs	r3, #74	; 0x4a
 8000a54:	33ff      	adds	r3, #255	; 0xff
 8000a56:	2100      	movs	r1, #0
 8000a58:	54d1      	strb	r1, [r2, r3]
			mMessage.sysexArray[0] = SystemExclusive;
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	23af      	movs	r3, #175	; 0xaf
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	21f0      	movs	r1, #240	; 0xf0
 8000a62:	54d1      	strb	r1, [r2, r3]
			break;
 8000a64:	e005      	b.n	8000a72 <_ZN13MidiInterface5parseEv+0x182>

		case InvalidType:
		default:
			// This is obviously wrong. Let's get the hell out'a here.
			resetInput();
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 f9f3 	bl	8000e54 <_ZN13MidiInterface10resetInputEv>
			return false;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e19e      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
			break;
		}

		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	2350      	movs	r3, #80	; 0x50
 8000a76:	33ff      	adds	r3, #255	; 0xff
 8000a78:	5cd3      	ldrb	r3, [r2, r3]
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	23a7      	movs	r3, #167	; 0xa7
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	5cd3      	ldrb	r3, [r2, r3]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	4299      	cmp	r1, r3
 8000a88:	db37      	blt.n	8000afa <_ZN13MidiInterface5parseEv+0x20a>
			// Reception complete
			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	234c      	movs	r3, #76	; 0x4c
 8000a8e:	33ff      	adds	r3, #255	; 0xff
 8000a90:	5cd3      	ldrb	r3, [r2, r3]
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fa27 	bl	8000ee6 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	235a      	movs	r3, #90	; 0x5a
 8000aa0:	33ff      	adds	r3, #255	; 0xff
 8000aa2:	54d1      	strb	r1, [r2, r3]
			mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	234c      	movs	r3, #76	; 0x4c
 8000aa8:	33ff      	adds	r3, #255	; 0xff
 8000aaa:	5cd3      	ldrb	r3, [r2, r3]
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fa47 	bl	8000f40 <_ZN13MidiInterface24getChannelFromStatusByteEh>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	23ad      	movs	r3, #173	; 0xad
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	54d1      	strb	r1, [r2, r3]
			mMessage.data1 = mPendingMessage[1];
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	23a6      	movs	r3, #166	; 0xa6
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	5cd1      	ldrb	r1, [r2, r3]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	235c      	movs	r3, #92	; 0x5c
 8000aca:	33ff      	adds	r3, #255	; 0xff
 8000acc:	54d1      	strb	r1, [r2, r3]
			mMessage.data2 = 0;			// Completed new message has 1 data byte
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	23ae      	movs	r3, #174	; 0xae
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	54d1      	strb	r1, [r2, r3]

			mPendingMessageIndex = 0;
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	2350      	movs	r3, #80	; 0x50
 8000adc:	33ff      	adds	r3, #255	; 0xff
 8000ade:	2100      	movs	r1, #0
 8000ae0:	54d1      	strb	r1, [r2, r3]
			mPendingMessageExpectedLenght = 0;
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	23a7      	movs	r3, #167	; 0xa7
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	2100      	movs	r1, #0
 8000aea:	54d1      	strb	r1, [r2, r3]
			mMessage.valid = true;
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	23ac      	movs	r3, #172	; 0xac
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2101      	movs	r1, #1
 8000af4:	54d1      	strb	r1, [r2, r3]
			return true;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e15a      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
		} else {
			// Waiting for more data
			mPendingMessageIndex++;
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	2350      	movs	r3, #80	; 0x50
 8000afe:	33ff      	adds	r3, #255	; 0xff
 8000b00:	5cd3      	ldrb	r3, [r2, r3]
 8000b02:	3301      	adds	r3, #1
 8000b04:	b2d9      	uxtb	r1, r3
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	2350      	movs	r3, #80	; 0x50
 8000b0a:	33ff      	adds	r3, #255	; 0xff
 8000b0c:	54d1      	strb	r1, [r2, r3]
		}

		if (Settings.Use1ByteParsing) {
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	2358      	movs	r3, #88	; 0x58
 8000b12:	33ff      	adds	r3, #255	; 0xff
 8000b14:	5cd3      	ldrb	r3, [r2, r3]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <_ZN13MidiInterface5parseEv+0x22e>
			// Message is not complete.
			return false;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e148      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
		} else {
			// Call the parser recursively
			// to parse the rest of the message.
			return parse();
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff fee5 	bl	80008f0 <_ZN13MidiInterface5parseEv>
 8000b26:	0003      	movs	r3, r0
 8000b28:	e142      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
		}
	} else {
// First, test if this is a status byte
		if (extracted >= 0x80) {
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	da6d      	bge.n	8000c12 <_ZN13MidiInterface5parseEv+0x322>
			// Reception of status bytes in the middle of an uncompleted message
			// are allowed only for interleaved Real Time message or EOX
			switch (extracted) {
 8000b36:	230f      	movs	r3, #15
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	3bf7      	subs	r3, #247	; 0xf7
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d866      	bhi.n	8000c10 <_ZN13MidiInterface5parseEv+0x320>
 8000b42:	009a      	lsls	r2, r3, #2
 8000b44:	4b82      	ldr	r3, [pc, #520]	; (8000d50 <_ZN13MidiInterface5parseEv+0x460>)
 8000b46:	18d3      	adds	r3, r2, r3
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	469f      	mov	pc, r3
// the MIDI class, and recompose the message it was
// interleaved into. Oh, and without killing the running status..
// This is done by leaving the pending message as is,
// it will be completed on next calls.

				mMessage.type = (MidiType) extracted;
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	7819      	ldrb	r1, [r3, #0]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	235a      	movs	r3, #90	; 0x5a
 8000b56:	33ff      	adds	r3, #255	; 0xff
 8000b58:	54d1      	strb	r1, [r2, r3]
				mMessage.data1 = 0;
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	235c      	movs	r3, #92	; 0x5c
 8000b5e:	33ff      	adds	r3, #255	; 0xff
 8000b60:	2100      	movs	r1, #0
 8000b62:	54d1      	strb	r1, [r2, r3]
				mMessage.data2 = 0;
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	23ae      	movs	r3, #174	; 0xae
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	54d1      	strb	r1, [r2, r3]
				mMessage.channel = 0;
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	23ad      	movs	r3, #173	; 0xad
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	2100      	movs	r1, #0
 8000b76:	54d1      	strb	r1, [r2, r3]
				mMessage.valid = true;
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	23ac      	movs	r3, #172	; 0xac
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	2101      	movs	r1, #1
 8000b80:	54d1      	strb	r1, [r2, r3]
				return true;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e114      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>

// End of Exclusive
			case 0xf7:
				if (mMessage.sysexArray[0] == SystemExclusive) {
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	23af      	movs	r3, #175	; 0xaf
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	5cd3      	ldrb	r3, [r2, r3]
 8000b8e:	2bf0      	cmp	r3, #240	; 0xf0
 8000b90:	d138      	bne.n	8000c04 <_ZN13MidiInterface5parseEv+0x314>
					// Store the last byte (EOX)
					mMessage.sysexArray[mPendingMessageIndex++] = 0xf7;
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	2350      	movs	r3, #80	; 0x50
 8000b96:	33ff      	adds	r3, #255	; 0xff
 8000b98:	5cd3      	ldrb	r3, [r2, r3]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	b2d0      	uxtb	r0, r2
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2250      	movs	r2, #80	; 0x50
 8000ba2:	32ff      	adds	r2, #255	; 0xff
 8000ba4:	5488      	strb	r0, [r1, r2]
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	23af      	movs	r3, #175	; 0xaf
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	1852      	adds	r2, r2, r1
 8000bb0:	18d3      	adds	r3, r2, r3
 8000bb2:	22f7      	movs	r2, #247	; 0xf7
 8000bb4:	701a      	strb	r2, [r3, #0]
					mMessage.type = SystemExclusive;
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	235a      	movs	r3, #90	; 0x5a
 8000bba:	33ff      	adds	r3, #255	; 0xff
 8000bbc:	21f0      	movs	r1, #240	; 0xf0
 8000bbe:	54d1      	strb	r1, [r2, r3]

					// Get length
					mMessage.data1 = mPendingMessageIndex & 0xff;		// LSB
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	2350      	movs	r3, #80	; 0x50
 8000bc4:	33ff      	adds	r3, #255	; 0xff
 8000bc6:	5cd1      	ldrb	r1, [r2, r3]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	235c      	movs	r3, #92	; 0x5c
 8000bcc:	33ff      	adds	r3, #255	; 0xff
 8000bce:	54d1      	strb	r1, [r2, r3]
					mMessage.data2 = mPendingMessageIndex >> 8;			// MSB
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	2350      	movs	r3, #80	; 0x50
 8000bd4:	33ff      	adds	r3, #255	; 0xff
 8000bd6:	5cd3      	ldrb	r3, [r2, r3]
 8000bd8:	121b      	asrs	r3, r3, #8
 8000bda:	b2d9      	uxtb	r1, r3
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	23ae      	movs	r3, #174	; 0xae
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	54d1      	strb	r1, [r2, r3]
					mMessage.channel = 0;
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	23ad      	movs	r3, #173	; 0xad
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2100      	movs	r1, #0
 8000bec:	54d1      	strb	r1, [r2, r3]
					mMessage.valid = true;
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	23ac      	movs	r3, #172	; 0xac
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	54d1      	strb	r1, [r2, r3]

					resetInput();
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 f92a 	bl	8000e54 <_ZN13MidiInterface10resetInputEv>
					return true;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e0d5      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
				} else {
					// Well well well.. error.
					resetInput();
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f924 	bl	8000e54 <_ZN13MidiInterface10resetInputEv>
					return false;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e0cf      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
				}

			default:
				break; // LCOV_EXCL_LINE - Coverage blind spot
 8000c10:	46c0      	nop			; (mov r8, r8)
			}
		}

// Add extracted data byte to pending message
		if (mPendingMessage[0] == SystemExclusive)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	234c      	movs	r3, #76	; 0x4c
 8000c16:	33ff      	adds	r3, #255	; 0xff
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	2bf0      	cmp	r3, #240	; 0xf0
 8000c1c:	d10f      	bne.n	8000c3e <_ZN13MidiInterface5parseEv+0x34e>
			mMessage.sysexArray[mPendingMessageIndex] = extracted;
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	2350      	movs	r3, #80	; 0x50
 8000c22:	33ff      	adds	r3, #255	; 0xff
 8000c24:	5cd3      	ldrb	r3, [r2, r3]
 8000c26:	0018      	movs	r0, r3
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	7819      	ldrb	r1, [r3, #0]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	23af      	movs	r3, #175	; 0xaf
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	1812      	adds	r2, r2, r0
 8000c36:	18d3      	adds	r3, r2, r3
 8000c38:	1c0a      	adds	r2, r1, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	e00e      	b.n	8000c5c <_ZN13MidiInterface5parseEv+0x36c>
		else
			mPendingMessage[mPendingMessageIndex] = extracted;
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	2350      	movs	r3, #80	; 0x50
 8000c42:	33ff      	adds	r3, #255	; 0xff
 8000c44:	5cd3      	ldrb	r3, [r2, r3]
 8000c46:	0018      	movs	r0, r3
 8000c48:	230f      	movs	r3, #15
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	7819      	ldrb	r1, [r3, #0]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	234c      	movs	r3, #76	; 0x4c
 8000c52:	33ff      	adds	r3, #255	; 0xff
 8000c54:	1812      	adds	r2, r2, r0
 8000c56:	18d3      	adds	r3, r2, r3
 8000c58:	1c0a      	adds	r2, r1, #0
 8000c5a:	701a      	strb	r2, [r3, #0]

// Now we are going to check if we have reached the end of the message
		if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1)) {
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	2350      	movs	r3, #80	; 0x50
 8000c60:	33ff      	adds	r3, #255	; 0xff
 8000c62:	5cd3      	ldrb	r3, [r2, r3]
 8000c64:	0019      	movs	r1, r3
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	23a7      	movs	r3, #167	; 0xa7
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	5cd3      	ldrb	r3, [r2, r3]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	4299      	cmp	r1, r3
 8000c72:	da00      	bge.n	8000c76 <_ZN13MidiInterface5parseEv+0x386>
 8000c74:	e085      	b.n	8000d82 <_ZN13MidiInterface5parseEv+0x492>
			// "FML" case: fall down here with an overflown SysEx..
			// This means we received the last possible data byte that can fit
			// the buffer. If this happens, try increasing Settings.SysExMaxSize.
			if (mPendingMessage[0] == SystemExclusive) {
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	234c      	movs	r3, #76	; 0x4c
 8000c7a:	33ff      	adds	r3, #255	; 0xff
 8000c7c:	5cd3      	ldrb	r3, [r2, r3]
 8000c7e:	2bf0      	cmp	r3, #240	; 0xf0
 8000c80:	d105      	bne.n	8000c8e <_ZN13MidiInterface5parseEv+0x39e>
				resetInput();
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 f8e5 	bl	8000e54 <_ZN13MidiInterface10resetInputEv>
				return false;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e090      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
			}

			mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	234c      	movs	r3, #76	; 0x4c
 8000c92:	33ff      	adds	r3, #255	; 0xff
 8000c94:	5cd3      	ldrb	r3, [r2, r3]
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 f925 	bl	8000ee6 <_ZN13MidiInterface21getTypeFromStatusByteEh>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	235a      	movs	r3, #90	; 0x5a
 8000ca4:	33ff      	adds	r3, #255	; 0xff
 8000ca6:	54d1      	strb	r1, [r2, r3]

			if (isChannelMessage(mMessage.type))
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	235a      	movs	r3, #90	; 0x5a
 8000cac:	33ff      	adds	r3, #255	; 0xff
 8000cae:	5cd3      	ldrb	r3, [r2, r3]
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f000 f956 	bl	8000f62 <_ZN13MidiInterface16isChannelMessageE8MidiType>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d00d      	beq.n	8000cd6 <_ZN13MidiInterface5parseEv+0x3e6>
				mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	234c      	movs	r3, #76	; 0x4c
 8000cbe:	33ff      	adds	r3, #255	; 0xff
 8000cc0:	5cd3      	ldrb	r3, [r2, r3]
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 f93c 	bl	8000f40 <_ZN13MidiInterface24getChannelFromStatusByteEh>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	0019      	movs	r1, r3
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	23ad      	movs	r3, #173	; 0xad
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	54d1      	strb	r1, [r2, r3]
 8000cd4:	e004      	b.n	8000ce0 <_ZN13MidiInterface5parseEv+0x3f0>
			else
				mMessage.channel = 0;
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	23ad      	movs	r3, #173	; 0xad
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	2100      	movs	r1, #0
 8000cde:	54d1      	strb	r1, [r2, r3]

			mMessage.data1 = mPendingMessage[1];
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	23a6      	movs	r3, #166	; 0xa6
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	5cd1      	ldrb	r1, [r2, r3]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	235c      	movs	r3, #92	; 0x5c
 8000cec:	33ff      	adds	r3, #255	; 0xff
 8000cee:	54d1      	strb	r1, [r2, r3]

			// Save data2 only if applicable
			mMessage.data2 =
					mPendingMessageExpectedLenght == 3 ? mPendingMessage[2] : 0;
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	23a7      	movs	r3, #167	; 0xa7
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	5cd3      	ldrb	r3, [r2, r3]
			mMessage.data2 =
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d104      	bne.n	8000d06 <_ZN13MidiInterface5parseEv+0x416>
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	234e      	movs	r3, #78	; 0x4e
 8000d00:	33ff      	adds	r3, #255	; 0xff
 8000d02:	5cd1      	ldrb	r1, [r2, r3]
 8000d04:	e000      	b.n	8000d08 <_ZN13MidiInterface5parseEv+0x418>
 8000d06:	2100      	movs	r1, #0
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	23ae      	movs	r3, #174	; 0xae
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	54d1      	strb	r1, [r2, r3]

			// Reset local variables
			mPendingMessageIndex = 0;
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	2350      	movs	r3, #80	; 0x50
 8000d14:	33ff      	adds	r3, #255	; 0xff
 8000d16:	2100      	movs	r1, #0
 8000d18:	54d1      	strb	r1, [r2, r3]
			mPendingMessageExpectedLenght = 0;
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	23a7      	movs	r3, #167	; 0xa7
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2100      	movs	r1, #0
 8000d22:	54d1      	strb	r1, [r2, r3]

			mMessage.valid = true;
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	23ac      	movs	r3, #172	; 0xac
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	54d1      	strb	r1, [r2, r3]

			// Activate running status (if enabled for the received type)
			switch (mMessage.type) {
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	235a      	movs	r3, #90	; 0x5a
 8000d32:	33ff      	adds	r3, #255	; 0xff
 8000d34:	5cd3      	ldrb	r3, [r2, r3]
 8000d36:	2bb0      	cmp	r3, #176	; 0xb0
 8000d38:	d012      	beq.n	8000d60 <_ZN13MidiInterface5parseEv+0x470>
 8000d3a:	dc0b      	bgt.n	8000d54 <_ZN13MidiInterface5parseEv+0x464>
 8000d3c:	2b90      	cmp	r3, #144	; 0x90
 8000d3e:	d00f      	beq.n	8000d60 <_ZN13MidiInterface5parseEv+0x470>
 8000d40:	2ba0      	cmp	r3, #160	; 0xa0
 8000d42:	d00d      	beq.n	8000d60 <_ZN13MidiInterface5parseEv+0x470>
 8000d44:	2b80      	cmp	r3, #128	; 0x80
 8000d46:	d00b      	beq.n	8000d60 <_ZN13MidiInterface5parseEv+0x470>
 8000d48:	e013      	b.n	8000d72 <_ZN13MidiInterface5parseEv+0x482>
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	080041ec 	.word	0x080041ec
 8000d50:	080043ec 	.word	0x080043ec
 8000d54:	2bd0      	cmp	r3, #208	; 0xd0
 8000d56:	d003      	beq.n	8000d60 <_ZN13MidiInterface5parseEv+0x470>
 8000d58:	2be0      	cmp	r3, #224	; 0xe0
 8000d5a:	d001      	beq.n	8000d60 <_ZN13MidiInterface5parseEv+0x470>
 8000d5c:	2bc0      	cmp	r3, #192	; 0xc0
 8000d5e:	d108      	bne.n	8000d72 <_ZN13MidiInterface5parseEv+0x482>
			case ControlChange:
			case ProgramChange:
			case AfterTouchChannel:
			case PitchBend:
// Running status enabled: store it from received message
				mRunningStatus_RX = mPendingMessage[0];
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	234c      	movs	r3, #76	; 0x4c
 8000d64:	33ff      	adds	r3, #255	; 0xff
 8000d66:	5cd1      	ldrb	r1, [r2, r3]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	234a      	movs	r3, #74	; 0x4a
 8000d6c:	33ff      	adds	r3, #255	; 0xff
 8000d6e:	54d1      	strb	r1, [r2, r3]
				break;
 8000d70:	e005      	b.n	8000d7e <_ZN13MidiInterface5parseEv+0x48e>

			default:
// No running status
				mRunningStatus_RX = InvalidType;
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	234a      	movs	r3, #74	; 0x4a
 8000d76:	33ff      	adds	r3, #255	; 0xff
 8000d78:	2100      	movs	r1, #0
 8000d7a:	54d1      	strb	r1, [r2, r3]
				break;
 8000d7c:	46c0      	nop			; (mov r8, r8)
			}
			return true;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e016      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
		} else {
			// Then update the index of the pending message.
			mPendingMessageIndex++;
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	2350      	movs	r3, #80	; 0x50
 8000d86:	33ff      	adds	r3, #255	; 0xff
 8000d88:	5cd3      	ldrb	r3, [r2, r3]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	b2d9      	uxtb	r1, r3
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	2350      	movs	r3, #80	; 0x50
 8000d92:	33ff      	adds	r3, #255	; 0xff
 8000d94:	54d1      	strb	r1, [r2, r3]

			if (Settings.Use1ByteParsing) {
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	2358      	movs	r3, #88	; 0x58
 8000d9a:	33ff      	adds	r3, #255	; 0xff
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <_ZN13MidiInterface5parseEv+0x4b6>
// Message is not complete.
				return false;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e004      	b.n	8000db0 <_ZN13MidiInterface5parseEv+0x4c0>
			} else {
// Call the parser recursively to parse the rest of the message.
				return parse();
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff fda1 	bl	80008f0 <_ZN13MidiInterface5parseEv>
 8000dae:	0003      	movs	r3, r0
			}
		}
	}
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b004      	add	sp, #16
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv>:

void MidiInterface::handleNullVelocityNoteOnAsNoteOff() {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	23ab      	movs	r3, #171	; 0xab
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	5cd3      	ldrb	r3, [r2, r3]
			&& getData2() == 0) {
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00e      	beq.n	8000dea <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x32>
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f000 f857 	bl	8000e82 <_ZN13MidiInterface7getTypeEv>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	2b90      	cmp	r3, #144	; 0x90
 8000dd8:	d107      	bne.n	8000dea <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x32>
			&& getData2() == 0) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 f85c 	bl	8000e9a <_ZN13MidiInterface8getData2Ev>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d101      	bne.n	8000dea <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x32>
 8000de6:	2301      	movs	r3, #1
 8000de8:	e000      	b.n	8000dec <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x34>
 8000dea:	2300      	movs	r3, #0
	if (Settings.HandleNullVelocityNoteOnAsNoteOff && getType() == NoteOn
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d004      	beq.n	8000dfa <_ZN13MidiInterface33handleNullVelocityNoteOnAsNoteOffEv+0x42>
		mMessage.type = NoteOff;
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	235a      	movs	r3, #90	; 0x5a
 8000df4:	33ff      	adds	r3, #255	; 0xff
 8000df6:	2180      	movs	r1, #128	; 0x80
 8000df8:	54d1      	strb	r1, [r2, r3]
	}
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b002      	add	sp, #8
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_ZN13MidiInterface11inputFilterEh>:

// Private method: check if the received message is on the listened channel

bool MidiInterface::inputFilter(Channel inChannel) {
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	1cfb      	adds	r3, r7, #3
 8000e0e:	701a      	strb	r2, [r3, #0]
	// This method handles recognition of channel
	// (to know if the message is destinated to the Arduino)

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	235a      	movs	r3, #90	; 0x5a
 8000e14:	33ff      	adds	r3, #255	; 0xff
 8000e16:	5cd3      	ldrb	r3, [r2, r3]
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	da15      	bge.n	8000e4a <_ZN13MidiInterface11inputFilterEh+0x48>
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	235a      	movs	r3, #90	; 0x5a
 8000e22:	33ff      	adds	r3, #255	; 0xff
 8000e24:	5cd3      	ldrb	r3, [r2, r3]
 8000e26:	2be0      	cmp	r3, #224	; 0xe0
 8000e28:	d80f      	bhi.n	8000e4a <_ZN13MidiInterface11inputFilterEh+0x48>
// Then we need to know if we listen to it
		if ((mMessage.channel == inChannel)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	23ad      	movs	r3, #173	; 0xad
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	5cd3      	ldrb	r3, [r2, r3]
 8000e32:	1cfa      	adds	r2, r7, #3
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d003      	beq.n	8000e42 <_ZN13MidiInterface11inputFilterEh+0x40>
				|| (inChannel == MIDI_CHANNEL_OMNI)) {
 8000e3a:	1cfb      	adds	r3, r7, #3
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <_ZN13MidiInterface11inputFilterEh+0x44>
			return true;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e002      	b.n	8000e4c <_ZN13MidiInterface11inputFilterEh+0x4a>
		} else {
			// We don't listen to this channel
			return false;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <_ZN13MidiInterface11inputFilterEh+0x4a>
		}
	} else {
// System messages are always received
		return true;
 8000e4a:	2301      	movs	r3, #1
	}
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b002      	add	sp, #8
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_ZN13MidiInterface10resetInputEv>:

// Private method: reset input attributes

void MidiInterface::resetInput() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	mPendingMessageIndex = 0;
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	2350      	movs	r3, #80	; 0x50
 8000e60:	33ff      	adds	r3, #255	; 0xff
 8000e62:	2100      	movs	r1, #0
 8000e64:	54d1      	strb	r1, [r2, r3]
	mPendingMessageExpectedLenght = 0;
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	23a7      	movs	r3, #167	; 0xa7
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	54d1      	strb	r1, [r2, r3]
	mRunningStatus_RX = InvalidType;
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	234a      	movs	r3, #74	; 0x4a
 8000e74:	33ff      	adds	r3, #255	; 0xff
 8000e76:	2100      	movs	r1, #0
 8000e78:	54d1      	strb	r1, [r2, r3]
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_ZN13MidiInterface7getTypeEv>:
/*! \brief Get the last received message's type

 Returns an enumerated type. @see MidiType
 */

MidiType MidiInterface::getType() {
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	return mMessage.type;
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	235a      	movs	r3, #90	; 0x5a
 8000e8e:	33ff      	adds	r3, #255	; 0xff
 8000e90:	5cd3      	ldrb	r3, [r2, r3]
}
 8000e92:	0018      	movs	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b002      	add	sp, #8
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_ZN13MidiInterface8getData2Ev>:
	return mMessage.data1;
}

/*! \brief Get the second data byte of the last received message. */

DataByte MidiInterface::getData2() {
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
	return mMessage.data2;
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	23ae      	movs	r3, #174	; 0xae
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	5cd3      	ldrb	r3, [r2, r3]
}
 8000eaa:	0018      	movs	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b002      	add	sp, #8
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_ZN13MidiInterface13getSysExArrayEv>:
/*! \brief Get the System Exclusive byte array.

 @see getSysExArrayLength to get the array's length in bytes.
 */

byte* MidiInterface::getSysExArray() {
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
	return mMessage.sysexArray;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	335f      	adds	r3, #95	; 0x5f
 8000ebe:	33ff      	adds	r3, #255	; 0xff
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_ZN13MidiInterface19getSysExArrayLengthEv>:

 It is coded using data1 as LSB and data2 as MSB.
 \return The array's length, in bytes.
 */

unsigned MidiInterface::getSysExArrayLength() {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	return mMessage.getSysExSize();
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3359      	adds	r3, #89	; 0x59
 8000ed4:	33ff      	adds	r3, #255	; 0xff
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff f9a2 	bl	8000220 <_ZN8mMessage12getSysExSizeEv>
 8000edc:	0003      	movs	r3, r0
}
 8000ede:	0018      	movs	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_ZN13MidiInterface21getTypeFromStatusByteEh>:
 This is a utility static method, used internally,
 made public so you can handle MidiTypes more easily.
 */

MidiType MidiInterface::getTypeFromStatusByte(
byte inStatus) {
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	0002      	movs	r2, r0
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	701a      	strb	r2, [r3, #0]
	if ((inStatus < 0x80) || (inStatus == 0xf4) || (inStatus == 0xf5)
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	da0f      	bge.n	8000f1c <_ZN13MidiInterface21getTypeFromStatusByteEh+0x36>
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2bf4      	cmp	r3, #244	; 0xf4
 8000f02:	d00b      	beq.n	8000f1c <_ZN13MidiInterface21getTypeFromStatusByteEh+0x36>
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2bf5      	cmp	r3, #245	; 0xf5
 8000f0a:	d007      	beq.n	8000f1c <_ZN13MidiInterface21getTypeFromStatusByteEh+0x36>
			|| (inStatus == 0xf9) || (inStatus == 0xfD)) {
 8000f0c:	1dfb      	adds	r3, r7, #7
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2bf9      	cmp	r3, #249	; 0xf9
 8000f12:	d003      	beq.n	8000f1c <_ZN13MidiInterface21getTypeFromStatusByteEh+0x36>
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2bfd      	cmp	r3, #253	; 0xfd
 8000f1a:	d101      	bne.n	8000f20 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x3a>
// Data bytes and undefined.
		return InvalidType;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e00b      	b.n	8000f38 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x52>
	}
	if (inStatus < 0xf0) {
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2bef      	cmp	r3, #239	; 0xef
 8000f26:	d805      	bhi.n	8000f34 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x4e>
// Channel message, remove channel nibble.
		return MidiType(inStatus & 0xf0);
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	4393      	bics	r3, r2
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	e001      	b.n	8000f38 <_ZN13MidiInterface21getTypeFromStatusByteEh+0x52>
	}

	return MidiType(inStatus);
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	781b      	ldrb	r3, [r3, #0]
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_ZN13MidiInterface24getChannelFromStatusByteEh>:

/*! \brief Returns channel in the range 1-16
 */

Channel MidiInterface::getChannelFromStatusByte(
byte inStatus) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	0002      	movs	r2, r0
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	701a      	strb	r2, [r3, #0]
	return (inStatus & 0x0f) + 1;
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	220f      	movs	r2, #15
 8000f52:	4013      	ands	r3, r2
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2db      	uxtb	r3, r3
}
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_ZN13MidiInterface16isChannelMessageE8MidiType>:

bool MidiInterface::isChannelMessage(MidiType inType) {
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	0002      	movs	r2, r0
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	701a      	strb	r2, [r3, #0]
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
			|| inType == PitchBend || inType == ProgramChange);
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b80      	cmp	r3, #128	; 0x80
 8000f74:	d017      	beq.n	8000fa6 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x44>
	return (inType == NoteOff || inType == NoteOn || inType == ControlChange
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b90      	cmp	r3, #144	; 0x90
 8000f7c:	d013      	beq.n	8000fa6 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x44>
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2bb0      	cmp	r3, #176	; 0xb0
 8000f84:	d00f      	beq.n	8000fa6 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x44>
			|| inType == AfterTouchPoly || inType == AfterTouchChannel
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2ba0      	cmp	r3, #160	; 0xa0
 8000f8c:	d00b      	beq.n	8000fa6 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x44>
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2bd0      	cmp	r3, #208	; 0xd0
 8000f94:	d007      	beq.n	8000fa6 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x44>
			|| inType == PitchBend || inType == ProgramChange);
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2be0      	cmp	r3, #224	; 0xe0
 8000f9c:	d003      	beq.n	8000fa6 <_ZN13MidiInterface16isChannelMessageE8MidiType+0x44>
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8000fa4:	d101      	bne.n	8000faa <_ZN13MidiInterface16isChannelMessageE8MidiType+0x48>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <_ZN13MidiInterface16isChannelMessageE8MidiType+0x4a>
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZN13MidiInterface14setHandleClockEPFvvE>:
	mSongSelectCallback = fptr;
}
void MidiInterface::setHandleTuneRequest(void (*fptr)(void)) {
	mTuneRequestCallback = fptr;
}
void MidiInterface::setHandleClock(void (*fptr)(void)) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	mClockCallback = fptr;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_ZN13MidiInterface14setHandleStartEPFvvE>:
void MidiInterface::setHandleStart(void (*fptr)(void)) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	mStartCallback = fptr;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZN13MidiInterface13setHandleStopEPFvvE>:
void MidiInterface::setHandleContinue(void (*fptr)(void)) {
	mContinueCallback = fptr;
}
void MidiInterface::setHandleStop(void (*fptr)(void)) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	mStopCallback = fptr;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_ZN13MidiInterface14launchCallbackEv>:
	}
}

/*! @} */ // End of doc group MIDI Callbacks
// Private - launch callback function based on received type.
void MidiInterface::launchCallback() {
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	// The order is mixed to allow frequent messages to trigger their callback faster.
	switch (mMessage.type) {
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	235a      	movs	r3, #90	; 0x5a
 8001008:	33ff      	adds	r3, #255	; 0xff
 800100a:	5cd3      	ldrb	r3, [r2, r3]
 800100c:	3b80      	subs	r3, #128	; 0x80
 800100e:	2b7f      	cmp	r3, #127	; 0x7f
 8001010:	d900      	bls.n	8001014 <_ZN13MidiInterface14launchCallbackEv+0x18>
 8001012:	e128      	b.n	8001266 <_ZN13MidiInterface14launchCallbackEv+0x26a>
 8001014:	009a      	lsls	r2, r3, #2
 8001016:	4ba8      	ldr	r3, [pc, #672]	; (80012b8 <_ZN13MidiInterface14launchCallbackEv+0x2bc>)
 8001018:	18d3      	adds	r3, r2, r3
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	469f      	mov	pc, r3
	// Notes
	case NoteOff:
		if (mNoteOffCallback != 0)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d100      	bne.n	8001028 <_ZN13MidiInterface14launchCallbackEv+0x2c>
 8001026:	e120      	b.n	800126a <_ZN13MidiInterface14launchCallbackEv+0x26e>
			mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	22ad      	movs	r2, #173	; 0xad
 8001030:	0052      	lsls	r2, r2, #1
 8001032:	5c88      	ldrb	r0, [r1, r2]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	225c      	movs	r2, #92	; 0x5c
 8001038:	32ff      	adds	r2, #255	; 0xff
 800103a:	5c8c      	ldrb	r4, [r1, r2]
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	22ae      	movs	r2, #174	; 0xae
 8001040:	0052      	lsls	r2, r2, #1
 8001042:	5c8a      	ldrb	r2, [r1, r2]
 8001044:	0021      	movs	r1, r4
 8001046:	4798      	blx	r3
		break;
 8001048:	e10f      	b.n	800126a <_ZN13MidiInterface14launchCallbackEv+0x26e>
	case NoteOn:
		if (mNoteOnCallback != 0)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <_ZN13MidiInterface14launchCallbackEv+0x58>
 8001052:	e10c      	b.n	800126e <_ZN13MidiInterface14launchCallbackEv+0x272>
			mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	22ad      	movs	r2, #173	; 0xad
 800105c:	0052      	lsls	r2, r2, #1
 800105e:	5c88      	ldrb	r0, [r1, r2]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	225c      	movs	r2, #92	; 0x5c
 8001064:	32ff      	adds	r2, #255	; 0xff
 8001066:	5c8c      	ldrb	r4, [r1, r2]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	22ae      	movs	r2, #174	; 0xae
 800106c:	0052      	lsls	r2, r2, #1
 800106e:	5c8a      	ldrb	r2, [r1, r2]
 8001070:	0021      	movs	r1, r4
 8001072:	4798      	blx	r3
		break;
 8001074:	e0fb      	b.n	800126e <_ZN13MidiInterface14launchCallbackEv+0x272>

// Real-time messages
	case Clock:
		if (mClockCallback != 0)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	2b00      	cmp	r3, #0
 800107c:	d100      	bne.n	8001080 <_ZN13MidiInterface14launchCallbackEv+0x84>
 800107e:	e0f8      	b.n	8001272 <_ZN13MidiInterface14launchCallbackEv+0x276>
			mClockCallback();
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4798      	blx	r3
		break;
 8001086:	e0f4      	b.n	8001272 <_ZN13MidiInterface14launchCallbackEv+0x276>
	case Start:
		if (mStartCallback != 0)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108c:	2b00      	cmp	r3, #0
 800108e:	d100      	bne.n	8001092 <_ZN13MidiInterface14launchCallbackEv+0x96>
 8001090:	e0f1      	b.n	8001276 <_ZN13MidiInterface14launchCallbackEv+0x27a>
			mStartCallback();
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001096:	4798      	blx	r3
		break;
 8001098:	e0ed      	b.n	8001276 <_ZN13MidiInterface14launchCallbackEv+0x27a>
	case Continue:
		if (mContinueCallback != 0)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d100      	bne.n	80010a4 <_ZN13MidiInterface14launchCallbackEv+0xa8>
 80010a2:	e0ea      	b.n	800127a <_ZN13MidiInterface14launchCallbackEv+0x27e>
			mContinueCallback();
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a8:	4798      	blx	r3
		break;
 80010aa:	e0e6      	b.n	800127a <_ZN13MidiInterface14launchCallbackEv+0x27e>
	case Stop:
		if (mStopCallback != 0)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d100      	bne.n	80010b6 <_ZN13MidiInterface14launchCallbackEv+0xba>
 80010b4:	e0e3      	b.n	800127e <_ZN13MidiInterface14launchCallbackEv+0x282>
			mStopCallback();
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ba:	4798      	blx	r3
		break;
 80010bc:	e0df      	b.n	800127e <_ZN13MidiInterface14launchCallbackEv+0x282>
	case ActiveSensing:
		if (mActiveSensingCallback != 0)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d100      	bne.n	80010c8 <_ZN13MidiInterface14launchCallbackEv+0xcc>
 80010c6:	e0dc      	b.n	8001282 <_ZN13MidiInterface14launchCallbackEv+0x286>
			mActiveSensingCallback();
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4798      	blx	r3
		break;
 80010ce:	e0d8      	b.n	8001282 <_ZN13MidiInterface14launchCallbackEv+0x286>

// Continuous controllers
	case ControlChange:
		if (mControlChangeCallback != 0)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <_ZN13MidiInterface14launchCallbackEv+0xde>
 80010d8:	e0d5      	b.n	8001286 <_ZN13MidiInterface14launchCallbackEv+0x28a>
			mControlChangeCallback(mMessage.channel, mMessage.data1,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	22ad      	movs	r2, #173	; 0xad
 80010e2:	0052      	lsls	r2, r2, #1
 80010e4:	5c88      	ldrb	r0, [r1, r2]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	225c      	movs	r2, #92	; 0x5c
 80010ea:	32ff      	adds	r2, #255	; 0xff
 80010ec:	5c8c      	ldrb	r4, [r1, r2]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	22ae      	movs	r2, #174	; 0xae
 80010f2:	0052      	lsls	r2, r2, #1
 80010f4:	5c8a      	ldrb	r2, [r1, r2]
 80010f6:	0021      	movs	r1, r4
 80010f8:	4798      	blx	r3
					mMessage.data2);
		break;
 80010fa:	e0c4      	b.n	8001286 <_ZN13MidiInterface14launchCallbackEv+0x28a>
	case PitchBend:
		if (mPitchBendCallback != 0)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d100      	bne.n	8001106 <_ZN13MidiInterface14launchCallbackEv+0x10a>
 8001104:	e0c1      	b.n	800128a <_ZN13MidiInterface14launchCallbackEv+0x28e>
			mPitchBendCallback(mMessage.channel,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	22ad      	movs	r2, #173	; 0xad
 800110e:	0052      	lsls	r2, r2, #1
 8001110:	5c8c      	ldrb	r4, [r1, r2]
					(int) ((mMessage.data1 & 0x7f)
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	225c      	movs	r2, #92	; 0x5c
 8001116:	32ff      	adds	r2, #255	; 0xff
 8001118:	5c8a      	ldrb	r2, [r1, r2]
 800111a:	0011      	movs	r1, r2
 800111c:	227f      	movs	r2, #127	; 0x7f
 800111e:	4011      	ands	r1, r2
							| ((mMessage.data2 & 0x7f) << 7))
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	22ae      	movs	r2, #174	; 0xae
 8001124:	0052      	lsls	r2, r2, #1
 8001126:	5c82      	ldrb	r2, [r0, r2]
 8001128:	01d0      	lsls	r0, r2, #7
 800112a:	22fe      	movs	r2, #254	; 0xfe
 800112c:	0192      	lsls	r2, r2, #6
 800112e:	4002      	ands	r2, r0
 8001130:	430a      	orrs	r2, r1
			mPitchBendCallback(mMessage.channel,
 8001132:	4962      	ldr	r1, [pc, #392]	; (80012bc <_ZN13MidiInterface14launchCallbackEv+0x2c0>)
 8001134:	468c      	mov	ip, r1
 8001136:	4462      	add	r2, ip
 8001138:	0011      	movs	r1, r2
 800113a:	0020      	movs	r0, r4
 800113c:	4798      	blx	r3
							+ MIDI_PITCHBEND_MIN);
		break;
 800113e:	e0a4      	b.n	800128a <_ZN13MidiInterface14launchCallbackEv+0x28e>
	case AfterTouchPoly:
		if (mAfterTouchPolyCallback != 0)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d100      	bne.n	800114a <_ZN13MidiInterface14launchCallbackEv+0x14e>
 8001148:	e0a1      	b.n	800128e <_ZN13MidiInterface14launchCallbackEv+0x292>
			mAfterTouchPolyCallback(mMessage.channel, mMessage.data1,
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	22ad      	movs	r2, #173	; 0xad
 8001152:	0052      	lsls	r2, r2, #1
 8001154:	5c88      	ldrb	r0, [r1, r2]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	225c      	movs	r2, #92	; 0x5c
 800115a:	32ff      	adds	r2, #255	; 0xff
 800115c:	5c8c      	ldrb	r4, [r1, r2]
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	22ae      	movs	r2, #174	; 0xae
 8001162:	0052      	lsls	r2, r2, #1
 8001164:	5c8a      	ldrb	r2, [r1, r2]
 8001166:	0021      	movs	r1, r4
 8001168:	4798      	blx	r3
					mMessage.data2);
		break;
 800116a:	e090      	b.n	800128e <_ZN13MidiInterface14launchCallbackEv+0x292>
	case AfterTouchChannel:
		if (mAfterTouchChannelCallback != 0)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d100      	bne.n	8001176 <_ZN13MidiInterface14launchCallbackEv+0x17a>
 8001174:	e08d      	b.n	8001292 <_ZN13MidiInterface14launchCallbackEv+0x296>
			mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	22ad      	movs	r2, #173	; 0xad
 800117e:	0052      	lsls	r2, r2, #1
 8001180:	5c88      	ldrb	r0, [r1, r2]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	225c      	movs	r2, #92	; 0x5c
 8001186:	32ff      	adds	r2, #255	; 0xff
 8001188:	5c8a      	ldrb	r2, [r1, r2]
 800118a:	0011      	movs	r1, r2
 800118c:	4798      	blx	r3
		break;
 800118e:	e080      	b.n	8001292 <_ZN13MidiInterface14launchCallbackEv+0x296>

	case ProgramChange:
		if (mProgramChangeCallback != 0)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d100      	bne.n	800119a <_ZN13MidiInterface14launchCallbackEv+0x19e>
 8001198:	e07d      	b.n	8001296 <_ZN13MidiInterface14launchCallbackEv+0x29a>
			mProgramChangeCallback(mMessage.channel, mMessage.data1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	22ad      	movs	r2, #173	; 0xad
 80011a2:	0052      	lsls	r2, r2, #1
 80011a4:	5c88      	ldrb	r0, [r1, r2]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	225c      	movs	r2, #92	; 0x5c
 80011aa:	32ff      	adds	r2, #255	; 0xff
 80011ac:	5c8a      	ldrb	r2, [r1, r2]
 80011ae:	0011      	movs	r1, r2
 80011b0:	4798      	blx	r3
		break;
 80011b2:	e070      	b.n	8001296 <_ZN13MidiInterface14launchCallbackEv+0x29a>
	case SystemExclusive:
		if (mSystemExclusiveCallback != 0)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d100      	bne.n	80011be <_ZN13MidiInterface14launchCallbackEv+0x1c2>
 80011bc:	e06d      	b.n	800129a <_ZN13MidiInterface14launchCallbackEv+0x29e>
			mSystemExclusiveCallback(mMessage.sysexArray,
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69dc      	ldr	r4, [r3, #28]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	335f      	adds	r3, #95	; 0x5f
 80011c6:	33ff      	adds	r3, #255	; 0xff
 80011c8:	001d      	movs	r5, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3359      	adds	r3, #89	; 0x59
 80011ce:	33ff      	adds	r3, #255	; 0xff
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff f825 	bl	8000220 <_ZN8mMessage12getSysExSizeEv>
 80011d6:	0003      	movs	r3, r0
 80011d8:	0019      	movs	r1, r3
 80011da:	0028      	movs	r0, r5
 80011dc:	47a0      	blx	r4
					mMessage.getSysExSize());
		break;
 80011de:	e05c      	b.n	800129a <_ZN13MidiInterface14launchCallbackEv+0x29e>

// Occasional messages
	case TimeCodeQuarterFrame:
		if (mTimeCodeQuarterFrameCallback != 0)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d05a      	beq.n	800129e <_ZN13MidiInterface14launchCallbackEv+0x2a2>
			mTimeCodeQuarterFrameCallback(mMessage.data1);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	225c      	movs	r2, #92	; 0x5c
 80011f0:	32ff      	adds	r2, #255	; 0xff
 80011f2:	5c8a      	ldrb	r2, [r1, r2]
 80011f4:	0010      	movs	r0, r2
 80011f6:	4798      	blx	r3
		break;
 80011f8:	e051      	b.n	800129e <_ZN13MidiInterface14launchCallbackEv+0x2a2>
	case SongPosition:
		if (mSongPositionCallback != 0)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d04f      	beq.n	80012a2 <_ZN13MidiInterface14launchCallbackEv+0x2a6>
			mSongPositionCallback(
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
					(mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7));
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	225c      	movs	r2, #92	; 0x5c
 800120a:	32ff      	adds	r2, #255	; 0xff
 800120c:	5c8a      	ldrb	r2, [r1, r2]
 800120e:	0011      	movs	r1, r2
 8001210:	227f      	movs	r2, #127	; 0x7f
 8001212:	4011      	ands	r1, r2
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	22ae      	movs	r2, #174	; 0xae
 8001218:	0052      	lsls	r2, r2, #1
 800121a:	5c82      	ldrb	r2, [r0, r2]
 800121c:	01d0      	lsls	r0, r2, #7
 800121e:	22fe      	movs	r2, #254	; 0xfe
 8001220:	0192      	lsls	r2, r2, #6
 8001222:	4002      	ands	r2, r0
 8001224:	430a      	orrs	r2, r1
			mSongPositionCallback(
 8001226:	0010      	movs	r0, r2
 8001228:	4798      	blx	r3
		break;
 800122a:	e03a      	b.n	80012a2 <_ZN13MidiInterface14launchCallbackEv+0x2a6>
	case SongSelect:
		if (mSongSelectCallback != 0)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	2b00      	cmp	r3, #0
 8001232:	d038      	beq.n	80012a6 <_ZN13MidiInterface14launchCallbackEv+0x2aa>
			mSongSelectCallback(mMessage.data1);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	225c      	movs	r2, #92	; 0x5c
 800123c:	32ff      	adds	r2, #255	; 0xff
 800123e:	5c8a      	ldrb	r2, [r1, r2]
 8001240:	0010      	movs	r0, r2
 8001242:	4798      	blx	r3
		break;
 8001244:	e02f      	b.n	80012a6 <_ZN13MidiInterface14launchCallbackEv+0x2aa>
	case TuneRequest:
		if (mTuneRequestCallback != 0)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	2b00      	cmp	r3, #0
 800124c:	d02d      	beq.n	80012aa <_ZN13MidiInterface14launchCallbackEv+0x2ae>
			mTuneRequestCallback();
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	4798      	blx	r3
		break;
 8001254:	e029      	b.n	80012aa <_ZN13MidiInterface14launchCallbackEv+0x2ae>

	case SystemReset:
		if (mSystemResetCallback != 0)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	2b00      	cmp	r3, #0
 800125c:	d027      	beq.n	80012ae <_ZN13MidiInterface14launchCallbackEv+0x2b2>
			mSystemResetCallback();
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4798      	blx	r3
		break;
 8001264:	e023      	b.n	80012ae <_ZN13MidiInterface14launchCallbackEv+0x2b2>

	case InvalidType:
	default:
		break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	e022      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	e020      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	e01e      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	e01c      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	e01a      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	e018      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	e016      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	e014      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	e012      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	e010      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	e00e      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	e00c      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	e00a      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	e008      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	e006      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	e004      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	e002      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	e000      	b.n	80012b0 <_ZN13MidiInterface14launchCallbackEv+0x2b4>
		break;
 80012ae:	46c0      	nop			; (mov r8, r8)
	}
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bdb0      	pop	{r4, r5, r7, pc}
 80012b8:	08004410 	.word	0x08004410
 80012bc:	ffffe000 	.word	0xffffe000

080012c0 <_ZN13MidiInterface10thruFilterEh>:

void MidiInterface::thruFilter(Channel inChannel) {
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	000a      	movs	r2, r1
 80012ca:	1cfb      	adds	r3, r7, #3
 80012cc:	701a      	strb	r2, [r3, #0]
	// If the feature is disabled, don't do anything.
	if (!mThruActivated || (mThruFilterMode == Thru::Off))
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	23aa      	movs	r3, #170	; 0xaa
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	07db      	lsls	r3, r3, #31
 80012d8:	0fdb      	lsrs	r3, r3, #31
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2201      	movs	r2, #1
 80012de:	4053      	eors	r3, r2
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d000      	beq.n	80012e8 <_ZN13MidiInterface10thruFilterEh+0x28>
 80012e6:	e0de      	b.n	80014a6 <_ZN13MidiInterface10thruFilterEh+0x1e6>
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	23aa      	movs	r3, #170	; 0xaa
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	5cd3      	ldrb	r3, [r2, r3]
 80012f0:	2201      	movs	r2, #1
 80012f2:	4393      	bics	r3, r2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d100      	bne.n	80012fc <_ZN13MidiInterface10thruFilterEh+0x3c>
 80012fa:	e0d4      	b.n	80014a6 <_ZN13MidiInterface10thruFilterEh+0x1e6>
		return;

	// First, check if the received message is Channel
	if (mMessage.type >= NoteOff && mMessage.type <= PitchBend) {
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	235a      	movs	r3, #90	; 0x5a
 8001300:	33ff      	adds	r3, #255	; 0xff
 8001302:	5cd3      	ldrb	r3, [r2, r3]
 8001304:	b25b      	sxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	db00      	blt.n	800130c <_ZN13MidiInterface10thruFilterEh+0x4c>
 800130a:	e07c      	b.n	8001406 <_ZN13MidiInterface10thruFilterEh+0x146>
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	235a      	movs	r3, #90	; 0x5a
 8001310:	33ff      	adds	r3, #255	; 0xff
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	2be0      	cmp	r3, #224	; 0xe0
 8001316:	d900      	bls.n	800131a <_ZN13MidiInterface10thruFilterEh+0x5a>
 8001318:	e075      	b.n	8001406 <_ZN13MidiInterface10thruFilterEh+0x146>
		bool filter_condition = ((mMessage.channel == inChannel)
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	23ad      	movs	r3, #173	; 0xad
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	5cd3      	ldrb	r3, [r2, r3]
				|| (inChannel == MIDI_CHANNEL_OMNI));
 8001322:	1cfa      	adds	r2, r7, #3
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d003      	beq.n	8001332 <_ZN13MidiInterface10thruFilterEh+0x72>
 800132a:	1cfb      	adds	r3, r7, #3
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <_ZN13MidiInterface10thruFilterEh+0x76>
 8001332:	2201      	movs	r2, #1
 8001334:	e000      	b.n	8001338 <_ZN13MidiInterface10thruFilterEh+0x78>
 8001336:	2200      	movs	r2, #0
		bool filter_condition = ((mMessage.channel == inChannel)
 8001338:	230f      	movs	r3, #15
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	701a      	strb	r2, [r3, #0]

		// Now let's pass it to the output
		switch (mThruFilterMode) {
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	23aa      	movs	r3, #170	; 0xaa
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	5cd3      	ldrb	r3, [r2, r3]
 8001346:	061b      	lsls	r3, r3, #24
 8001348:	0e5b      	lsrs	r3, r3, #25
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d01b      	beq.n	8001388 <_ZN13MidiInterface10thruFilterEh+0xc8>
 8001350:	2b03      	cmp	r3, #3
 8001352:	d035      	beq.n	80013c0 <_ZN13MidiInterface10thruFilterEh+0x100>
 8001354:	2b01      	cmp	r3, #1
 8001356:	d000      	beq.n	800135a <_ZN13MidiInterface10thruFilterEh+0x9a>
						mMessage.channel);
			}
			break;

		default:
			break;
 8001358:	e054      	b.n	8001404 <_ZN13MidiInterface10thruFilterEh+0x144>
			send(mMessage.type, mMessage.data1, mMessage.data2,
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	235a      	movs	r3, #90	; 0x5a
 800135e:	33ff      	adds	r3, #255	; 0xff
 8001360:	5cd1      	ldrb	r1, [r2, r3]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	235c      	movs	r3, #92	; 0x5c
 8001366:	33ff      	adds	r3, #255	; 0xff
 8001368:	5cd4      	ldrb	r4, [r2, r3]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	23ae      	movs	r3, #174	; 0xae
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	5cd5      	ldrb	r5, [r2, r3]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	23ad      	movs	r3, #173	; 0xad
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	002b      	movs	r3, r5
 8001380:	0022      	movs	r2, r4
 8001382:	f7ff f887 	bl	8000494 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 8001386:	e03d      	b.n	8001404 <_ZN13MidiInterface10thruFilterEh+0x144>
			if (filter_condition) {
 8001388:	230f      	movs	r3, #15
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d035      	beq.n	80013fe <_ZN13MidiInterface10thruFilterEh+0x13e>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	235a      	movs	r3, #90	; 0x5a
 8001396:	33ff      	adds	r3, #255	; 0xff
 8001398:	5cd1      	ldrb	r1, [r2, r3]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	235c      	movs	r3, #92	; 0x5c
 800139e:	33ff      	adds	r3, #255	; 0xff
 80013a0:	5cd4      	ldrb	r4, [r2, r3]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	23ae      	movs	r3, #174	; 0xae
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	5cd5      	ldrb	r5, [r2, r3]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	23ad      	movs	r3, #173	; 0xad
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	002b      	movs	r3, r5
 80013b8:	0022      	movs	r2, r4
 80013ba:	f7ff f86b 	bl	8000494 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 80013be:	e01e      	b.n	80013fe <_ZN13MidiInterface10thruFilterEh+0x13e>
			if (!filter_condition) {
 80013c0:	230f      	movs	r3, #15
 80013c2:	18fb      	adds	r3, r7, r3
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2201      	movs	r2, #1
 80013c8:	4053      	eors	r3, r2
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d018      	beq.n	8001402 <_ZN13MidiInterface10thruFilterEh+0x142>
				send(mMessage.type, mMessage.data1, mMessage.data2,
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	235a      	movs	r3, #90	; 0x5a
 80013d4:	33ff      	adds	r3, #255	; 0xff
 80013d6:	5cd1      	ldrb	r1, [r2, r3]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	235c      	movs	r3, #92	; 0x5c
 80013dc:	33ff      	adds	r3, #255	; 0xff
 80013de:	5cd4      	ldrb	r4, [r2, r3]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	23ae      	movs	r3, #174	; 0xae
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	5cd5      	ldrb	r5, [r2, r3]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	23ad      	movs	r3, #173	; 0xad
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	002b      	movs	r3, r5
 80013f6:	0022      	movs	r2, r4
 80013f8:	f7ff f84c 	bl	8000494 <_ZN13MidiInterface4sendE8MidiTypehhh>
			break;
 80013fc:	e001      	b.n	8001402 <_ZN13MidiInterface10thruFilterEh+0x142>
			break;
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	e054      	b.n	80014ac <_ZN13MidiInterface10thruFilterEh+0x1ec>
			break;
 8001402:	46c0      	nop			; (mov r8, r8)
		}
 8001404:	e052      	b.n	80014ac <_ZN13MidiInterface10thruFilterEh+0x1ec>
	} else {
		// Send the message to the output
		switch (mMessage.type) {
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	235a      	movs	r3, #90	; 0x5a
 800140a:	33ff      	adds	r3, #255	; 0xff
 800140c:	5cd3      	ldrb	r3, [r2, r3]
 800140e:	3bf0      	subs	r3, #240	; 0xf0
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d84a      	bhi.n	80014aa <_ZN13MidiInterface10thruFilterEh+0x1ea>
 8001414:	009a      	lsls	r2, r3, #2
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <_ZN13MidiInterface10thruFilterEh+0x1f4>)
 8001418:	18d3      	adds	r3, r2, r3
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	469f      	mov	pc, r3
		case Stop:
		case Continue:
		case ActiveSensing:
		case SystemReset:
		case TuneRequest:
			sendRealTime(mMessage.type);
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	235a      	movs	r3, #90	; 0x5a
 8001422:	33ff      	adds	r3, #255	; 0xff
 8001424:	5cd2      	ldrb	r2, [r2, r3]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	0011      	movs	r1, r2
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff f9ce 	bl	80007cc <_ZN13MidiInterface12sendRealTimeE8MidiType>
			break;
 8001430:	e03c      	b.n	80014ac <_ZN13MidiInterface10thruFilterEh+0x1ec>

		case SystemExclusive:
			// Send SysEx (0xf0 and 0xf7 are included in the buffer)
			sendSysEx(getSysExArrayLength(), getSysExArray(), true);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff fd47 	bl	8000ec8 <_ZN13MidiInterface19getSysExArrayLengthEv>
 800143a:	0003      	movs	r3, r0
 800143c:	b2dc      	uxtb	r4, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff fd36 	bl	8000eb2 <_ZN13MidiInterface13getSysExArrayEv>
 8001446:	0002      	movs	r2, r0
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	2301      	movs	r3, #1
 800144c:	0021      	movs	r1, r4
 800144e:	f7ff f8b6 	bl	80005be <_ZN13MidiInterface9sendSysExEhPhb>
			break;
 8001452:	e02b      	b.n	80014ac <_ZN13MidiInterface10thruFilterEh+0x1ec>

		case SongSelect:
			sendSongSelect(mMessage.data1);
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	235c      	movs	r3, #92	; 0x5c
 8001458:	33ff      	adds	r3, #255	; 0xff
 800145a:	5cd2      	ldrb	r2, [r2, r3]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	0011      	movs	r1, r2
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff f986 	bl	8000772 <_ZN13MidiInterface14sendSongSelectEh>
			break;
 8001466:	e021      	b.n	80014ac <_ZN13MidiInterface10thruFilterEh+0x1ec>

		case SongPosition:
			sendSongPosition(mMessage.data1 | ((unsigned) mMessage.data2 << 7));
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	235c      	movs	r3, #92	; 0x5c
 800146c:	33ff      	adds	r3, #255	; 0xff
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	0019      	movs	r1, r3
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	23ae      	movs	r3, #174	; 0xae
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	01db      	lsls	r3, r3, #7
 800147c:	000a      	movs	r2, r1
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	0011      	movs	r1, r2
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff f93c 	bl	8000702 <_ZN13MidiInterface16sendSongPositionEj>
			break;
 800148a:	e00f      	b.n	80014ac <_ZN13MidiInterface10thruFilterEh+0x1ec>

		case TimeCodeQuarterFrame:
			sendTimeCodeQuarterFrame(mMessage.data1, mMessage.data2);
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	235c      	movs	r3, #92	; 0x5c
 8001490:	33ff      	adds	r3, #255	; 0xff
 8001492:	5cd1      	ldrb	r1, [r2, r3]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	23ae      	movs	r3, #174	; 0xae
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	5cd2      	ldrb	r2, [r2, r3]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	0018      	movs	r0, r3
 80014a0:	f7ff f8dd 	bl	800065e <_ZN13MidiInterface24sendTimeCodeQuarterFrameEhh>
			break;
 80014a4:	e002      	b.n	80014ac <_ZN13MidiInterface10thruFilterEh+0x1ec>
		return;
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	e000      	b.n	80014ac <_ZN13MidiInterface10thruFilterEh+0x1ec>

		default:
			break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
 80014aa:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b004      	add	sp, #16
 80014b0:	bdb0      	pop	{r4, r5, r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	08004610 	.word	0x08004610

080014b8 <_Z12Handle_Clockv>:
 */

#include "MidiHandlers.h"
#include "stm32f0xx_hal.h"
int i;
void Handle_Clock() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	i++;
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <_Z12Handle_Clockv+0x34>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <_Z12Handle_Clockv+0x34>)
 80014c4:	601a      	str	r2, [r3, #0]
	if (i / 12 == 1) {
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <_Z12Handle_Clockv+0x34>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	3b0c      	subs	r3, #12
 80014cc:	2b0b      	cmp	r3, #11
 80014ce:	d809      	bhi.n	80014e4 <_Z12Handle_Clockv+0x2c>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <_Z12Handle_Clockv+0x38>)
 80014d6:	0019      	movs	r1, r3
 80014d8:	0010      	movs	r0, r2
 80014da:	f000 ffcc 	bl	8002476 <HAL_GPIO_TogglePin>
		i = 0;
 80014de:	4b03      	ldr	r3, [pc, #12]	; (80014ec <_Z12Handle_Clockv+0x34>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
	}
}
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	20000028 	.word	0x20000028
 80014f0:	48000800 	.word	0x48000800

080014f4 <_Z12Handle_Startv>:

void Handle_Start() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	i = 0;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <_Z12Handle_Startv+0x2c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PinState::GPIO_PIN_SET);
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4808      	ldr	r0, [pc, #32]	; (8001524 <_Z12Handle_Startv+0x30>)
 8001504:	2201      	movs	r2, #1
 8001506:	0019      	movs	r1, r3
 8001508:	f000 ff98 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PinState::GPIO_PIN_SET);
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <_Z12Handle_Startv+0x30>)
 800150e:	2201      	movs	r2, #1
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	0018      	movs	r0, r3
 8001514:	f000 ff92 	bl	800243c <HAL_GPIO_WritePin>
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	20000028 	.word	0x20000028
 8001524:	48000800 	.word	0x48000800

08001528 <_Z11Handle_Stopv>:
void Handle_Stop() {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PinState::GPIO_PIN_RESET);
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4806      	ldr	r0, [pc, #24]	; (800154c <_Z11Handle_Stopv+0x24>)
 8001532:	2200      	movs	r2, #0
 8001534:	0019      	movs	r1, r3
 8001536:	f000 ff81 	bl	800243c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PinState::GPIO_PIN_RESET);
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <_Z11Handle_Stopv+0x24>)
 800153c:	2200      	movs	r2, #0
 800153e:	2180      	movs	r1, #128	; 0x80
 8001540:	0018      	movs	r0, r3
 8001542:	f000 ff7b 	bl	800243c <HAL_GPIO_WritePin>
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	48000800 	.word	0x48000800

08001550 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001554:	f000 fc72 	bl	8001e3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001558:	f000 f832 	bl	80015c0 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800155c:	f000 f990 	bl	8001880 <_ZL12MX_GPIO_Initv>
	MX_I2C2_Init();
 8001560:	f000 f882 	bl	8001668 <_ZL12MX_I2C2_Initv>
	MX_SPI2_Init();
 8001564:	f000 f8cc 	bl	8001700 <_ZL12MX_SPI2_Initv>
	MX_TSC_Init();
 8001568:	f000 f90c 	bl	8001784 <_ZL11MX_TSC_Initv>
	MX_USART3_UART_Init();
 800156c:	f000 f952 	bl	8001814 <_ZL19MX_USART3_UART_Initv>
	/* USER CODE BEGIN 2 */
	/*Specify MIDI port input channel and in/out port*/
	Port.begin(1, &huart3, &huart3);
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <main+0x5c>)
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <main+0x5c>)
 8001574:	480e      	ldr	r0, [pc, #56]	; (80015b0 <main+0x60>)
 8001576:	2101      	movs	r1, #1
 8001578:	f7fe ff68 	bl	800044c <_ZN13MidiInterface5beginEhP20__UART_HandleTypeDefS1_>
	/*Set Callbacks*/
	Port.setHandleClock(Handle_Clock);
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <main+0x64>)
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <main+0x60>)
 8001580:	0011      	movs	r1, r2
 8001582:	0018      	movs	r0, r3
 8001584:	f7ff fd16 	bl	8000fb4 <_ZN13MidiInterface14setHandleClockEPFvvE>

	Port.setHandleStart(Handle_Start);
 8001588:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <main+0x68>)
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <main+0x60>)
 800158c:	0011      	movs	r1, r2
 800158e:	0018      	movs	r0, r3
 8001590:	f7ff fd1c 	bl	8000fcc <_ZN13MidiInterface14setHandleStartEPFvvE>

	Port.setHandleStop(Handle_Stop);
 8001594:	4a09      	ldr	r2, [pc, #36]	; (80015bc <main+0x6c>)
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <main+0x60>)
 8001598:	0011      	movs	r1, r2
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff fd22 	bl	8000fe4 <_ZN13MidiInterface13setHandleStopEPFvvE>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Port.read();
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <main+0x60>)
 80015a2:	0018      	movs	r0, r3
 80015a4:	f7ff f952 	bl	800084c <_ZN13MidiInterface4readEv>
 80015a8:	e7fa      	b.n	80015a0 <main+0x50>
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	20000120 	.word	0x20000120
 80015b0:	200001a0 	.word	0x200001a0
 80015b4:	080014b9 	.word	0x080014b9
 80015b8:	080014f5 	.word	0x080014f5
 80015bc:	08001529 	.word	0x08001529

080015c0 <_Z18SystemClock_Configv>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b093      	sub	sp, #76	; 0x4c
 80015c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015c6:	2414      	movs	r4, #20
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	0018      	movs	r0, r3
 80015cc:	2334      	movs	r3, #52	; 0x34
 80015ce:	001a      	movs	r2, r3
 80015d0:	2100      	movs	r1, #0
 80015d2:	f002 fdd6 	bl	8004182 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	0018      	movs	r0, r3
 80015da:	2310      	movs	r3, #16
 80015dc:	001a      	movs	r2, r3
 80015de:	2100      	movs	r1, #0
 80015e0:	f002 fdcf 	bl	8004182 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015e4:	0021      	movs	r1, r4
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2202      	movs	r2, #2
 80015ea:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	2201      	movs	r2, #1
 80015f0:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	2210      	movs	r2, #16
 80015f6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	2202      	movs	r2, #2
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	0212      	lsls	r2, r2, #8
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001606:	187b      	adds	r3, r7, r1
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	0352      	lsls	r2, r2, #13
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001614:	187b      	adds	r3, r7, r1
 8001616:	0018      	movs	r0, r3
 8001618:	f001 f876 	bl	8002708 <HAL_RCC_OscConfig>
 800161c:	0003      	movs	r3, r0
 800161e:	1e5a      	subs	r2, r3, #1
 8001620:	4193      	sbcs	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <_Z18SystemClock_Configv+0x6c>
		Error_Handler();
 8001628:	f000 f9ba 	bl	80019a0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2207      	movs	r2, #7
 8001630:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2202      	movs	r2, #2
 8001636:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2101      	movs	r1, #1
 8001648:	0018      	movs	r0, r3
 800164a:	f001 fbe3 	bl	8002e14 <HAL_RCC_ClockConfig>
 800164e:	0003      	movs	r3, r0
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	4193      	sbcs	r3, r2
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <_Z18SystemClock_Configv+0x9e>
		Error_Handler();
 800165a:	f000 f9a1 	bl	80019a0 <Error_Handler>
	}
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b013      	add	sp, #76	; 0x4c
 8001664:	bd90      	pop	{r4, r7, pc}
	...

08001668 <_ZL12MX_I2C2_Initv>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <_ZL12MX_I2C2_Initv+0x8c>)
 800166e:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <_ZL12MX_I2C2_Initv+0x90>)
 8001670:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <_ZL12MX_I2C2_Initv+0x8c>)
 8001674:	4a21      	ldr	r2, [pc, #132]	; (80016fc <_ZL12MX_I2C2_Initv+0x94>)
 8001676:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <_ZL12MX_I2C2_Initv+0x8c>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <_ZL12MX_I2C2_Initv+0x8c>)
 8001680:	2201      	movs	r2, #1
 8001682:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <_ZL12MX_I2C2_Initv+0x8c>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <_ZL12MX_I2C2_Initv+0x8c>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <_ZL12MX_I2C2_Initv+0x8c>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <_ZL12MX_I2C2_Initv+0x8c>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <_ZL12MX_I2C2_Initv+0x8c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <_ZL12MX_I2C2_Initv+0x8c>)
 80016a4:	0018      	movs	r0, r3
 80016a6:	f000 ff01 	bl	80024ac <HAL_I2C_Init>
 80016aa:	0003      	movs	r3, r0
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	4193      	sbcs	r3, r2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <_ZL12MX_I2C2_Initv+0x52>
		Error_Handler();
 80016b6:	f000 f973 	bl	80019a0 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <_ZL12MX_I2C2_Initv+0x8c>)
 80016bc:	2100      	movs	r1, #0
 80016be:	0018      	movs	r0, r3
 80016c0:	f000 ff8a 	bl	80025d8 <HAL_I2CEx_ConfigAnalogFilter>
 80016c4:	0003      	movs	r3, r0
			!= HAL_OK) {
 80016c6:	1e5a      	subs	r2, r3, #1
 80016c8:	4193      	sbcs	r3, r2
 80016ca:	b2db      	uxtb	r3, r3
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <_ZL12MX_I2C2_Initv+0x6c>
		Error_Handler();
 80016d0:	f000 f966 	bl	80019a0 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <_ZL12MX_I2C2_Initv+0x8c>)
 80016d6:	2100      	movs	r1, #0
 80016d8:	0018      	movs	r0, r3
 80016da:	f000 ffc9 	bl	8002670 <HAL_I2CEx_ConfigDigitalFilter>
 80016de:	0003      	movs	r3, r0
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	4193      	sbcs	r3, r2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <_ZL12MX_I2C2_Initv+0x86>
		Error_Handler();
 80016ea:	f000 f959 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000002c 	.word	0x2000002c
 80016f8:	40005800 	.word	0x40005800
 80016fc:	20303e5d 	.word	0x20303e5d

08001700 <_ZL12MX_SPI2_Initv>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 8001706:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <_ZL12MX_SPI2_Initv+0x80>)
 8001708:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 800170c:	2282      	movs	r2, #130	; 0x82
 800170e:	0052      	lsls	r2, r2, #1
 8001710:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 800171a:	22c0      	movs	r2, #192	; 0xc0
 800171c:	0092      	lsls	r2, r2, #2
 800171e:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 8001736:	2208      	movs	r2, #8
 8001738:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 800174e:	2207      	movs	r2, #7
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 8001754:	2200      	movs	r2, #0
 8001756:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 800175a:	2208      	movs	r2, #8
 800175c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_ZL12MX_SPI2_Initv+0x7c>)
 8001760:	0018      	movs	r0, r3
 8001762:	f001 fccf 	bl	8003104 <HAL_SPI_Init>
 8001766:	0003      	movs	r3, r0
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	4193      	sbcs	r3, r2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <_ZL12MX_SPI2_Initv+0x76>
		Error_Handler();
 8001772:	f000 f915 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000078 	.word	0x20000078
 8001780:	40003800 	.word	0x40003800

08001784 <_ZL11MX_TSC_Initv>:
/**
 * @brief TSC Initialization Function
 * @param None
 * @retval None
 */
static void MX_TSC_Init(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TSC_Init 1 */

	/* USER CODE END TSC_Init 1 */
	/** Configure the TSC peripheral
	 */
	htsc.Instance = TSC;
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 800178a:	4a21      	ldr	r2, [pc, #132]	; (8001810 <_ZL11MX_TSC_Initv+0x8c>)
 800178c:	601a      	str	r2, [r3, #0]
	htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	0552      	lsls	r2, r2, #21
 8001794:	605a      	str	r2, [r3, #4]
	htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	0452      	lsls	r2, r2, #17
 800179c:	609a      	str	r2, [r3, #8]
	htsc.Init.SpreadSpectrum = DISABLE;
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	731a      	strb	r2, [r3, #12]
	htsc.Init.SpreadSpectrumDeviation = 1;
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	611a      	str	r2, [r3, #16]
	htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
	htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	0192      	lsls	r2, r2, #6
 80017b6:	619a      	str	r2, [r3, #24]
	htsc.Init.MaxCountValue = TSC_MCV_8191;
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017ba:	22a0      	movs	r2, #160	; 0xa0
 80017bc:	61da      	str	r2, [r3, #28]
	htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
	htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
	htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
	htsc.Init.MaxCountInterrupt = DISABLE;
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017d2:	222c      	movs	r2, #44	; 0x2c
 80017d4:	2100      	movs	r1, #0
 80017d6:	5499      	strb	r1, [r3, r2]
	htsc.Init.ChannelIOs = TSC_GROUP1_IO3 | TSC_GROUP2_IO3 | TSC_GROUP3_IO2;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017da:	2291      	movs	r2, #145	; 0x91
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
	htsc.Init.ShieldIOs = 0;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
	htsc.Init.SamplingIOs = TSC_GROUP1_IO4 | TSC_GROUP2_IO4 | TSC_GROUP3_IO3;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017e8:	2291      	movs	r2, #145	; 0x91
 80017ea:	00d2      	lsls	r2, r2, #3
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_TSC_Init(&htsc) != HAL_OK) {
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <_ZL11MX_TSC_Initv+0x88>)
 80017f0:	0018      	movs	r0, r3
 80017f2:	f001 fd21 	bl	8003238 <HAL_TSC_Init>
 80017f6:	0003      	movs	r3, r0
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	4193      	sbcs	r3, r2
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <_ZL11MX_TSC_Initv+0x82>
		Error_Handler();
 8001802:	f000 f8cd 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN TSC_Init 2 */

	/* USER CODE END TSC_Init 2 */

}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200000dc 	.word	0x200000dc
 8001810:	40024000 	.word	0x40024000

08001814 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <_ZL19MX_USART3_UART_Initv+0x60>)
 800181a:	4a17      	ldr	r2, [pc, #92]	; (8001878 <_ZL19MX_USART3_UART_Initv+0x64>)
 800181c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 31250;
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001820:	4a16      	ldr	r2, [pc, #88]	; (800187c <_ZL19MX_USART3_UART_Initv+0x68>)
 8001822:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <_ZL19MX_USART3_UART_Initv+0x60>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001830:	4b10      	ldr	r3, [pc, #64]	; (8001874 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_RX;
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001838:	2204      	movs	r2, #4
 800183a:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <_ZL19MX_USART3_UART_Initv+0x60>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001844:	2200      	movs	r2, #0
 8001846:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <_ZL19MX_USART3_UART_Initv+0x60>)
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001850:	2200      	movs	r2, #0
 8001852:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001856:	0018      	movs	r0, r3
 8001858:	f001 fd94 	bl	8003384 <HAL_UART_Init>
 800185c:	0003      	movs	r3, r0
 800185e:	1e5a      	subs	r2, r3, #1
 8001860:	4193      	sbcs	r3, r2
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <_ZL19MX_USART3_UART_Initv+0x58>
		Error_Handler();
 8001868:	f000 f89a 	bl	80019a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	20000120 	.word	0x20000120
 8001878:	40004800 	.word	0x40004800
 800187c:	00007a12 	.word	0x00007a12

08001880 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001886:	240c      	movs	r4, #12
 8001888:	193b      	adds	r3, r7, r4
 800188a:	0018      	movs	r0, r3
 800188c:	2314      	movs	r3, #20
 800188e:	001a      	movs	r2, r3
 8001890:	2100      	movs	r1, #0
 8001892:	f002 fc76 	bl	8004182 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	4b3e      	ldr	r3, [pc, #248]	; (8001990 <_ZL12MX_GPIO_Initv+0x110>)
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <_ZL12MX_GPIO_Initv+0x110>)
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	0309      	lsls	r1, r1, #12
 80018a0:	430a      	orrs	r2, r1
 80018a2:	615a      	str	r2, [r3, #20]
 80018a4:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <_ZL12MX_GPIO_Initv+0x110>)
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	031b      	lsls	r3, r3, #12
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <_ZL12MX_GPIO_Initv+0x110>)
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <_ZL12MX_GPIO_Initv+0x110>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0289      	lsls	r1, r1, #10
 80018bc:	430a      	orrs	r2, r1
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	4b33      	ldr	r3, [pc, #204]	; (8001990 <_ZL12MX_GPIO_Initv+0x110>)
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	4013      	ands	r3, r2
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <_ZL12MX_GPIO_Initv+0x110>)
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <_ZL12MX_GPIO_Initv+0x110>)
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	02c9      	lsls	r1, r1, #11
 80018d8:	430a      	orrs	r2, r1
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <_ZL12MX_GPIO_Initv+0x110>)
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	02db      	lsls	r3, r3, #11
 80018e4:	4013      	ands	r3, r2
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80018ea:	492a      	ldr	r1, [pc, #168]	; (8001994 <_ZL12MX_GPIO_Initv+0x114>)
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <_ZL12MX_GPIO_Initv+0x118>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	0018      	movs	r0, r3
 80018f2:	f000 fda3 	bl	800243c <HAL_GPIO_WritePin>
	NCS_MEMS_SPI_Pin | EXT_RESET_Pin | LD3_Pin | LD6_Pin | LD4_Pin | LD5_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
	 LD4_Pin LD5_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | EXT_RESET_Pin | LD3_Pin | LD6_Pin
 80018f6:	0021      	movs	r1, r4
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	4a26      	ldr	r2, [pc, #152]	; (8001994 <_ZL12MX_GPIO_Initv+0x114>)
 80018fc:	601a      	str	r2, [r3, #0]
			| LD4_Pin | LD5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	2201      	movs	r2, #1
 8001902:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	187b      	adds	r3, r7, r1
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001910:	000c      	movs	r4, r1
 8001912:	187b      	adds	r3, r7, r1
 8001914:	4a20      	ldr	r2, [pc, #128]	; (8001998 <_ZL12MX_GPIO_Initv+0x118>)
 8001916:	0019      	movs	r1, r3
 8001918:	0010      	movs	r0, r2
 800191a:	f000 fc17 	bl	800214c <HAL_GPIO_Init>

	/*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT1_Pin | MEMS_INT2_Pin;
 800191e:	0021      	movs	r1, r4
 8001920:	187b      	adds	r3, r7, r1
 8001922:	2206      	movs	r2, #6
 8001924:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001926:	187b      	adds	r3, r7, r1
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <_ZL12MX_GPIO_Initv+0x11c>)
 800192a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	187b      	adds	r3, r7, r1
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001932:	000c      	movs	r4, r1
 8001934:	187b      	adds	r3, r7, r1
 8001936:	4a18      	ldr	r2, [pc, #96]	; (8001998 <_ZL12MX_GPIO_Initv+0x118>)
 8001938:	0019      	movs	r1, r3
 800193a:	0010      	movs	r0, r2
 800193c:	f000 fc06 	bl	800214c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001940:	0021      	movs	r1, r4
 8001942:	187b      	adds	r3, r7, r1
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001948:	187b      	adds	r3, r7, r1
 800194a:	4a14      	ldr	r2, [pc, #80]	; (800199c <_ZL12MX_GPIO_Initv+0x11c>)
 800194c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	187b      	adds	r3, r7, r1
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001954:	000c      	movs	r4, r1
 8001956:	187a      	adds	r2, r7, r1
 8001958:	2390      	movs	r3, #144	; 0x90
 800195a:	05db      	lsls	r3, r3, #23
 800195c:	0011      	movs	r1, r2
 800195e:	0018      	movs	r0, r3
 8001960:	f000 fbf4 	bl	800214c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001964:	0021      	movs	r1, r4
 8001966:	187b      	adds	r3, r7, r1
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	0152      	lsls	r2, r2, #5
 800196c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196e:	187b      	adds	r3, r7, r1
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197a:	187b      	adds	r3, r7, r1
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <_ZL12MX_GPIO_Initv+0x118>)
 800197e:	0019      	movs	r1, r3
 8001980:	0010      	movs	r0, r2
 8001982:	f000 fbe3 	bl	800214c <HAL_GPIO_Init>

}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b009      	add	sp, #36	; 0x24
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	40021000 	.word	0x40021000
 8001994:	000003e1 	.word	0x000003e1
 8001998:	48000800 	.word	0x48000800
 800199c:	10120000 	.word	0x10120000

080019a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <_Z41__static_initialization_and_destruction_0ii>:
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d107      	bne.n	80019cc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d103      	bne.n	80019cc <_Z41__static_initialization_and_destruction_0ii+0x20>
MidiInterface Port;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80019c6:	0018      	movs	r0, r3
 80019c8:	f7fe fc6a 	bl	80002a0 <_ZN13MidiInterfaceC1Ev>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	4a05      	ldr	r2, [pc, #20]	; (80019ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d103      	bne.n	80019e2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80019dc:	0018      	movs	r0, r3
 80019de:	f7fe fd2c 	bl	800043a <_ZN13MidiInterfaceD1Ev>
}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b002      	add	sp, #8
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	0000ffff 	.word	0x0000ffff
 80019f0:	200001a0 	.word	0x200001a0

080019f4 <_GLOBAL__sub_I_hi2c2>:
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <_GLOBAL__sub_I_hi2c2+0x14>)
 80019fa:	0019      	movs	r1, r3
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7ff ffd5 	bl	80019ac <_Z41__static_initialization_and_destruction_0ii>
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	0000ffff 	.word	0x0000ffff

08001a0c <_GLOBAL__sub_D_hi2c2>:
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <_GLOBAL__sub_D_hi2c2+0x14>)
 8001a12:	0019      	movs	r1, r3
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff ffc9 	bl	80019ac <_Z41__static_initialization_and_destruction_0ii>
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	0000ffff 	.word	0x0000ffff

08001a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_MspInit+0x44>)
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_MspInit+0x44>)
 8001a30:	2101      	movs	r1, #1
 8001a32:	430a      	orrs	r2, r1
 8001a34:	619a      	str	r2, [r3, #24]
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_MspInit+0x44>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_MspInit+0x44>)
 8001a44:	69da      	ldr	r2, [r3, #28]
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_MspInit+0x44>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	0549      	lsls	r1, r1, #21
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	61da      	str	r2, [r3, #28]
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_MspInit+0x44>)
 8001a52:	69da      	ldr	r2, [r3, #28]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	055b      	lsls	r3, r3, #21
 8001a58:	4013      	ands	r3, r2
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b002      	add	sp, #8
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	40021000 	.word	0x40021000

08001a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	2314      	movs	r3, #20
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	0018      	movs	r0, r3
 8001a7a:	2314      	movs	r3, #20
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	2100      	movs	r1, #0
 8001a80:	f002 fb7f 	bl	8004182 <memset>
  if(hi2c->Instance==I2C2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1c      	ldr	r2, [pc, #112]	; (8001afc <HAL_I2C_MspInit+0x90>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d132      	bne.n	8001af4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <HAL_I2C_MspInit+0x94>)
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_I2C_MspInit+0x94>)
 8001a94:	2180      	movs	r1, #128	; 0x80
 8001a96:	02c9      	lsls	r1, r1, #11
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	615a      	str	r2, [r3, #20]
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_I2C_MspInit+0x94>)
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	02db      	lsls	r3, r3, #11
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8001aaa:	2114      	movs	r1, #20
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	22c0      	movs	r2, #192	; 0xc0
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2212      	movs	r2, #18
 8001ab8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	2201      	movs	r2, #1
 8001abe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8001ac6:	187b      	adds	r3, r7, r1
 8001ac8:	2201      	movs	r2, #1
 8001aca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <HAL_I2C_MspInit+0x98>)
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	0010      	movs	r0, r2
 8001ad4:	f000 fb3a 	bl	800214c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_I2C_MspInit+0x94>)
 8001ada:	69da      	ldr	r2, [r3, #28]
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_I2C_MspInit+0x94>)
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	03c9      	lsls	r1, r1, #15
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	61da      	str	r2, [r3, #28]
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_I2C_MspInit+0x94>)
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	03db      	lsls	r3, r3, #15
 8001aee:	4013      	ands	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b00a      	add	sp, #40	; 0x28
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40005800 	.word	0x40005800
 8001b00:	40021000 	.word	0x40021000
 8001b04:	48000400 	.word	0x48000400

08001b08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	2314      	movs	r3, #20
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	0018      	movs	r0, r3
 8001b16:	2314      	movs	r3, #20
 8001b18:	001a      	movs	r2, r3
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	f002 fb31 	bl	8004182 <memset>
  if(hspi->Instance==SPI2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <HAL_SPI_MspInit+0x90>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d132      	bne.n	8001b90 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_SPI_MspInit+0x94>)
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_SPI_MspInit+0x94>)
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	01c9      	lsls	r1, r1, #7
 8001b34:	430a      	orrs	r2, r1
 8001b36:	61da      	str	r2, [r3, #28]
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_SPI_MspInit+0x94>)
 8001b3a:	69da      	ldr	r2, [r3, #28]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	01db      	lsls	r3, r3, #7
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_SPI_MspInit+0x94>)
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_SPI_MspInit+0x94>)
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	02c9      	lsls	r1, r1, #11
 8001b50:	430a      	orrs	r2, r1
 8001b52:	615a      	str	r2, [r3, #20]
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_SPI_MspInit+0x94>)
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	02db      	lsls	r3, r3, #11
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001b62:	2114      	movs	r1, #20
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	22e0      	movs	r2, #224	; 0xe0
 8001b68:	0212      	lsls	r2, r2, #8
 8001b6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	2202      	movs	r2, #2
 8001b70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	187b      	adds	r3, r7, r1
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001b7e:	187b      	adds	r3, r7, r1
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <HAL_SPI_MspInit+0x98>)
 8001b88:	0019      	movs	r1, r3
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	f000 fade 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b00a      	add	sp, #40	; 0x28
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40003800 	.word	0x40003800
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	48000400 	.word	0x48000400

08001ba4 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b08b      	sub	sp, #44	; 0x2c
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	2314      	movs	r3, #20
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	2314      	movs	r3, #20
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	f002 fae3 	bl	8004182 <memset>
  if(htsc->Instance==TSC)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a45      	ldr	r2, [pc, #276]	; (8001cd8 <HAL_TSC_MspInit+0x134>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d000      	beq.n	8001bc8 <HAL_TSC_MspInit+0x24>
 8001bc6:	e083      	b.n	8001cd0 <HAL_TSC_MspInit+0x12c>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <HAL_TSC_MspInit+0x138>)
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <HAL_TSC_MspInit+0x138>)
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	0449      	lsls	r1, r1, #17
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_TSC_MspInit+0x138>)
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	045b      	lsls	r3, r3, #17
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b3d      	ldr	r3, [pc, #244]	; (8001cdc <HAL_TSC_MspInit+0x138>)
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <HAL_TSC_MspInit+0x138>)
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	0289      	lsls	r1, r1, #10
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	615a      	str	r2, [r3, #20]
 8001bf2:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <HAL_TSC_MspInit+0x138>)
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_TSC_MspInit+0x138>)
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_TSC_MspInit+0x138>)
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	02c9      	lsls	r1, r1, #11
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	615a      	str	r2, [r3, #20]
 8001c0e:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <HAL_TSC_MspInit+0x138>)
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	02db      	lsls	r3, r3, #11
 8001c16:	4013      	ands	r3, r2
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001c1c:	2414      	movs	r4, #20
 8001c1e:	193b      	adds	r3, r7, r4
 8001c20:	2244      	movs	r2, #68	; 0x44
 8001c22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	2202      	movs	r2, #2
 8001c28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	193b      	adds	r3, r7, r4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	193b      	adds	r3, r7, r4
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001c36:	193b      	adds	r3, r7, r4
 8001c38:	2203      	movs	r2, #3
 8001c3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	193a      	adds	r2, r7, r4
 8001c3e:	2390      	movs	r3, #144	; 0x90
 8001c40:	05db      	lsls	r3, r3, #23
 8001c42:	0011      	movs	r1, r2
 8001c44:	0018      	movs	r0, r3
 8001c46:	f000 fa81 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8001c4a:	193b      	adds	r3, r7, r4
 8001c4c:	2288      	movs	r2, #136	; 0x88
 8001c4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c50:	193b      	adds	r3, r7, r4
 8001c52:	2212      	movs	r2, #18
 8001c54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	193b      	adds	r3, r7, r4
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001c62:	193b      	adds	r3, r7, r4
 8001c64:	2203      	movs	r2, #3
 8001c66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	193a      	adds	r2, r7, r4
 8001c6a:	2390      	movs	r3, #144	; 0x90
 8001c6c:	05db      	lsls	r3, r3, #23
 8001c6e:	0011      	movs	r1, r2
 8001c70:	0018      	movs	r0, r3
 8001c72:	f000 fa6b 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c76:	0021      	movs	r1, r4
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	2202      	movs	r2, #2
 8001c82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	2203      	movs	r2, #3
 8001c94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	000c      	movs	r4, r1
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_TSC_MspInit+0x13c>)
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	0010      	movs	r0, r2
 8001ca0:	f000 fa54 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ca4:	0021      	movs	r1, r4
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	2202      	movs	r2, #2
 8001caa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	2212      	movs	r2, #18
 8001cb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001cbe:	187b      	adds	r3, r7, r1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	4a06      	ldr	r2, [pc, #24]	; (8001ce0 <HAL_TSC_MspInit+0x13c>)
 8001cc8:	0019      	movs	r1, r3
 8001cca:	0010      	movs	r0, r2
 8001ccc:	f000 fa3e 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b00b      	add	sp, #44	; 0x2c
 8001cd6:	bd90      	pop	{r4, r7, pc}
 8001cd8:	40024000 	.word	0x40024000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	48000400 	.word	0x48000400

08001ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	2314      	movs	r3, #20
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	2314      	movs	r3, #20
 8001cf4:	001a      	movs	r2, r3
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	f002 fa43 	bl	8004182 <memset>
  if(huart->Instance==USART3)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a20      	ldr	r2, [pc, #128]	; (8001d84 <HAL_UART_MspInit+0xa0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d13a      	bne.n	8001d7c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_UART_MspInit+0xa4>)
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <HAL_UART_MspInit+0xa4>)
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	02c9      	lsls	r1, r1, #11
 8001d10:	430a      	orrs	r2, r1
 8001d12:	61da      	str	r2, [r3, #28]
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_UART_MspInit+0xa4>)
 8001d16:	69da      	ldr	r2, [r3, #28]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	02db      	lsls	r3, r3, #11
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_UART_MspInit+0xa4>)
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <HAL_UART_MspInit+0xa4>)
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	0309      	lsls	r1, r1, #12
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	615a      	str	r2, [r3, #20]
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_UART_MspInit+0xa4>)
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	031b      	lsls	r3, r3, #12
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC4     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8001d3e:	2114      	movs	r1, #20
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	2281      	movs	r2, #129	; 0x81
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	2203      	movs	r2, #3
 8001d58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_UART_MspInit+0xa8>)
 8001d64:	0019      	movs	r1, r3
 8001d66:	0010      	movs	r0, r2
 8001d68:	f000 f9f0 	bl	800214c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	201d      	movs	r0, #29
 8001d72:	f000 f973 	bl	800205c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001d76:	201d      	movs	r0, #29
 8001d78:	f000 f985 	bl	8002086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b00a      	add	sp, #40	; 0x28
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40004800 	.word	0x40004800
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48000800 	.word	0x48000800

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <HardFault_Handler+0x4>

08001da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db8:	f000 f888 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <USART3_4_IRQHandler+0x14>)
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f001 fcc2 	bl	8003754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	20000120 	.word	0x20000120

08001ddc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001de8:	480d      	ldr	r0, [pc, #52]	; (8001e20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dec:	480d      	ldr	r0, [pc, #52]	; (8001e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dee:	490e      	ldr	r1, [pc, #56]	; (8001e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <LoopForever+0xe>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df4:	e002      	b.n	8001dfc <LoopCopyDataInit>

08001df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfa:	3304      	adds	r3, #4

08001dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e00:	d3f9      	bcc.n	8001df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e04:	4c0b      	ldr	r4, [pc, #44]	; (8001e34 <LoopForever+0x16>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e08:	e001      	b.n	8001e0e <LoopFillZerobss>

08001e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e0c:	3204      	adds	r2, #4

08001e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e10:	d3fb      	bcc.n	8001e0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e12:	f7ff ffe3 	bl	8001ddc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001e16:	f002 f987 	bl	8004128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e1a:	f7ff fb99 	bl	8001550 <main>

08001e1e <LoopForever>:

LoopForever:
    b LoopForever
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
  ldr   r0, =_estack
 8001e20:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e2c:	08004678 	.word	0x08004678
  ldr r2, =_sbss
 8001e30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e34:	20000304 	.word	0x20000304

08001e38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_COMP_IRQHandler>
	...

08001e3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_Init+0x24>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_Init+0x24>)
 8001e46:	2110      	movs	r1, #16
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f000 f809 	bl	8001e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e52:	f7ff fde7 	bl	8001a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	40022000 	.word	0x40022000

08001e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_InitTick+0x5c>)
 8001e6e:	681c      	ldr	r4, [r3, #0]
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_InitTick+0x60>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	0019      	movs	r1, r3
 8001e76:	23fa      	movs	r3, #250	; 0xfa
 8001e78:	0098      	lsls	r0, r3, #2
 8001e7a:	f7fe f945 	bl	8000108 <__udivsi3>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	0019      	movs	r1, r3
 8001e82:	0020      	movs	r0, r4
 8001e84:	f7fe f940 	bl	8000108 <__udivsi3>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 f90b 	bl	80020a6 <HAL_SYSTICK_Config>
 8001e90:	1e03      	subs	r3, r0, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e00f      	b.n	8001eb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d80b      	bhi.n	8001eb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	425b      	negs	r3, r3
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 f8d8 	bl	800205c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_InitTick+0x64>)
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b003      	add	sp, #12
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_IncTick+0x1c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_IncTick+0x20>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	18d2      	adds	r2, r2, r3
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_IncTick+0x20>)
 8001ede:	601a      	str	r2, [r3, #0]
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	20000300 	.word	0x20000300

08001ef0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <HAL_GetTick+0x10>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	20000300 	.word	0x20000300

08001f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	1dfb      	adds	r3, r7, #7
 8001f0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f10:	1dfb      	adds	r3, r7, #7
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b7f      	cmp	r3, #127	; 0x7f
 8001f16:	d809      	bhi.n	8001f2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f18:	1dfb      	adds	r3, r7, #7
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	231f      	movs	r3, #31
 8001f20:	401a      	ands	r2, r3
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <__NVIC_EnableIRQ+0x30>)
 8001f24:	2101      	movs	r1, #1
 8001f26:	4091      	lsls	r1, r2
 8001f28:	000a      	movs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
  }
}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b002      	add	sp, #8
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	0002      	movs	r2, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	1dfb      	adds	r3, r7, #7
 8001f44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f4c:	d828      	bhi.n	8001fa0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f4e:	4a2f      	ldr	r2, [pc, #188]	; (800200c <__NVIC_SetPriority+0xd4>)
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	33c0      	adds	r3, #192	; 0xc0
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	589b      	ldr	r3, [r3, r2]
 8001f5e:	1dfa      	adds	r2, r7, #7
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	0011      	movs	r1, r2
 8001f64:	2203      	movs	r2, #3
 8001f66:	400a      	ands	r2, r1
 8001f68:	00d2      	lsls	r2, r2, #3
 8001f6a:	21ff      	movs	r1, #255	; 0xff
 8001f6c:	4091      	lsls	r1, r2
 8001f6e:	000a      	movs	r2, r1
 8001f70:	43d2      	mvns	r2, r2
 8001f72:	401a      	ands	r2, r3
 8001f74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	019b      	lsls	r3, r3, #6
 8001f7a:	22ff      	movs	r2, #255	; 0xff
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	0018      	movs	r0, r3
 8001f84:	2303      	movs	r3, #3
 8001f86:	4003      	ands	r3, r0
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f8c:	481f      	ldr	r0, [pc, #124]	; (800200c <__NVIC_SetPriority+0xd4>)
 8001f8e:	1dfb      	adds	r3, r7, #7
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b25b      	sxtb	r3, r3
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	430a      	orrs	r2, r1
 8001f98:	33c0      	adds	r3, #192	; 0xc0
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f9e:	e031      	b.n	8002004 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <__NVIC_SetPriority+0xd8>)
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	230f      	movs	r3, #15
 8001faa:	400b      	ands	r3, r1
 8001fac:	3b08      	subs	r3, #8
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3306      	adds	r3, #6
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	18d3      	adds	r3, r2, r3
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	1dfa      	adds	r2, r7, #7
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	00d2      	lsls	r2, r2, #3
 8001fc6:	21ff      	movs	r1, #255	; 0xff
 8001fc8:	4091      	lsls	r1, r2
 8001fca:	000a      	movs	r2, r1
 8001fcc:	43d2      	mvns	r2, r2
 8001fce:	401a      	ands	r2, r3
 8001fd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	019b      	lsls	r3, r3, #6
 8001fd6:	22ff      	movs	r2, #255	; 0xff
 8001fd8:	401a      	ands	r2, r3
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	4003      	ands	r3, r0
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe8:	4809      	ldr	r0, [pc, #36]	; (8002010 <__NVIC_SetPriority+0xd8>)
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	001c      	movs	r4, r3
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	4023      	ands	r3, r4
 8001ff4:	3b08      	subs	r3, #8
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	3306      	adds	r3, #6
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	18c3      	adds	r3, r0, r3
 8002000:	3304      	adds	r3, #4
 8002002:	601a      	str	r2, [r3, #0]
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b003      	add	sp, #12
 800200a:	bd90      	pop	{r4, r7, pc}
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <SysTick_Config+0x40>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e010      	b.n	800204c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <SysTick_Config+0x44>)
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	3a01      	subs	r2, #1
 8002030:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	2301      	movs	r3, #1
 8002034:	425b      	negs	r3, r3
 8002036:	2103      	movs	r1, #3
 8002038:	0018      	movs	r0, r3
 800203a:	f7ff ff7d 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <SysTick_Config+0x44>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x44>)
 8002046:	2207      	movs	r2, #7
 8002048:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204a:	2300      	movs	r3, #0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b002      	add	sp, #8
 8002052:	bd80      	pop	{r7, pc}
 8002054:	00ffffff 	.word	0x00ffffff
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	210f      	movs	r1, #15
 8002068:	187b      	adds	r3, r7, r1
 800206a:	1c02      	adds	r2, r0, #0
 800206c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	187b      	adds	r3, r7, r1
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b25b      	sxtb	r3, r3
 8002076:	0011      	movs	r1, r2
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff ff5d 	bl	8001f38 <__NVIC_SetPriority>
}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b004      	add	sp, #16
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	0002      	movs	r2, r0
 800208e:	1dfb      	adds	r3, r7, #7
 8002090:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b25b      	sxtb	r3, r3
 8002098:	0018      	movs	r0, r3
 800209a:	f7ff ff33 	bl	8001f04 <__NVIC_EnableIRQ>
}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff ffaf 	bl	8002014 <SysTick_Config>
 80020b6:	0003      	movs	r3, r0
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c8:	230f      	movs	r3, #15
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2221      	movs	r2, #33	; 0x21
 80020d4:	5c9b      	ldrb	r3, [r3, r2]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d007      	beq.n	80020ec <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2204      	movs	r2, #4
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020e2:	230f      	movs	r3, #15
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e028      	b.n	800213e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	210e      	movs	r1, #14
 80020f8:	438a      	bics	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2101      	movs	r1, #1
 8002108:	438a      	bics	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	2101      	movs	r1, #1
 8002116:	4091      	lsls	r1, r2
 8002118:	000a      	movs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2221      	movs	r2, #33	; 0x21
 8002120:	2101      	movs	r1, #1
 8002122:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	2100      	movs	r1, #0
 800212a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	0010      	movs	r0, r2
 800213c:	4798      	blx	r3
    } 
  }
  return status;
 800213e:	230f      	movs	r3, #15
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	781b      	ldrb	r3, [r3, #0]
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b004      	add	sp, #16
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215a:	e155      	b.n	8002408 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4091      	lsls	r1, r2
 8002166:	000a      	movs	r2, r1
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d100      	bne.n	8002174 <HAL_GPIO_Init+0x28>
 8002172:	e146      	b.n	8002402 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x38>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b12      	cmp	r3, #18
 8002182:	d123      	bne.n	80021cc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	0092      	lsls	r2, r2, #2
 800218e:	58d3      	ldr	r3, [r2, r3]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2207      	movs	r2, #7
 8002196:	4013      	ands	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	409a      	lsls	r2, r3
 800219e:	0013      	movs	r3, r2
 80021a0:	43da      	mvns	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2107      	movs	r1, #7
 80021b0:	400b      	ands	r3, r1
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	409a      	lsls	r2, r3
 80021b6:	0013      	movs	r3, r2
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	6939      	ldr	r1, [r7, #16]
 80021ca:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	409a      	lsls	r2, r3
 80021da:	0013      	movs	r3, r2
 80021dc:	43da      	mvns	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	401a      	ands	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	409a      	lsls	r2, r3
 80021f2:	0013      	movs	r3, r2
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d00b      	beq.n	8002220 <HAL_GPIO_Init+0xd4>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d007      	beq.n	8002220 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002214:	2b11      	cmp	r3, #17
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b12      	cmp	r3, #18
 800221e:	d130      	bne.n	8002282 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	409a      	lsls	r2, r3
 800222e:	0013      	movs	r3, r2
 8002230:	43da      	mvns	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	409a      	lsls	r2, r3
 8002242:	0013      	movs	r3, r2
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002256:	2201      	movs	r2, #1
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
 800225c:	0013      	movs	r3, r2
 800225e:	43da      	mvns	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	2201      	movs	r2, #1
 800226e:	401a      	ands	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	409a      	lsls	r2, r3
 8002274:	0013      	movs	r3, r2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	409a      	lsls	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	43da      	mvns	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	409a      	lsls	r2, r3
 80022a4:	0013      	movs	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	055b      	lsls	r3, r3, #21
 80022ba:	4013      	ands	r3, r2
 80022bc:	d100      	bne.n	80022c0 <HAL_GPIO_Init+0x174>
 80022be:	e0a0      	b.n	8002402 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c0:	4b57      	ldr	r3, [pc, #348]	; (8002420 <HAL_GPIO_Init+0x2d4>)
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	4b56      	ldr	r3, [pc, #344]	; (8002420 <HAL_GPIO_Init+0x2d4>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	619a      	str	r2, [r3, #24]
 80022cc:	4b54      	ldr	r3, [pc, #336]	; (8002420 <HAL_GPIO_Init+0x2d4>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2201      	movs	r2, #1
 80022d2:	4013      	ands	r3, r2
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022d8:	4a52      	ldr	r2, [pc, #328]	; (8002424 <HAL_GPIO_Init+0x2d8>)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	589b      	ldr	r3, [r3, r2]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2203      	movs	r2, #3
 80022ea:	4013      	ands	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	409a      	lsls	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	43da      	mvns	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	2390      	movs	r3, #144	; 0x90
 8002300:	05db      	lsls	r3, r3, #23
 8002302:	429a      	cmp	r2, r3
 8002304:	d019      	beq.n	800233a <HAL_GPIO_Init+0x1ee>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a47      	ldr	r2, [pc, #284]	; (8002428 <HAL_GPIO_Init+0x2dc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0x1ea>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a46      	ldr	r2, [pc, #280]	; (800242c <HAL_GPIO_Init+0x2e0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00d      	beq.n	8002332 <HAL_GPIO_Init+0x1e6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a45      	ldr	r2, [pc, #276]	; (8002430 <HAL_GPIO_Init+0x2e4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <HAL_GPIO_Init+0x1e2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a44      	ldr	r2, [pc, #272]	; (8002434 <HAL_GPIO_Init+0x2e8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_GPIO_Init+0x1de>
 8002326:	2304      	movs	r3, #4
 8002328:	e008      	b.n	800233c <HAL_GPIO_Init+0x1f0>
 800232a:	2305      	movs	r3, #5
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x1f0>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x1f0>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x1f0>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x1f0>
 800233a:	2300      	movs	r3, #0
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	2103      	movs	r1, #3
 8002340:	400a      	ands	r2, r1
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800234c:	4935      	ldr	r1, [pc, #212]	; (8002424 <HAL_GPIO_Init+0x2d8>)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43da      	mvns	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	025b      	lsls	r3, r3, #9
 8002372:	4013      	ands	r3, r2
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800237e:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002384:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	43da      	mvns	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	029b      	lsls	r3, r3, #10
 800239c:	4013      	ands	r3, r2
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023a8:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43da      	mvns	r2, r3
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	035b      	lsls	r3, r3, #13
 80023c6:	4013      	ands	r3, r2
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	43da      	mvns	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	039b      	lsls	r3, r3, #14
 80023f0:	4013      	ands	r3, r2
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_GPIO_Init+0x2ec>)
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3301      	adds	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	40da      	lsrs	r2, r3
 8002410:	1e13      	subs	r3, r2, #0
 8002412:	d000      	beq.n	8002416 <HAL_GPIO_Init+0x2ca>
 8002414:	e6a2      	b.n	800215c <HAL_GPIO_Init+0x10>
  } 
}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b006      	add	sp, #24
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	40021000 	.word	0x40021000
 8002424:	40010000 	.word	0x40010000
 8002428:	48000400 	.word	0x48000400
 800242c:	48000800 	.word	0x48000800
 8002430:	48000c00 	.word	0x48000c00
 8002434:	48001000 	.word	0x48001000
 8002438:	40010400 	.word	0x40010400

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	0008      	movs	r0, r1
 8002446:	0011      	movs	r1, r2
 8002448:	1cbb      	adds	r3, r7, #2
 800244a:	1c02      	adds	r2, r0, #0
 800244c:	801a      	strh	r2, [r3, #0]
 800244e:	1c7b      	adds	r3, r7, #1
 8002450:	1c0a      	adds	r2, r1, #0
 8002452:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002454:	1c7b      	adds	r3, r7, #1
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800245c:	1cbb      	adds	r3, r7, #2
 800245e:	881a      	ldrh	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002466:	1cbb      	adds	r3, r7, #2
 8002468:	881a      	ldrh	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	000a      	movs	r2, r1
 8002480:	1cbb      	adds	r3, r7, #2
 8002482:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	1cba      	adds	r2, r7, #2
 800248a:	8812      	ldrh	r2, [r2, #0]
 800248c:	4013      	ands	r3, r2
 800248e:	d005      	beq.n	800249c <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002490:	1cbb      	adds	r3, r7, #2
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800249a:	e003      	b.n	80024a4 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800249c:	1cbb      	adds	r3, r7, #2
 800249e:	881a      	ldrh	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	619a      	str	r2, [r3, #24]
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e082      	b.n	80025c4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2241      	movs	r2, #65	; 0x41
 80024c2:	5c9b      	ldrb	r3, [r3, r2]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d107      	bne.n	80024da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2240      	movs	r2, #64	; 0x40
 80024ce:	2100      	movs	r1, #0
 80024d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7ff fac9 	bl	8001a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2241      	movs	r2, #65	; 0x41
 80024de:	2124      	movs	r1, #36	; 0x24
 80024e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2101      	movs	r1, #1
 80024ee:	438a      	bics	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4934      	ldr	r1, [pc, #208]	; (80025cc <HAL_I2C_Init+0x120>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4931      	ldr	r1, [pc, #196]	; (80025d0 <HAL_I2C_Init+0x124>)
 800250c:	400a      	ands	r2, r1
 800250e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d108      	bne.n	800252a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	0209      	lsls	r1, r1, #8
 8002524:	430a      	orrs	r2, r1
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	e007      	b.n	800253a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2184      	movs	r1, #132	; 0x84
 8002534:	0209      	lsls	r1, r1, #8
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d104      	bne.n	800254c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	0112      	lsls	r2, r2, #4
 800254a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	491f      	ldr	r1, [pc, #124]	; (80025d4 <HAL_I2C_Init+0x128>)
 8002558:	430a      	orrs	r2, r1
 800255a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	491a      	ldr	r1, [pc, #104]	; (80025d0 <HAL_I2C_Init+0x124>)
 8002568:	400a      	ands	r2, r1
 800256a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	431a      	orrs	r2, r3
 8002576:	0011      	movs	r1, r2
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	021a      	lsls	r2, r3, #8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69d9      	ldr	r1, [r3, #28]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1a      	ldr	r2, [r3, #32]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2101      	movs	r1, #1
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2241      	movs	r2, #65	; 0x41
 80025b0:	2120      	movs	r1, #32
 80025b2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2242      	movs	r2, #66	; 0x42
 80025be:	2100      	movs	r1, #0
 80025c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b002      	add	sp, #8
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	f0ffffff 	.word	0xf0ffffff
 80025d0:	ffff7fff 	.word	0xffff7fff
 80025d4:	02008000 	.word	0x02008000

080025d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2241      	movs	r2, #65	; 0x41
 80025e6:	5c9b      	ldrb	r3, [r3, r2]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	d138      	bne.n	8002660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2240      	movs	r2, #64	; 0x40
 80025f2:	5c9b      	ldrb	r3, [r3, r2]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e032      	b.n	8002662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2240      	movs	r2, #64	; 0x40
 8002600:	2101      	movs	r1, #1
 8002602:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2241      	movs	r2, #65	; 0x41
 8002608:	2124      	movs	r1, #36	; 0x24
 800260a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2101      	movs	r1, #1
 8002618:	438a      	bics	r2, r1
 800261a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4911      	ldr	r1, [pc, #68]	; (800266c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002628:	400a      	ands	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2101      	movs	r1, #1
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2241      	movs	r2, #65	; 0x41
 8002650:	2120      	movs	r1, #32
 8002652:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2240      	movs	r2, #64	; 0x40
 8002658:	2100      	movs	r1, #0
 800265a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b002      	add	sp, #8
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	ffffefff 	.word	0xffffefff

08002670 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2241      	movs	r2, #65	; 0x41
 800267e:	5c9b      	ldrb	r3, [r3, r2]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b20      	cmp	r3, #32
 8002684:	d139      	bne.n	80026fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2240      	movs	r2, #64	; 0x40
 800268a:	5c9b      	ldrb	r3, [r3, r2]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002690:	2302      	movs	r3, #2
 8002692:	e033      	b.n	80026fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2240      	movs	r2, #64	; 0x40
 8002698:	2101      	movs	r1, #1
 800269a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2241      	movs	r2, #65	; 0x41
 80026a0:	2124      	movs	r1, #36	; 0x24
 80026a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2101      	movs	r1, #1
 80026b0:	438a      	bics	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4a11      	ldr	r2, [pc, #68]	; (8002704 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2101      	movs	r1, #1
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2241      	movs	r2, #65	; 0x41
 80026ea:	2120      	movs	r1, #32
 80026ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2240      	movs	r2, #64	; 0x40
 80026f2:	2100      	movs	r1, #0
 80026f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e000      	b.n	80026fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026fa:	2302      	movs	r3, #2
  }
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	b004      	add	sp, #16
 8002702:	bd80      	pop	{r7, pc}
 8002704:	fffff0ff 	.word	0xfffff0ff

08002708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f000 fb76 	bl	8002e08 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2201      	movs	r2, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d100      	bne.n	8002728 <HAL_RCC_OscConfig+0x20>
 8002726:	e08e      	b.n	8002846 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002728:	4bc5      	ldr	r3, [pc, #788]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	220c      	movs	r2, #12
 800272e:	4013      	ands	r3, r2
 8002730:	2b04      	cmp	r3, #4
 8002732:	d00e      	beq.n	8002752 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002734:	4bc2      	ldr	r3, [pc, #776]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	220c      	movs	r2, #12
 800273a:	4013      	ands	r3, r2
 800273c:	2b08      	cmp	r3, #8
 800273e:	d117      	bne.n	8002770 <HAL_RCC_OscConfig+0x68>
 8002740:	4bbf      	ldr	r3, [pc, #764]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	23c0      	movs	r3, #192	; 0xc0
 8002746:	025b      	lsls	r3, r3, #9
 8002748:	401a      	ands	r2, r3
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	025b      	lsls	r3, r3, #9
 800274e:	429a      	cmp	r2, r3
 8002750:	d10e      	bne.n	8002770 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002752:	4bbb      	ldr	r3, [pc, #748]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	029b      	lsls	r3, r3, #10
 800275a:	4013      	ands	r3, r2
 800275c:	d100      	bne.n	8002760 <HAL_RCC_OscConfig+0x58>
 800275e:	e071      	b.n	8002844 <HAL_RCC_OscConfig+0x13c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d000      	beq.n	800276a <HAL_RCC_OscConfig+0x62>
 8002768:	e06c      	b.n	8002844 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	f000 fb4c 	bl	8002e08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d107      	bne.n	8002788 <HAL_RCC_OscConfig+0x80>
 8002778:	4bb1      	ldr	r3, [pc, #708]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4bb0      	ldr	r3, [pc, #704]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	0249      	lsls	r1, r1, #9
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e02f      	b.n	80027e8 <HAL_RCC_OscConfig+0xe0>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_OscConfig+0xa2>
 8002790:	4bab      	ldr	r3, [pc, #684]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4baa      	ldr	r3, [pc, #680]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002796:	49ab      	ldr	r1, [pc, #684]	; (8002a44 <HAL_RCC_OscConfig+0x33c>)
 8002798:	400a      	ands	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	4ba8      	ldr	r3, [pc, #672]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4ba7      	ldr	r3, [pc, #668]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80027a2:	49a9      	ldr	r1, [pc, #676]	; (8002a48 <HAL_RCC_OscConfig+0x340>)
 80027a4:	400a      	ands	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e01e      	b.n	80027e8 <HAL_RCC_OscConfig+0xe0>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d10e      	bne.n	80027d0 <HAL_RCC_OscConfig+0xc8>
 80027b2:	4ba3      	ldr	r3, [pc, #652]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4ba2      	ldr	r3, [pc, #648]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	02c9      	lsls	r1, r1, #11
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	4b9f      	ldr	r3, [pc, #636]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b9e      	ldr	r3, [pc, #632]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	0249      	lsls	r1, r1, #9
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	e00b      	b.n	80027e8 <HAL_RCC_OscConfig+0xe0>
 80027d0:	4b9b      	ldr	r3, [pc, #620]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b9a      	ldr	r3, [pc, #616]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80027d6:	499b      	ldr	r1, [pc, #620]	; (8002a44 <HAL_RCC_OscConfig+0x33c>)
 80027d8:	400a      	ands	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	4b98      	ldr	r3, [pc, #608]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b97      	ldr	r3, [pc, #604]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80027e2:	4999      	ldr	r1, [pc, #612]	; (8002a48 <HAL_RCC_OscConfig+0x340>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d014      	beq.n	800281a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7ff fb7e 	bl	8001ef0 <HAL_GetTick>
 80027f4:	0003      	movs	r3, r0
 80027f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027fa:	f7ff fb79 	bl	8001ef0 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b64      	cmp	r3, #100	; 0x64
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e2fd      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280c:	4b8c      	ldr	r3, [pc, #560]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	029b      	lsls	r3, r3, #10
 8002814:	4013      	ands	r3, r2
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0xf2>
 8002818:	e015      	b.n	8002846 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7ff fb69 	bl	8001ef0 <HAL_GetTick>
 800281e:	0003      	movs	r3, r0
 8002820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002824:	f7ff fb64 	bl	8001ef0 <HAL_GetTick>
 8002828:	0002      	movs	r2, r0
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e2e8      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002836:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	029b      	lsls	r3, r3, #10
 800283e:	4013      	ands	r3, r2
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x11c>
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2202      	movs	r2, #2
 800284c:	4013      	ands	r3, r2
 800284e:	d100      	bne.n	8002852 <HAL_RCC_OscConfig+0x14a>
 8002850:	e06c      	b.n	800292c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002852:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	220c      	movs	r2, #12
 8002858:	4013      	ands	r3, r2
 800285a:	d00e      	beq.n	800287a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800285c:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	220c      	movs	r2, #12
 8002862:	4013      	ands	r3, r2
 8002864:	2b08      	cmp	r3, #8
 8002866:	d11f      	bne.n	80028a8 <HAL_RCC_OscConfig+0x1a0>
 8002868:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	23c0      	movs	r3, #192	; 0xc0
 800286e:	025b      	lsls	r3, r3, #9
 8002870:	401a      	ands	r2, r3
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	429a      	cmp	r2, r3
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	4b71      	ldr	r3, [pc, #452]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2202      	movs	r2, #2
 8002880:	4013      	ands	r3, r2
 8002882:	d005      	beq.n	8002890 <HAL_RCC_OscConfig+0x188>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d001      	beq.n	8002890 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e2bb      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002890:	4b6b      	ldr	r3, [pc, #428]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	22f8      	movs	r2, #248	; 0xf8
 8002896:	4393      	bics	r3, r2
 8002898:	0019      	movs	r1, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00da      	lsls	r2, r3, #3
 80028a0:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	e041      	b.n	800292c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d024      	beq.n	80028fa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b62      	ldr	r3, [pc, #392]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff fb18 	bl	8001ef0 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c6:	f7ff fb13 	bl	8001ef0 <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e297      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2202      	movs	r2, #2
 80028de:	4013      	ands	r3, r2
 80028e0:	d0f1      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e2:	4b57      	ldr	r3, [pc, #348]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	22f8      	movs	r2, #248	; 0xf8
 80028e8:	4393      	bics	r3, r2
 80028ea:	0019      	movs	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	00da      	lsls	r2, r3, #3
 80028f2:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e018      	b.n	800292c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028fa:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002900:	2101      	movs	r1, #1
 8002902:	438a      	bics	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7ff faf3 	bl	8001ef0 <HAL_GetTick>
 800290a:	0003      	movs	r3, r0
 800290c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002910:	f7ff faee 	bl	8001ef0 <HAL_GetTick>
 8002914:	0002      	movs	r2, r0
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e272      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002922:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2202      	movs	r2, #2
 8002928:	4013      	ands	r3, r2
 800292a:	d1f1      	bne.n	8002910 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2208      	movs	r2, #8
 8002932:	4013      	ands	r3, r2
 8002934:	d036      	beq.n	80029a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d019      	beq.n	8002972 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293e:	4b40      	ldr	r3, [pc, #256]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002942:	4b3f      	ldr	r3, [pc, #252]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002944:	2101      	movs	r1, #1
 8002946:	430a      	orrs	r2, r1
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7ff fad1 	bl	8001ef0 <HAL_GetTick>
 800294e:	0003      	movs	r3, r0
 8002950:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002954:	f7ff facc 	bl	8001ef0 <HAL_GetTick>
 8002958:	0002      	movs	r2, r0
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e250      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2202      	movs	r2, #2
 800296c:	4013      	ands	r3, r2
 800296e:	d0f1      	beq.n	8002954 <HAL_RCC_OscConfig+0x24c>
 8002970:	e018      	b.n	80029a4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002972:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002976:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002978:	2101      	movs	r1, #1
 800297a:	438a      	bics	r2, r1
 800297c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7ff fab7 	bl	8001ef0 <HAL_GetTick>
 8002982:	0003      	movs	r3, r0
 8002984:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002988:	f7ff fab2 	bl	8001ef0 <HAL_GetTick>
 800298c:	0002      	movs	r2, r0
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e236      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299a:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	2202      	movs	r2, #2
 80029a0:	4013      	ands	r3, r2
 80029a2:	d1f1      	bne.n	8002988 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2204      	movs	r2, #4
 80029aa:	4013      	ands	r3, r2
 80029ac:	d100      	bne.n	80029b0 <HAL_RCC_OscConfig+0x2a8>
 80029ae:	e0b5      	b.n	8002b1c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b0:	231f      	movs	r3, #31
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b8:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	055b      	lsls	r3, r3, #21
 80029c0:	4013      	ands	r3, r2
 80029c2:	d111      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c4:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80029ca:	2180      	movs	r1, #128	; 0x80
 80029cc:	0549      	lsls	r1, r1, #21
 80029ce:	430a      	orrs	r2, r1
 80029d0:	61da      	str	r2, [r3, #28]
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 80029d4:	69da      	ldr	r2, [r3, #28]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	055b      	lsls	r3, r3, #21
 80029da:	4013      	ands	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029e0:	231f      	movs	r3, #31
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_RCC_OscConfig+0x344>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4013      	ands	r3, r2
 80029f2:	d11a      	bne.n	8002a2a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029f4:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_RCC_OscConfig+0x344>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <HAL_RCC_OscConfig+0x344>)
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	0049      	lsls	r1, r1, #1
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a02:	f7ff fa75 	bl	8001ef0 <HAL_GetTick>
 8002a06:	0003      	movs	r3, r0
 8002a08:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0c:	f7ff fa70 	bl	8001ef0 <HAL_GetTick>
 8002a10:	0002      	movs	r2, r0
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e1f4      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_OscConfig+0x344>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4013      	ands	r3, r2
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d10e      	bne.n	8002a50 <HAL_RCC_OscConfig+0x348>
 8002a32:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002a34:	6a1a      	ldr	r2, [r3, #32]
 8002a36:	4b02      	ldr	r3, [pc, #8]	; (8002a40 <HAL_RCC_OscConfig+0x338>)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	621a      	str	r2, [r3, #32]
 8002a3e:	e035      	b.n	8002aac <HAL_RCC_OscConfig+0x3a4>
 8002a40:	40021000 	.word	0x40021000
 8002a44:	fffeffff 	.word	0xfffeffff
 8002a48:	fffbffff 	.word	0xfffbffff
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10c      	bne.n	8002a72 <HAL_RCC_OscConfig+0x36a>
 8002a58:	4bca      	ldr	r3, [pc, #808]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002a5a:	6a1a      	ldr	r2, [r3, #32]
 8002a5c:	4bc9      	ldr	r3, [pc, #804]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	438a      	bics	r2, r1
 8002a62:	621a      	str	r2, [r3, #32]
 8002a64:	4bc7      	ldr	r3, [pc, #796]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002a66:	6a1a      	ldr	r2, [r3, #32]
 8002a68:	4bc6      	ldr	r3, [pc, #792]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	438a      	bics	r2, r1
 8002a6e:	621a      	str	r2, [r3, #32]
 8002a70:	e01c      	b.n	8002aac <HAL_RCC_OscConfig+0x3a4>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b05      	cmp	r3, #5
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x38c>
 8002a7a:	4bc2      	ldr	r3, [pc, #776]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002a7c:	6a1a      	ldr	r2, [r3, #32]
 8002a7e:	4bc1      	ldr	r3, [pc, #772]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002a80:	2104      	movs	r1, #4
 8002a82:	430a      	orrs	r2, r1
 8002a84:	621a      	str	r2, [r3, #32]
 8002a86:	4bbf      	ldr	r3, [pc, #764]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	4bbe      	ldr	r3, [pc, #760]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	621a      	str	r2, [r3, #32]
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0x3a4>
 8002a94:	4bbb      	ldr	r3, [pc, #748]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002a96:	6a1a      	ldr	r2, [r3, #32]
 8002a98:	4bba      	ldr	r3, [pc, #744]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	621a      	str	r2, [r3, #32]
 8002aa0:	4bb8      	ldr	r3, [pc, #736]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	4bb7      	ldr	r3, [pc, #732]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	438a      	bics	r2, r1
 8002aaa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d014      	beq.n	8002ade <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab4:	f7ff fa1c 	bl	8001ef0 <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abc:	e009      	b.n	8002ad2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002abe:	f7ff fa17 	bl	8001ef0 <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	4aaf      	ldr	r2, [pc, #700]	; (8002d88 <HAL_RCC_OscConfig+0x680>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e19a      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad2:	4bac      	ldr	r3, [pc, #688]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x3b6>
 8002adc:	e013      	b.n	8002b06 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7ff fa07 	bl	8001ef0 <HAL_GetTick>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae6:	e009      	b.n	8002afc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae8:	f7ff fa02 	bl	8001ef0 <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	4aa5      	ldr	r2, [pc, #660]	; (8002d88 <HAL_RCC_OscConfig+0x680>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e185      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afc:	4ba1      	ldr	r3, [pc, #644]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	2202      	movs	r2, #2
 8002b02:	4013      	ands	r3, r2
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b06:	231f      	movs	r3, #31
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b10:	4b9c      	ldr	r3, [pc, #624]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	4b9b      	ldr	r3, [pc, #620]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002b16:	499d      	ldr	r1, [pc, #628]	; (8002d8c <HAL_RCC_OscConfig+0x684>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2210      	movs	r2, #16
 8002b22:	4013      	ands	r3, r2
 8002b24:	d063      	beq.n	8002bee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d12a      	bne.n	8002b84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b2e:	4b95      	ldr	r3, [pc, #596]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b32:	4b94      	ldr	r3, [pc, #592]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002b34:	2104      	movs	r1, #4
 8002b36:	430a      	orrs	r2, r1
 8002b38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002b3a:	4b92      	ldr	r3, [pc, #584]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3e:	4b91      	ldr	r3, [pc, #580]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002b40:	2101      	movs	r1, #1
 8002b42:	430a      	orrs	r2, r1
 8002b44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b46:	f7ff f9d3 	bl	8001ef0 <HAL_GetTick>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b50:	f7ff f9ce 	bl	8001ef0 <HAL_GetTick>
 8002b54:	0002      	movs	r2, r0
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e152      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b62:	4b88      	ldr	r3, [pc, #544]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	2202      	movs	r2, #2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d0f1      	beq.n	8002b50 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b6c:	4b85      	ldr	r3, [pc, #532]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	22f8      	movs	r2, #248	; 0xf8
 8002b72:	4393      	bics	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	00da      	lsls	r2, r3, #3
 8002b7c:	4b81      	ldr	r3, [pc, #516]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	635a      	str	r2, [r3, #52]	; 0x34
 8002b82:	e034      	b.n	8002bee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	3305      	adds	r3, #5
 8002b8a:	d111      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b8c:	4b7d      	ldr	r3, [pc, #500]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b90:	4b7c      	ldr	r3, [pc, #496]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002b92:	2104      	movs	r1, #4
 8002b94:	438a      	bics	r2, r1
 8002b96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b98:	4b7a      	ldr	r3, [pc, #488]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9c:	22f8      	movs	r2, #248	; 0xf8
 8002b9e:	4393      	bics	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	00da      	lsls	r2, r3, #3
 8002ba8:	4b76      	ldr	r3, [pc, #472]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002baa:	430a      	orrs	r2, r1
 8002bac:	635a      	str	r2, [r3, #52]	; 0x34
 8002bae:	e01e      	b.n	8002bee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bb0:	4b74      	ldr	r3, [pc, #464]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb4:	4b73      	ldr	r3, [pc, #460]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002bbc:	4b71      	ldr	r3, [pc, #452]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bc0:	4b70      	ldr	r3, [pc, #448]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	438a      	bics	r2, r1
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc8:	f7ff f992 	bl	8001ef0 <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bd2:	f7ff f98d 	bl	8001ef0 <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e111      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002be4:	4b67      	ldr	r3, [pc, #412]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be8:	2202      	movs	r2, #2
 8002bea:	4013      	ands	r3, r2
 8002bec:	d1f1      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d05c      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002bf8:	4b62      	ldr	r3, [pc, #392]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	220c      	movs	r2, #12
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d00e      	beq.n	8002c22 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c04:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	220c      	movs	r2, #12
 8002c0a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d114      	bne.n	8002c3a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c10:	4b5c      	ldr	r3, [pc, #368]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	23c0      	movs	r3, #192	; 0xc0
 8002c16:	025b      	lsls	r3, r3, #9
 8002c18:	401a      	ands	r2, r3
 8002c1a:	23c0      	movs	r3, #192	; 0xc0
 8002c1c:	025b      	lsls	r3, r3, #9
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d10b      	bne.n	8002c3a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002c22:	4b58      	ldr	r3, [pc, #352]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	025b      	lsls	r3, r3, #9
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d040      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x5a8>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d03c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0e6      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01b      	beq.n	8002c7a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002c42:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c46:	4b4f      	ldr	r3, [pc, #316]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002c48:	2180      	movs	r1, #128	; 0x80
 8002c4a:	0249      	lsls	r1, r1, #9
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff f94e 	bl	8001ef0 <HAL_GetTick>
 8002c54:	0003      	movs	r3, r0
 8002c56:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c5a:	f7ff f949 	bl	8001ef0 <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e0cd      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c6c:	4b45      	ldr	r3, [pc, #276]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	025b      	lsls	r3, r3, #9
 8002c74:	4013      	ands	r3, r2
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x552>
 8002c78:	e01b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002c7a:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7e:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002c80:	4943      	ldr	r1, [pc, #268]	; (8002d90 <HAL_RCC_OscConfig+0x688>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7ff f933 	bl	8001ef0 <HAL_GetTick>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c90:	f7ff f92e 	bl	8001ef0 <HAL_GetTick>
 8002c94:	0002      	movs	r2, r0
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0b2      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002ca2:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	025b      	lsls	r3, r3, #9
 8002caa:	4013      	ands	r3, r2
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x588>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002cb0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d100      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5b4>
 8002cba:	e0a4      	b.n	8002e06 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	220c      	movs	r2, #12
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d100      	bne.n	8002cca <HAL_RCC_OscConfig+0x5c2>
 8002cc8:	e078      	b.n	8002dbc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d14c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002cd8:	492e      	ldr	r1, [pc, #184]	; (8002d94 <HAL_RCC_OscConfig+0x68c>)
 8002cda:	400a      	ands	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7ff f907 	bl	8001ef0 <HAL_GetTick>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7ff f902 	bl	8001ef0 <HAL_GetTick>
 8002cec:	0002      	movs	r2, r0
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e086      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	049b      	lsls	r3, r3, #18
 8002d02:	4013      	ands	r3, r2
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d06:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002d16:	430a      	orrs	r2, r1
 8002d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_RCC_OscConfig+0x690>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002d30:	430a      	orrs	r2, r1
 8002d32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	0449      	lsls	r1, r1, #17
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7ff f8d5 	bl	8001ef0 <HAL_GetTick>
 8002d46:	0003      	movs	r3, r0
 8002d48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7ff f8d0 	bl	8001ef0 <HAL_GetTick>
 8002d50:	0002      	movs	r2, r0
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e054      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	049b      	lsls	r3, r3, #18
 8002d66:	4013      	ands	r3, r2
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x644>
 8002d6a:	e04c      	b.n	8002e06 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <HAL_RCC_OscConfig+0x67c>)
 8002d72:	4908      	ldr	r1, [pc, #32]	; (8002d94 <HAL_RCC_OscConfig+0x68c>)
 8002d74:	400a      	ands	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7ff f8ba 	bl	8001ef0 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x6a6>
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	40021000 	.word	0x40021000
 8002d88:	00001388 	.word	0x00001388
 8002d8c:	efffffff 	.word	0xefffffff
 8002d90:	fffeffff 	.word	0xfffeffff
 8002d94:	feffffff 	.word	0xfeffffff
 8002d98:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7ff f8a8 	bl	8001ef0 <HAL_GetTick>
 8002da0:	0002      	movs	r2, r0
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e02c      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_RCC_OscConfig+0x708>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	049b      	lsls	r3, r3, #18
 8002db6:	4013      	ands	r3, r2
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x694>
 8002dba:	e024      	b.n	8002e06 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e01f      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <HAL_RCC_OscConfig+0x708>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_RCC_OscConfig+0x708>)
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	23c0      	movs	r3, #192	; 0xc0
 8002dd8:	025b      	lsls	r3, r3, #9
 8002dda:	401a      	ands	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d10e      	bne.n	8002e02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	220f      	movs	r2, #15
 8002de8:	401a      	ands	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	23f0      	movs	r3, #240	; 0xf0
 8002df6:	039b      	lsls	r3, r3, #14
 8002df8:	401a      	ands	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d001      	beq.n	8002e06 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b008      	add	sp, #32
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021000 	.word	0x40021000

08002e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0bf      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e28:	4b61      	ldr	r3, [pc, #388]	; (8002fb0 <HAL_RCC_ClockConfig+0x19c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4013      	ands	r3, r2
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d911      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b5e      	ldr	r3, [pc, #376]	; (8002fb0 <HAL_RCC_ClockConfig+0x19c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	0019      	movs	r1, r3
 8002e40:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <HAL_RCC_ClockConfig+0x19c>)
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e48:	4b59      	ldr	r3, [pc, #356]	; (8002fb0 <HAL_RCC_ClockConfig+0x19c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	4013      	ands	r3, r2
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0a6      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	4013      	ands	r3, r2
 8002e62:	d015      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d006      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e6e:	4b51      	ldr	r3, [pc, #324]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e74:	21e0      	movs	r1, #224	; 0xe0
 8002e76:	00c9      	lsls	r1, r1, #3
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b4d      	ldr	r3, [pc, #308]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	22f0      	movs	r2, #240	; 0xf0
 8002e82:	4393      	bics	r3, r2
 8002e84:	0019      	movs	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2201      	movs	r2, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	d04c      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b44      	ldr	r3, [pc, #272]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	029b      	lsls	r3, r3, #10
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d120      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07a      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eba:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	049b      	lsls	r3, r3, #18
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d114      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e06e      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ed2:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	025b      	lsls	r3, r3, #9
 8002eda:	4013      	ands	r3, r2
 8002edc:	d108      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e062      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee2:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e05b      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef0:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	4393      	bics	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f04:	f7fe fff4 	bl	8001ef0 <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0c:	e009      	b.n	8002f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0e:	f7fe ffef 	bl	8001ef0 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <HAL_RCC_ClockConfig+0x1a4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e042      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	220c      	movs	r2, #12
 8002f28:	401a      	ands	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d1ec      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f34:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <HAL_RCC_ClockConfig+0x19c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d211      	bcs.n	8002f66 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <HAL_RCC_ClockConfig+0x19c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2201      	movs	r2, #1
 8002f48:	4393      	bics	r3, r2
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <HAL_RCC_ClockConfig+0x19c>)
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f54:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_RCC_ClockConfig+0x19c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e020      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d009      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f70:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a11      	ldr	r2, [pc, #68]	; (8002fbc <HAL_RCC_ClockConfig+0x1a8>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	0019      	movs	r1, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f84:	f000 f820 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002f88:	0001      	movs	r1, r0
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_RCC_ClockConfig+0x1a0>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	220f      	movs	r2, #15
 8002f92:	4013      	ands	r3, r2
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_RCC_ClockConfig+0x1ac>)
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	000a      	movs	r2, r1
 8002f9a:	40da      	lsrs	r2, r3
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7fe ff5f 	bl	8001e64 <HAL_InitTick>
  
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b004      	add	sp, #16
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40022000 	.word	0x40022000
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	00001388 	.word	0x00001388
 8002fbc:	fffff8ff 	.word	0xfffff8ff
 8002fc0:	08004650 	.word	0x08004650
 8002fc4:	20000000 	.word	0x20000000

08002fc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b08f      	sub	sp, #60	; 0x3c
 8002fcc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002fce:	2314      	movs	r3, #20
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	4a37      	ldr	r2, [pc, #220]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002fd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002fd6:	c313      	stmia	r3!, {r0, r1, r4}
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	4a35      	ldr	r2, [pc, #212]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xec>)
 8002fe0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002fe2:	c313      	stmia	r3!, {r0, r1, r4}
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fec:	2300      	movs	r3, #0
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ffc:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	220c      	movs	r2, #12
 8003006:	4013      	ands	r3, r2
 8003008:	2b08      	cmp	r3, #8
 800300a:	d006      	beq.n	800301a <HAL_RCC_GetSysClockFreq+0x52>
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d043      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0xd0>
 8003010:	2b04      	cmp	r3, #4
 8003012:	d144      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003016:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003018:	e044      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	0c9b      	lsrs	r3, r3, #18
 800301e:	220f      	movs	r2, #15
 8003020:	4013      	ands	r3, r2
 8003022:	2214      	movs	r2, #20
 8003024:	18ba      	adds	r2, r7, r2
 8003026:	5cd3      	ldrb	r3, [r2, r3]
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800302a:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	220f      	movs	r2, #15
 8003030:	4013      	ands	r3, r2
 8003032:	1d3a      	adds	r2, r7, #4
 8003034:	5cd3      	ldrb	r3, [r2, r3]
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800303a:	23c0      	movs	r3, #192	; 0xc0
 800303c:	025b      	lsls	r3, r3, #9
 800303e:	401a      	ands	r2, r3
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	025b      	lsls	r3, r3, #9
 8003044:	429a      	cmp	r2, r3
 8003046:	d109      	bne.n	800305c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800304a:	481c      	ldr	r0, [pc, #112]	; (80030bc <HAL_RCC_GetSysClockFreq+0xf4>)
 800304c:	f7fd f85c 	bl	8000108 <__udivsi3>
 8003050:	0003      	movs	r3, r0
 8003052:	001a      	movs	r2, r3
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	4353      	muls	r3, r2
 8003058:	637b      	str	r3, [r7, #52]	; 0x34
 800305a:	e01a      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800305c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800305e:	23c0      	movs	r3, #192	; 0xc0
 8003060:	025b      	lsls	r3, r3, #9
 8003062:	401a      	ands	r2, r3
 8003064:	23c0      	movs	r3, #192	; 0xc0
 8003066:	025b      	lsls	r3, r3, #9
 8003068:	429a      	cmp	r2, r3
 800306a:	d109      	bne.n	8003080 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800306c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800306e:	4814      	ldr	r0, [pc, #80]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003070:	f7fd f84a 	bl	8000108 <__udivsi3>
 8003074:	0003      	movs	r3, r0
 8003076:	001a      	movs	r2, r3
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	4353      	muls	r3, r2
 800307c:	637b      	str	r3, [r7, #52]	; 0x34
 800307e:	e008      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003082:	480e      	ldr	r0, [pc, #56]	; (80030bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003084:	f7fd f840 	bl	8000108 <__udivsi3>
 8003088:	0003      	movs	r3, r0
 800308a:	001a      	movs	r2, r3
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	4353      	muls	r3, r2
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003094:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003096:	e005      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800309c:	e002      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <HAL_RCC_GetSysClockFreq+0xf4>)
 80030a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b00f      	add	sp, #60	; 0x3c
 80030ac:	bd90      	pop	{r4, r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	080041ac 	.word	0x080041ac
 80030b4:	080041bc 	.word	0x080041bc
 80030b8:	40021000 	.word	0x40021000
 80030bc:	007a1200 	.word	0x007a1200
 80030c0:	02dc6c00 	.word	0x02dc6c00

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b02      	ldr	r3, [pc, #8]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	20000000 	.word	0x20000000

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80030dc:	f7ff fff2 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e0:	0001      	movs	r1, r0
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	2207      	movs	r2, #7
 80030ea:	4013      	ands	r3, r2
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ee:	5cd3      	ldrb	r3, [r2, r3]
 80030f0:	40d9      	lsrs	r1, r3
 80030f2:	000b      	movs	r3, r1
}    
 80030f4:	0018      	movs	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	40021000 	.word	0x40021000
 8003100:	08004660 	.word	0x08004660

08003104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e08a      	b.n	800322c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	225d      	movs	r2, #93	; 0x5d
 8003120:	5c9b      	ldrb	r3, [r3, r2]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	225c      	movs	r2, #92	; 0x5c
 800312c:	2100      	movs	r1, #0
 800312e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	0018      	movs	r0, r3
 8003134:	f7fe fce8 	bl	8001b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	225d      	movs	r2, #93	; 0x5d
 800313c:	2102      	movs	r1, #2
 800313e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2140      	movs	r1, #64	; 0x40
 800314c:	438a      	bics	r2, r1
 800314e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	23e0      	movs	r3, #224	; 0xe0
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	429a      	cmp	r2, r3
 800315a:	d902      	bls.n	8003162 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e002      	b.n	8003168 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	015b      	lsls	r3, r3, #5
 8003166:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	23f0      	movs	r3, #240	; 0xf0
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	429a      	cmp	r2, r3
 8003172:	d008      	beq.n	8003186 <HAL_SPI_Init+0x82>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	23e0      	movs	r3, #224	; 0xe0
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	429a      	cmp	r2, r3
 800317e:	d002      	beq.n	8003186 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	23e0      	movs	r3, #224	; 0xe0
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	429a      	cmp	r2, r3
 8003198:	d903      	bls.n	80031a2 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
 80031a0:	e002      	b.n	80031a8 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6999      	ldr	r1, [r3, #24]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	400b      	ands	r3, r1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	0011      	movs	r1, r2
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	2204      	movs	r2, #4
 80031ec:	401a      	ands	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	431a      	orrs	r2, r3
 8003200:	0011      	movs	r1, r2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4907      	ldr	r1, [pc, #28]	; (8003234 <HAL_SPI_Init+0x130>)
 8003218:	400a      	ands	r2, r1
 800321a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	225d      	movs	r2, #93	; 0x5d
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	b004      	add	sp, #16
 8003232:	bd80      	pop	{r7, pc}
 8003234:	fffff7ff 	.word	0xfffff7ff

08003238 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e074      	b.n	8003334 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	223c      	movs	r2, #60	; 0x3c
 800324e:	5c9b      	ldrb	r3, [r3, r2]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d107      	bne.n	8003266 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	223d      	movs	r2, #61	; 0x3d
 800325a:	2100      	movs	r1, #0
 800325c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0018      	movs	r0, r3
 8003262:	f7fe fc9f 	bl	8001ba4 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	223c      	movs	r2, #60	; 0x3c
 800326a:	2102      	movs	r1, #2
 800326c:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6819      	ldr	r1, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003284:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800328c:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003292:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8003298:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800329e:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 80032a4:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 80032aa:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7b1b      	ldrb	r3, [r3, #12]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d108      	bne.n	80032ce <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2180      	movs	r1, #128	; 0x80
 80032c8:	0249      	lsls	r1, r1, #9
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	43d2      	mvns	r2, r2
 80032e4:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032fe:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681c      	ldr	r4, [r3, #0]
 8003308:	0010      	movs	r0, r2
 800330a:	f000 f817 	bl	800333c <TSC_extract_groups>
 800330e:	0003      	movs	r3, r0
 8003310:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2103      	movs	r1, #3
 800331e:	438a      	bics	r2, r1
 8003320:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2203      	movs	r2, #3
 8003328:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	223c      	movs	r2, #60	; 0x3c
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b003      	add	sp, #12
 800333a:	bd90      	pop	{r4, r7, pc}

0800333c <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8003348:	2300      	movs	r3, #0
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	e011      	b.n	8003372 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	220f      	movs	r2, #15
 8003354:	409a      	lsls	r2, r3
 8003356:	0013      	movs	r3, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	4013      	ands	r3, r2
 800335c:	d006      	beq.n	800336c <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 800335e:	2201      	movs	r2, #1
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	409a      	lsls	r2, r3
 8003364:	0013      	movs	r3, r2
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	3301      	adds	r3, #1
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b07      	cmp	r3, #7
 8003376:	d9ea      	bls.n	800334e <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8003378:	68fb      	ldr	r3, [r7, #12]
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b004      	add	sp, #16
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e044      	b.n	8003420 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339a:	2b00      	cmp	r3, #0
 800339c:	d107      	bne.n	80033ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2270      	movs	r2, #112	; 0x70
 80033a2:	2100      	movs	r1, #0
 80033a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7fe fc9b 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2224      	movs	r2, #36	; 0x24
 80033b2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	438a      	bics	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 fb10 	bl	80039ec <UART_SetConfig>
 80033cc:	0003      	movs	r3, r0
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e024      	b.n	8003420 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0018      	movs	r0, r3
 80033e2:	f000 fccf 	bl	8003d84 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	490d      	ldr	r1, [pc, #52]	; (8003428 <HAL_UART_Init+0xa4>)
 80033f2:	400a      	ands	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	212a      	movs	r1, #42	; 0x2a
 8003402:	438a      	bics	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2101      	movs	r1, #1
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0018      	movs	r0, r3
 800341a:	f000 fd67 	bl	8003eec <UART_CheckIdleState>
 800341e:	0003      	movs	r3, r0
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b002      	add	sp, #8
 8003426:	bd80      	pop	{r7, pc}
 8003428:	ffffb7ff 	.word	0xffffb7ff

0800342c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	; 0x28
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	1dbb      	adds	r3, r7, #6
 800343a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003440:	2b20      	cmp	r3, #32
 8003442:	d000      	beq.n	8003446 <HAL_UART_Transmit+0x1a>
 8003444:	e095      	b.n	8003572 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_UART_Transmit+0x28>
 800344c:	1dbb      	adds	r3, r7, #6
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e08d      	b.n	8003574 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	015b      	lsls	r3, r3, #5
 8003460:	429a      	cmp	r2, r3
 8003462:	d109      	bne.n	8003478 <HAL_UART_Transmit+0x4c>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2201      	movs	r2, #1
 8003470:	4013      	ands	r3, r2
 8003472:	d001      	beq.n	8003478 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e07d      	b.n	8003574 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2270      	movs	r2, #112	; 0x70
 800347c:	5c9b      	ldrb	r3, [r3, r2]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_UART_Transmit+0x5a>
 8003482:	2302      	movs	r3, #2
 8003484:	e076      	b.n	8003574 <HAL_UART_Transmit+0x148>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2270      	movs	r2, #112	; 0x70
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2221      	movs	r2, #33	; 0x21
 8003498:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800349a:	f7fe fd29 	bl	8001ef0 <HAL_GetTick>
 800349e:	0003      	movs	r3, r0
 80034a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1dba      	adds	r2, r7, #6
 80034a6:	2150      	movs	r1, #80	; 0x50
 80034a8:	8812      	ldrh	r2, [r2, #0]
 80034aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1dba      	adds	r2, r7, #6
 80034b0:	2152      	movs	r1, #82	; 0x52
 80034b2:	8812      	ldrh	r2, [r2, #0]
 80034b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	015b      	lsls	r3, r3, #5
 80034be:	429a      	cmp	r2, r3
 80034c0:	d108      	bne.n	80034d4 <HAL_UART_Transmit+0xa8>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d104      	bne.n	80034d4 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	e003      	b.n	80034dc <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034dc:	e02d      	b.n	800353a <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	0013      	movs	r3, r2
 80034e8:	2200      	movs	r2, #0
 80034ea:	2180      	movs	r1, #128	; 0x80
 80034ec:	f000 fd44 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e03d      	b.n	8003574 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10b      	bne.n	8003516 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	05d2      	lsls	r2, r2, #23
 8003508:	0dd2      	lsrs	r2, r2, #23
 800350a:	b292      	uxth	r2, r2
 800350c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	3302      	adds	r3, #2
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	e008      	b.n	8003528 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	781a      	ldrb	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	b292      	uxth	r2, r2
 8003520:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3301      	adds	r3, #1
 8003526:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2252      	movs	r2, #82	; 0x52
 800352c:	5a9b      	ldrh	r3, [r3, r2]
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b299      	uxth	r1, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2252      	movs	r2, #82	; 0x52
 8003538:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2252      	movs	r2, #82	; 0x52
 800353e:	5a9b      	ldrh	r3, [r3, r2]
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1cb      	bne.n	80034de <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	0013      	movs	r3, r2
 8003550:	2200      	movs	r2, #0
 8003552:	2140      	movs	r1, #64	; 0x40
 8003554:	f000 fd10 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 8003558:	1e03      	subs	r3, r0, #0
 800355a:	d001      	beq.n	8003560 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e009      	b.n	8003574 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2270      	movs	r2, #112	; 0x70
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	e000      	b.n	8003574 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
  }
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b008      	add	sp, #32
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	1dbb      	adds	r3, r7, #6
 800358a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003590:	2b20      	cmp	r3, #32
 8003592:	d000      	beq.n	8003596 <HAL_UART_Receive+0x1a>
 8003594:	e0d6      	b.n	8003744 <HAL_UART_Receive+0x1c8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_UART_Receive+0x28>
 800359c:	1dbb      	adds	r3, r7, #6
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0ce      	b.n	8003746 <HAL_UART_Receive+0x1ca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	015b      	lsls	r3, r3, #5
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d109      	bne.n	80035c8 <HAL_UART_Receive+0x4c>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2201      	movs	r2, #1
 80035c0:	4013      	ands	r3, r2
 80035c2:	d001      	beq.n	80035c8 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0be      	b.n	8003746 <HAL_UART_Receive+0x1ca>
      }
    }

    __HAL_LOCK(huart);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2270      	movs	r2, #112	; 0x70
 80035cc:	5c9b      	ldrb	r3, [r3, r2]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Receive+0x5a>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e0b7      	b.n	8003746 <HAL_UART_Receive+0x1ca>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2270      	movs	r2, #112	; 0x70
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2222      	movs	r2, #34	; 0x22
 80035e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80035ea:	f7fe fc81 	bl	8001ef0 <HAL_GetTick>
 80035ee:	0003      	movs	r3, r0
 80035f0:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1dba      	adds	r2, r7, #6
 80035f6:	2158      	movs	r1, #88	; 0x58
 80035f8:	8812      	ldrh	r2, [r2, #0]
 80035fa:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1dba      	adds	r2, r7, #6
 8003600:	215a      	movs	r1, #90	; 0x5a
 8003602:	8812      	ldrh	r2, [r2, #0]
 8003604:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	015b      	lsls	r3, r3, #5
 800360e:	429a      	cmp	r2, r3
 8003610:	d10d      	bne.n	800362e <HAL_UART_Receive+0xb2>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d104      	bne.n	8003624 <HAL_UART_Receive+0xa8>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	225c      	movs	r2, #92	; 0x5c
 800361e:	494c      	ldr	r1, [pc, #304]	; (8003750 <HAL_UART_Receive+0x1d4>)
 8003620:	5299      	strh	r1, [r3, r2]
 8003622:	e02e      	b.n	8003682 <HAL_UART_Receive+0x106>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	225c      	movs	r2, #92	; 0x5c
 8003628:	21ff      	movs	r1, #255	; 0xff
 800362a:	5299      	strh	r1, [r3, r2]
 800362c:	e029      	b.n	8003682 <HAL_UART_Receive+0x106>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10d      	bne.n	8003652 <HAL_UART_Receive+0xd6>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d104      	bne.n	8003648 <HAL_UART_Receive+0xcc>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	225c      	movs	r2, #92	; 0x5c
 8003642:	21ff      	movs	r1, #255	; 0xff
 8003644:	5299      	strh	r1, [r3, r2]
 8003646:	e01c      	b.n	8003682 <HAL_UART_Receive+0x106>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	225c      	movs	r2, #92	; 0x5c
 800364c:	217f      	movs	r1, #127	; 0x7f
 800364e:	5299      	strh	r1, [r3, r2]
 8003650:	e017      	b.n	8003682 <HAL_UART_Receive+0x106>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	055b      	lsls	r3, r3, #21
 800365a:	429a      	cmp	r2, r3
 800365c:	d10d      	bne.n	800367a <HAL_UART_Receive+0xfe>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <HAL_UART_Receive+0xf4>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	225c      	movs	r2, #92	; 0x5c
 800366a:	217f      	movs	r1, #127	; 0x7f
 800366c:	5299      	strh	r1, [r3, r2]
 800366e:	e008      	b.n	8003682 <HAL_UART_Receive+0x106>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	225c      	movs	r2, #92	; 0x5c
 8003674:	213f      	movs	r1, #63	; 0x3f
 8003676:	5299      	strh	r1, [r3, r2]
 8003678:	e003      	b.n	8003682 <HAL_UART_Receive+0x106>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	225c      	movs	r2, #92	; 0x5c
 800367e:	2100      	movs	r1, #0
 8003680:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003682:	2312      	movs	r3, #18
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	215c      	movs	r1, #92	; 0x5c
 800368a:	5a52      	ldrh	r2, [r2, r1]
 800368c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	015b      	lsls	r3, r3, #5
 8003696:	429a      	cmp	r2, r3
 8003698:	d108      	bne.n	80036ac <HAL_UART_Receive+0x130>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <HAL_UART_Receive+0x130>
    {
      pdata8bits  = NULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	e003      	b.n	80036b4 <HAL_UART_Receive+0x138>
    }
    else
    {
      pdata8bits  = pData;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80036b4:	e037      	b.n	8003726 <HAL_UART_Receive+0x1aa>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	0013      	movs	r3, r2
 80036c0:	2200      	movs	r2, #0
 80036c2:	2120      	movs	r1, #32
 80036c4:	f000 fc58 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 80036c8:	1e03      	subs	r3, r0, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_UART_Receive+0x154>
      {
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e03a      	b.n	8003746 <HAL_UART_Receive+0x1ca>
      }
      if (pdata8bits == NULL)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10e      	bne.n	80036f4 <HAL_UART_Receive+0x178>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2212      	movs	r2, #18
 80036e0:	18ba      	adds	r2, r7, r2
 80036e2:	8812      	ldrh	r2, [r2, #0]
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	3302      	adds	r3, #2
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	e00f      	b.n	8003714 <HAL_UART_Receive+0x198>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2212      	movs	r2, #18
 8003700:	18ba      	adds	r2, r7, r2
 8003702:	8812      	ldrh	r2, [r2, #0]
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	4013      	ands	r3, r2
 8003708:	b2da      	uxtb	r2, r3
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3301      	adds	r3, #1
 8003712:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	225a      	movs	r2, #90	; 0x5a
 8003718:	5a9b      	ldrh	r3, [r3, r2]
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b299      	uxth	r1, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	225a      	movs	r2, #90	; 0x5a
 8003724:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	225a      	movs	r2, #90	; 0x5a
 800372a:	5a9b      	ldrh	r3, [r3, r2]
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1c1      	bne.n	80036b6 <HAL_UART_Receive+0x13a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2270      	movs	r2, #112	; 0x70
 800373c:	2100      	movs	r1, #0
 800373e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e000      	b.n	8003746 <HAL_UART_Receive+0x1ca>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	0018      	movs	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	b008      	add	sp, #32
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	000001ff 	.word	0x000001ff

08003754 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4a93      	ldr	r2, [pc, #588]	; (80039c4 <HAL_UART_IRQHandler+0x270>)
 8003778:	4013      	ands	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d112      	bne.n	80037a8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	2220      	movs	r2, #32
 8003786:	4013      	ands	r3, r2
 8003788:	d00e      	beq.n	80037a8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2220      	movs	r2, #32
 800378e:	4013      	ands	r3, r2
 8003790:	d00a      	beq.n	80037a8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003796:	2b00      	cmp	r3, #0
 8003798:	d100      	bne.n	800379c <HAL_UART_IRQHandler+0x48>
 800379a:	e10b      	b.n	80039b4 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	0010      	movs	r0, r2
 80037a4:	4798      	blx	r3
      }
      return;
 80037a6:	e105      	b.n	80039b4 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d100      	bne.n	80037b0 <HAL_UART_IRQHandler+0x5c>
 80037ae:	e0cd      	b.n	800394c <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2201      	movs	r2, #1
 80037b4:	4013      	ands	r3, r2
 80037b6:	d105      	bne.n	80037c4 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	2390      	movs	r3, #144	; 0x90
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4013      	ands	r3, r2
 80037c0:	d100      	bne.n	80037c4 <HAL_UART_IRQHandler+0x70>
 80037c2:	e0c3      	b.n	800394c <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2201      	movs	r2, #1
 80037c8:	4013      	ands	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_UART_IRQHandler+0x96>
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	4013      	ands	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2201      	movs	r2, #1
 80037dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e2:	2201      	movs	r2, #1
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	2202      	movs	r2, #2
 80037ee:	4013      	ands	r3, r2
 80037f0:	d00d      	beq.n	800380e <HAL_UART_IRQHandler+0xba>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2201      	movs	r2, #1
 80037f6:	4013      	ands	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2202      	movs	r2, #2
 8003800:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003806:	2204      	movs	r2, #4
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	2204      	movs	r2, #4
 8003812:	4013      	ands	r3, r2
 8003814:	d00d      	beq.n	8003832 <HAL_UART_IRQHandler+0xde>
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2201      	movs	r2, #1
 800381a:	4013      	ands	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2204      	movs	r2, #4
 8003824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800382a:	2202      	movs	r2, #2
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	2208      	movs	r2, #8
 8003836:	4013      	ands	r3, r2
 8003838:	d011      	beq.n	800385e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2220      	movs	r2, #32
 800383e:	4013      	ands	r3, r2
 8003840:	d103      	bne.n	800384a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2201      	movs	r2, #1
 8003846:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003848:	d009      	beq.n	800385e <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2208      	movs	r2, #8
 8003850:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003856:	2208      	movs	r2, #8
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	2380      	movs	r3, #128	; 0x80
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4013      	ands	r3, r2
 8003866:	d00f      	beq.n	8003888 <HAL_UART_IRQHandler+0x134>
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	04db      	lsls	r3, r3, #19
 800386e:	4013      	ands	r3, r2
 8003870:	d00a      	beq.n	8003888 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2280      	movs	r2, #128	; 0x80
 8003878:	0112      	lsls	r2, r2, #4
 800387a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003880:	2220      	movs	r2, #32
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d100      	bne.n	8003892 <HAL_UART_IRQHandler+0x13e>
 8003890:	e092      	b.n	80039b8 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	2220      	movs	r2, #32
 8003896:	4013      	ands	r3, r2
 8003898:	d00c      	beq.n	80038b4 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2220      	movs	r2, #32
 800389e:	4013      	ands	r3, r2
 80038a0:	d008      	beq.n	80038b4 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d004      	beq.n	80038b4 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	0010      	movs	r0, r2
 80038b2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2240      	movs	r2, #64	; 0x40
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d003      	beq.n	80038d0 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2228      	movs	r2, #40	; 0x28
 80038cc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038ce:	d033      	beq.n	8003938 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f000 fbce 	bl	8004074 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2240      	movs	r2, #64	; 0x40
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	d123      	bne.n	800392e <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2140      	movs	r1, #64	; 0x40
 80038f2:	438a      	bics	r2, r1
 80038f4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d012      	beq.n	8003924 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003902:	4a31      	ldr	r2, [pc, #196]	; (80039c8 <HAL_UART_IRQHandler+0x274>)
 8003904:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800390a:	0018      	movs	r0, r3
 800390c:	f7fe fbd8 	bl	80020c0 <HAL_DMA_Abort_IT>
 8003910:	1e03      	subs	r3, r0, #0
 8003912:	d019      	beq.n	8003948 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800391e:	0018      	movs	r0, r3
 8003920:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003922:	e011      	b.n	8003948 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	0018      	movs	r0, r3
 8003928:	f000 f858 	bl	80039dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392c:	e00c      	b.n	8003948 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	0018      	movs	r0, r3
 8003932:	f000 f853 	bl	80039dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003936:	e007      	b.n	8003948 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	0018      	movs	r0, r3
 800393c:	f000 f84e 	bl	80039dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003946:	e037      	b.n	80039b8 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	46c0      	nop			; (mov r8, r8)
    return;
 800394a:	e035      	b.n	80039b8 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	035b      	lsls	r3, r3, #13
 8003952:	4013      	ands	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_UART_IRQHandler+0x220>
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	03db      	lsls	r3, r3, #15
 800395c:	4013      	ands	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2280      	movs	r2, #128	; 0x80
 8003966:	0352      	lsls	r2, r2, #13
 8003968:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	0018      	movs	r0, r3
 800396e:	f000 fbd2 	bl	8004116 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003972:	e024      	b.n	80039be <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	4013      	ands	r3, r2
 800397a:	d00d      	beq.n	8003998 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	4013      	ands	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003988:	2b00      	cmp	r3, #0
 800398a:	d017      	beq.n	80039bc <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	0010      	movs	r0, r2
 8003994:	4798      	blx	r3
    }
    return;
 8003996:	e011      	b.n	80039bc <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2240      	movs	r2, #64	; 0x40
 800399c:	4013      	ands	r3, r2
 800399e:	d00e      	beq.n	80039be <HAL_UART_IRQHandler+0x26a>
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2240      	movs	r2, #64	; 0x40
 80039a4:	4013      	ands	r3, r2
 80039a6:	d00a      	beq.n	80039be <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	0018      	movs	r0, r3
 80039ac:	f000 fb99 	bl	80040e2 <UART_EndTransmit_IT>
    return;
 80039b0:	46c0      	nop			; (mov r8, r8)
 80039b2:	e004      	b.n	80039be <HAL_UART_IRQHandler+0x26a>
      return;
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	e002      	b.n	80039be <HAL_UART_IRQHandler+0x26a>
    return;
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	e000      	b.n	80039be <HAL_UART_IRQHandler+0x26a>
    return;
 80039bc:	46c0      	nop			; (mov r8, r8)
  }

}
 80039be:	46bd      	mov	sp, r7
 80039c0:	b008      	add	sp, #32
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	0000080f 	.word	0x0000080f
 80039c8:	080040b5 	.word	0x080040b5

080039cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b002      	add	sp, #8
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}

080039ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80039f8:	2317      	movs	r3, #23
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4ac5      	ldr	r2, [pc, #788]	; (8003d34 <UART_SetConfig+0x348>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	0019      	movs	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4ac0      	ldr	r2, [pc, #768]	; (8003d38 <UART_SetConfig+0x34c>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	0019      	movs	r1, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4ab7      	ldr	r2, [pc, #732]	; (8003d3c <UART_SetConfig+0x350>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	0019      	movs	r1, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4ab3      	ldr	r2, [pc, #716]	; (8003d40 <UART_SetConfig+0x354>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d125      	bne.n	8003ac2 <UART_SetConfig+0xd6>
 8003a76:	4bb3      	ldr	r3, [pc, #716]	; (8003d44 <UART_SetConfig+0x358>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d00f      	beq.n	8003aa2 <UART_SetConfig+0xb6>
 8003a82:	d304      	bcc.n	8003a8e <UART_SetConfig+0xa2>
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d011      	beq.n	8003aac <UART_SetConfig+0xc0>
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d005      	beq.n	8003a98 <UART_SetConfig+0xac>
 8003a8c:	e013      	b.n	8003ab6 <UART_SetConfig+0xca>
 8003a8e:	231f      	movs	r3, #31
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e064      	b.n	8003b62 <UART_SetConfig+0x176>
 8003a98:	231f      	movs	r3, #31
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	e05f      	b.n	8003b62 <UART_SetConfig+0x176>
 8003aa2:	231f      	movs	r3, #31
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e05a      	b.n	8003b62 <UART_SetConfig+0x176>
 8003aac:	231f      	movs	r3, #31
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	701a      	strb	r2, [r3, #0]
 8003ab4:	e055      	b.n	8003b62 <UART_SetConfig+0x176>
 8003ab6:	231f      	movs	r3, #31
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	2210      	movs	r2, #16
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	e04f      	b.n	8003b62 <UART_SetConfig+0x176>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4aa0      	ldr	r2, [pc, #640]	; (8003d48 <UART_SetConfig+0x35c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d132      	bne.n	8003b32 <UART_SetConfig+0x146>
 8003acc:	4b9d      	ldr	r3, [pc, #628]	; (8003d44 <UART_SetConfig+0x358>)
 8003ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad0:	23c0      	movs	r3, #192	; 0xc0
 8003ad2:	029b      	lsls	r3, r3, #10
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	0252      	lsls	r2, r2, #9
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d019      	beq.n	8003b12 <UART_SetConfig+0x126>
 8003ade:	2280      	movs	r2, #128	; 0x80
 8003ae0:	0252      	lsls	r2, r2, #9
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d802      	bhi.n	8003aec <UART_SetConfig+0x100>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <UART_SetConfig+0x112>
 8003aea:	e01c      	b.n	8003b26 <UART_SetConfig+0x13a>
 8003aec:	2280      	movs	r2, #128	; 0x80
 8003aee:	0292      	lsls	r2, r2, #10
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <UART_SetConfig+0x130>
 8003af4:	22c0      	movs	r2, #192	; 0xc0
 8003af6:	0292      	lsls	r2, r2, #10
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d005      	beq.n	8003b08 <UART_SetConfig+0x11c>
 8003afc:	e013      	b.n	8003b26 <UART_SetConfig+0x13a>
 8003afe:	231f      	movs	r3, #31
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e02c      	b.n	8003b62 <UART_SetConfig+0x176>
 8003b08:	231f      	movs	r3, #31
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e027      	b.n	8003b62 <UART_SetConfig+0x176>
 8003b12:	231f      	movs	r3, #31
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	2204      	movs	r2, #4
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e022      	b.n	8003b62 <UART_SetConfig+0x176>
 8003b1c:	231f      	movs	r3, #31
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	2208      	movs	r2, #8
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	e01d      	b.n	8003b62 <UART_SetConfig+0x176>
 8003b26:	231f      	movs	r3, #31
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	2210      	movs	r2, #16
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	e017      	b.n	8003b62 <UART_SetConfig+0x176>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a85      	ldr	r2, [pc, #532]	; (8003d4c <UART_SetConfig+0x360>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d104      	bne.n	8003b46 <UART_SetConfig+0x15a>
 8003b3c:	231f      	movs	r3, #31
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e00d      	b.n	8003b62 <UART_SetConfig+0x176>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a81      	ldr	r2, [pc, #516]	; (8003d50 <UART_SetConfig+0x364>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d104      	bne.n	8003b5a <UART_SetConfig+0x16e>
 8003b50:	231f      	movs	r3, #31
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	e003      	b.n	8003b62 <UART_SetConfig+0x176>
 8003b5a:	231f      	movs	r3, #31
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	2210      	movs	r2, #16
 8003b60:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69da      	ldr	r2, [r3, #28]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d000      	beq.n	8003b70 <UART_SetConfig+0x184>
 8003b6e:	e07d      	b.n	8003c6c <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8003b70:	231f      	movs	r3, #31
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d01c      	beq.n	8003bb4 <UART_SetConfig+0x1c8>
 8003b7a:	dc02      	bgt.n	8003b82 <UART_SetConfig+0x196>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <UART_SetConfig+0x1a0>
 8003b80:	e04b      	b.n	8003c1a <UART_SetConfig+0x22e>
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d025      	beq.n	8003bd2 <UART_SetConfig+0x1e6>
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d037      	beq.n	8003bfa <UART_SetConfig+0x20e>
 8003b8a:	e046      	b.n	8003c1a <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b8c:	f7ff faa4 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8003b90:	0003      	movs	r3, r0
 8003b92:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	005a      	lsls	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	18d2      	adds	r2, r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	0019      	movs	r1, r3
 8003ba6:	0010      	movs	r0, r2
 8003ba8:	f7fc faae 	bl	8000108 <__udivsi3>
 8003bac:	0003      	movs	r3, r0
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	61bb      	str	r3, [r7, #24]
        break;
 8003bb2:	e037      	b.n	8003c24 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	4a66      	ldr	r2, [pc, #408]	; (8003d54 <UART_SetConfig+0x368>)
 8003bbc:	189a      	adds	r2, r3, r2
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	0010      	movs	r0, r2
 8003bc6:	f7fc fa9f 	bl	8000108 <__udivsi3>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	61bb      	str	r3, [r7, #24]
        break;
 8003bd0:	e028      	b.n	8003c24 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bd2:	f7ff f9f9 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	005a      	lsls	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	18d2      	adds	r2, r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	0019      	movs	r1, r3
 8003bec:	0010      	movs	r0, r2
 8003bee:	f7fc fa8b 	bl	8000108 <__udivsi3>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	61bb      	str	r3, [r7, #24]
        break;
 8003bf8:	e014      	b.n	8003c24 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	2280      	movs	r2, #128	; 0x80
 8003c02:	0252      	lsls	r2, r2, #9
 8003c04:	189a      	adds	r2, r3, r2
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	0010      	movs	r0, r2
 8003c0e:	f7fc fa7b 	bl	8000108 <__udivsi3>
 8003c12:	0003      	movs	r3, r0
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	61bb      	str	r3, [r7, #24]
        break;
 8003c18:	e004      	b.n	8003c24 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 8003c1a:	2317      	movs	r3, #23
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
        break;
 8003c22:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b0f      	cmp	r3, #15
 8003c28:	d91b      	bls.n	8003c62 <UART_SetConfig+0x276>
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	4a4a      	ldr	r2, [pc, #296]	; (8003d58 <UART_SetConfig+0x36c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d817      	bhi.n	8003c62 <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	200a      	movs	r0, #10
 8003c38:	183b      	adds	r3, r7, r0
 8003c3a:	210f      	movs	r1, #15
 8003c3c:	438a      	bics	r2, r1
 8003c3e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2207      	movs	r2, #7
 8003c48:	4013      	ands	r3, r2
 8003c4a:	b299      	uxth	r1, r3
 8003c4c:	183b      	adds	r3, r7, r0
 8003c4e:	183a      	adds	r2, r7, r0
 8003c50:	8812      	ldrh	r2, [r2, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	183a      	adds	r2, r7, r0
 8003c5c:	8812      	ldrh	r2, [r2, #0]
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	e082      	b.n	8003d68 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8003c62:	2317      	movs	r3, #23
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	2201      	movs	r2, #1
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	e07d      	b.n	8003d68 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8003c6c:	231f      	movs	r3, #31
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d01b      	beq.n	8003cae <UART_SetConfig+0x2c2>
 8003c76:	dc02      	bgt.n	8003c7e <UART_SetConfig+0x292>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <UART_SetConfig+0x29c>
 8003c7c:	e049      	b.n	8003d12 <UART_SetConfig+0x326>
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d024      	beq.n	8003ccc <UART_SetConfig+0x2e0>
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d035      	beq.n	8003cf2 <UART_SetConfig+0x306>
 8003c86:	e044      	b.n	8003d12 <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7ff fa26 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	085a      	lsrs	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	18d2      	adds	r2, r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	0019      	movs	r1, r3
 8003ca0:	0010      	movs	r0, r2
 8003ca2:	f7fc fa31 	bl	8000108 <__udivsi3>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	61bb      	str	r3, [r7, #24]
        break;
 8003cac:	e036      	b.n	8003d1c <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	4a29      	ldr	r2, [pc, #164]	; (8003d5c <UART_SetConfig+0x370>)
 8003cb6:	189a      	adds	r2, r3, r2
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	0010      	movs	r0, r2
 8003cc0:	f7fc fa22 	bl	8000108 <__udivsi3>
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	61bb      	str	r3, [r7, #24]
        break;
 8003cca:	e027      	b.n	8003d1c <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ccc:	f7ff f97c 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	085a      	lsrs	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	18d2      	adds	r2, r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	0010      	movs	r0, r2
 8003ce6:	f7fc fa0f 	bl	8000108 <__udivsi3>
 8003cea:	0003      	movs	r3, r0
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	61bb      	str	r3, [r7, #24]
        break;
 8003cf0:	e014      	b.n	8003d1c <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	2280      	movs	r2, #128	; 0x80
 8003cfa:	0212      	lsls	r2, r2, #8
 8003cfc:	189a      	adds	r2, r3, r2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	0019      	movs	r1, r3
 8003d04:	0010      	movs	r0, r2
 8003d06:	f7fc f9ff 	bl	8000108 <__udivsi3>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	61bb      	str	r3, [r7, #24]
        break;
 8003d10:	e004      	b.n	8003d1c <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 8003d12:	2317      	movs	r3, #23
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	2201      	movs	r2, #1
 8003d18:	701a      	strb	r2, [r3, #0]
        break;
 8003d1a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b0f      	cmp	r3, #15
 8003d20:	d91e      	bls.n	8003d60 <UART_SetConfig+0x374>
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <UART_SetConfig+0x36c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d81a      	bhi.n	8003d60 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	e019      	b.n	8003d68 <UART_SetConfig+0x37c>
 8003d34:	efff69f3 	.word	0xefff69f3
 8003d38:	ffffcfff 	.word	0xffffcfff
 8003d3c:	fffff4ff 	.word	0xfffff4ff
 8003d40:	40013800 	.word	0x40013800
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40004400 	.word	0x40004400
 8003d4c:	40004800 	.word	0x40004800
 8003d50:	40004c00 	.word	0x40004c00
 8003d54:	00f42400 	.word	0x00f42400
 8003d58:	0000ffff 	.word	0x0000ffff
 8003d5c:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8003d60:	2317      	movs	r3, #23
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d74:	2317      	movs	r3, #23
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	781b      	ldrb	r3, [r3, #0]
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b008      	add	sp, #32
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)

08003d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	2201      	movs	r2, #1
 8003d92:	4013      	ands	r3, r2
 8003d94:	d00b      	beq.n	8003dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a4a      	ldr	r2, [pc, #296]	; (8003ec8 <UART_AdvFeatureConfig+0x144>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2202      	movs	r2, #2
 8003db4:	4013      	ands	r3, r2
 8003db6:	d00b      	beq.n	8003dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4a43      	ldr	r2, [pc, #268]	; (8003ecc <UART_AdvFeatureConfig+0x148>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d00b      	beq.n	8003df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4a3b      	ldr	r2, [pc, #236]	; (8003ed0 <UART_AdvFeatureConfig+0x14c>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	0019      	movs	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2208      	movs	r2, #8
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d00b      	beq.n	8003e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4a34      	ldr	r2, [pc, #208]	; (8003ed4 <UART_AdvFeatureConfig+0x150>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	0019      	movs	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2210      	movs	r2, #16
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d00b      	beq.n	8003e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a2c      	ldr	r2, [pc, #176]	; (8003ed8 <UART_AdvFeatureConfig+0x154>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	0019      	movs	r1, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d00b      	beq.n	8003e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	4a25      	ldr	r2, [pc, #148]	; (8003edc <UART_AdvFeatureConfig+0x158>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	0019      	movs	r1, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	2240      	movs	r2, #64	; 0x40
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d01d      	beq.n	8003e9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <UART_AdvFeatureConfig+0x15c>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	035b      	lsls	r3, r3, #13
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d10b      	bne.n	8003e9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <UART_AdvFeatureConfig+0x160>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	0019      	movs	r1, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	2280      	movs	r2, #128	; 0x80
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d00b      	beq.n	8003ec0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	4a0e      	ldr	r2, [pc, #56]	; (8003ee8 <UART_AdvFeatureConfig+0x164>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
  }
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b002      	add	sp, #8
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	fffdffff 	.word	0xfffdffff
 8003ecc:	fffeffff 	.word	0xfffeffff
 8003ed0:	fffbffff 	.word	0xfffbffff
 8003ed4:	ffff7fff 	.word	0xffff7fff
 8003ed8:	ffffefff 	.word	0xffffefff
 8003edc:	ffffdfff 	.word	0xffffdfff
 8003ee0:	ffefffff 	.word	0xffefffff
 8003ee4:	ff9fffff 	.word	0xff9fffff
 8003ee8:	fff7ffff 	.word	0xfff7ffff

08003eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003efa:	f7fd fff9 	bl	8001ef0 <HAL_GetTick>
 8003efe:	0003      	movs	r3, r0
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2208      	movs	r2, #8
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d10d      	bne.n	8003f2c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	0399      	lsls	r1, r3, #14
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <UART_CheckIdleState+0x88>)
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	0013      	movs	r3, r2
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f000 f82a 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 8003f24:	1e03      	subs	r3, r0, #0
 8003f26:	d001      	beq.n	8003f2c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e01f      	b.n	8003f6c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2204      	movs	r2, #4
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d10d      	bne.n	8003f56 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	03d9      	lsls	r1, r3, #15
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <UART_CheckIdleState+0x88>)
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	0013      	movs	r3, r2
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f000 f815 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 8003f4e:	1e03      	subs	r3, r0, #0
 8003f50:	d001      	beq.n	8003f56 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e00a      	b.n	8003f6c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2270      	movs	r2, #112	; 0x70
 8003f66:	2100      	movs	r1, #0
 8003f68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b004      	add	sp, #16
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	01ffffff 	.word	0x01ffffff

08003f78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	1dfb      	adds	r3, r7, #7
 8003f86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f88:	e05d      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	d05a      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f90:	f7fd ffae 	bl	8001ef0 <HAL_GetTick>
 8003f94:	0002      	movs	r2, r0
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d302      	bcc.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d11b      	bne.n	8003fde <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	492f      	ldr	r1, [pc, #188]	; (8004070 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003fb2:	400a      	ands	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	438a      	bics	r2, r1
 8003fc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2270      	movs	r2, #112	; 0x70
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e043      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d02d      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	401a      	ands	r2, r3
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d123      	bne.n	8004046 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2280      	movs	r2, #128	; 0x80
 8004004:	0112      	lsls	r2, r2, #4
 8004006:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4917      	ldr	r1, [pc, #92]	; (8004070 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004014:	400a      	ands	r2, r1
 8004016:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2101      	movs	r1, #1
 8004024:	438a      	bics	r2, r1
 8004026:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2270      	movs	r2, #112	; 0x70
 800403e:	2100      	movs	r1, #0
 8004040:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e00f      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	4013      	ands	r3, r2
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	425a      	negs	r2, r3
 8004056:	4153      	adcs	r3, r2
 8004058:	b2db      	uxtb	r3, r3
 800405a:	001a      	movs	r2, r3
 800405c:	1dfb      	adds	r3, r7, #7
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d092      	beq.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	fffffe5f 	.word	0xfffffe5f

08004074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	490a      	ldr	r1, [pc, #40]	; (80040b0 <UART_EndRxTransfer+0x3c>)
 8004088:	400a      	ands	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2101      	movs	r1, #1
 8004098:	438a      	bics	r2, r1
 800409a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b002      	add	sp, #8
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	fffffedf 	.word	0xfffffedf

080040b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	225a      	movs	r2, #90	; 0x5a
 80040c6:	2100      	movs	r1, #0
 80040c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2252      	movs	r2, #82	; 0x52
 80040ce:	2100      	movs	r1, #0
 80040d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff fc81 	bl	80039dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	b004      	add	sp, #16
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2140      	movs	r1, #64	; 0x40
 80040f6:	438a      	bics	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	0018      	movs	r0, r3
 800410a:	f7ff fc5f 	bl	80039cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	46bd      	mov	sp, r7
 8004112:	b002      	add	sp, #8
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b002      	add	sp, #8
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <__libc_init_array>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	2600      	movs	r6, #0
 800412c:	4d0c      	ldr	r5, [pc, #48]	; (8004160 <__libc_init_array+0x38>)
 800412e:	4c0d      	ldr	r4, [pc, #52]	; (8004164 <__libc_init_array+0x3c>)
 8004130:	1b64      	subs	r4, r4, r5
 8004132:	10a4      	asrs	r4, r4, #2
 8004134:	42a6      	cmp	r6, r4
 8004136:	d109      	bne.n	800414c <__libc_init_array+0x24>
 8004138:	2600      	movs	r6, #0
 800413a:	f000 f82b 	bl	8004194 <_init>
 800413e:	4d0a      	ldr	r5, [pc, #40]	; (8004168 <__libc_init_array+0x40>)
 8004140:	4c0a      	ldr	r4, [pc, #40]	; (800416c <__libc_init_array+0x44>)
 8004142:	1b64      	subs	r4, r4, r5
 8004144:	10a4      	asrs	r4, r4, #2
 8004146:	42a6      	cmp	r6, r4
 8004148:	d105      	bne.n	8004156 <__libc_init_array+0x2e>
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	00b3      	lsls	r3, r6, #2
 800414e:	58eb      	ldr	r3, [r5, r3]
 8004150:	4798      	blx	r3
 8004152:	3601      	adds	r6, #1
 8004154:	e7ee      	b.n	8004134 <__libc_init_array+0xc>
 8004156:	00b3      	lsls	r3, r6, #2
 8004158:	58eb      	ldr	r3, [r5, r3]
 800415a:	4798      	blx	r3
 800415c:	3601      	adds	r6, #1
 800415e:	e7f2      	b.n	8004146 <__libc_init_array+0x1e>
 8004160:	08004668 	.word	0x08004668
 8004164:	08004668 	.word	0x08004668
 8004168:	08004668 	.word	0x08004668
 800416c:	08004670 	.word	0x08004670

08004170 <memcpy>:
 8004170:	2300      	movs	r3, #0
 8004172:	b510      	push	{r4, lr}
 8004174:	429a      	cmp	r2, r3
 8004176:	d100      	bne.n	800417a <memcpy+0xa>
 8004178:	bd10      	pop	{r4, pc}
 800417a:	5ccc      	ldrb	r4, [r1, r3]
 800417c:	54c4      	strb	r4, [r0, r3]
 800417e:	3301      	adds	r3, #1
 8004180:	e7f8      	b.n	8004174 <memcpy+0x4>

08004182 <memset>:
 8004182:	0003      	movs	r3, r0
 8004184:	1812      	adds	r2, r2, r0
 8004186:	4293      	cmp	r3, r2
 8004188:	d100      	bne.n	800418c <memset+0xa>
 800418a:	4770      	bx	lr
 800418c:	7019      	strb	r1, [r3, #0]
 800418e:	3301      	adds	r3, #1
 8004190:	e7f9      	b.n	8004186 <memset+0x4>
	...

08004194 <_init>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr

080041a0 <_fini>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr
